
==================== FINAL INTERFACE ====================
2016-12-12 00:14:37.129865 UTC

interface main@main:AlgParser [orphan module] [hpc] 8001
  interface hash: 0a0c52bc83104b3faeeafef88b556bf5
  ABI hash: 92f3a827acb9a4c042748bb6c970a485
  export-list hash: 1e3c0e2ea45406ebe59e3da15707b465
  orphan hash: 5b7e8fb1e49a060c5e867e4380e8e68b
  flag hash: 57df6340600cae32fd6f17b42c07a1a4
  sig of: Nothing
  used TH splices: False
  where
exports:
  AlgParser.<++>
  AlgParser.<:>
  AlgParser._algo
  AlgParser.algo
  AlgParser.binOp
  AlgParser.chkSentenceOrUnit
  AlgParser.def
  AlgParser.expand
  AlgParser.format
  AlgParser.getNom
  AlgParser.getParams
  AlgParser.int
  AlgParser.lexer
  AlgParser.mapNth
  AlgParser.minus
  AlgParser.nr
  AlgParser.number
  AlgParser.parseAlgoExpr
  AlgParser.parseExpression
  AlgParser.parseFloor
  AlgParser.parseFunc
  AlgParser.parseIdentifier
  AlgParser.parseInput
  AlgParser.parseLeftWing
  AlgParser.parseNumber
  AlgParser.parseNumeric
  AlgParser.parsePunctuator
  AlgParser.parseRange
  AlgParser.parseResol
  AlgParser.parseRightWing
  AlgParser.parseSet
  AlgParser.parseTerm
  AlgParser.plus
  AlgParser.resolFromList
  AlgParser.specialCharsMap
  AlgParser.stepOp
  AlgParser.stepsFromList
  AlgParser.unOp
  AlgParser.xlatOps
  AlgParser.ยบ
module dependencies: AlgAux AlgData AlgNum AlgSets [boot] AlgShow
                     Context [boot] Evid [boot] Lib.Colors Lib.Debug Lib.ISUnits
                     Lib.Noms Solver [boot] Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ratio bd7ae7e84fadf68e9483b9d3f1445f8c
import  -/  base-4.9.0.0:Data.String 69bb34ee5f2f4d95a41479e62b8fdc61
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:Data.Unique a6b8a9996ed8cef1a5afff4a4e49bd9e
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Stack 484558ec30050b556ef46627d184b02f
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  base-4.9.0.0:Text.Show.Functions f1511ea4f176ebdd43ebdc8db62f239d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  And 5d24d8c844bd2a97c85e63b7abcbb24f
  Bool 67f527cfffcc3ad2fd344285e61c737a
  DerivedFunc 50d2bf1cc2a319fbc93fd46322560471
  Div 775b00476d70cc8a25f3cca491cc087c
  Document 300b94279054e268cbaddbf88cd55282
  ElementOf fcc71430e74c3899ad99c3301ba98051
  Ellipsis 7fe5995c2eeca68984dc2412317220d4
  Equals 9500932a4069a75b430a3a44c9f0f2e7
  Equation 551a1d9fee8c2cb8da0f9aaca286e438
  Equiv bcbca3b57cace3058342528cd8f68537
  Exp e6844369b86b13f0dedad0ecd6de9184
  Floor b793e78fac6a98cf0909d2a13675d4b5
  Func 464633904860f7b8d151038b299768e1
  Geometric 4add4bc249ad1778779f77be6b48a32e
  Greater 4512db64871fd047ef64dd8534debcb9
  GreaterOrEqual a01ee902550a2703354b1a97ab6a3b2e
  Implic 18c8a8ece3f5a0292f53fe1c3ea73ae8
  Index 5786e751a668fc11e3204e9faf0dcd1c
  Infinit 9666a84f86ee6e9cdb8e02658a597d56
  Infinitesimal 8d523f656bf7ac41e9b2294be7a254b5
  Intersect 1bd339fb9bda5755a1a75cc848589700
  InvFunc a7eaef33d523c34ba66619488a5717e6
  InvRelates ccf838349a32cba1b61699a121848fb8
  Less c36695b59b4e48329b7124d1706fa572
  LessOrEqual dbdbaf734cfe4774f93497dc5d2af134
  List a491851cc569fc9864b8c7e1b6f6d617
  Lit 11c3a155764287bafe570d1de382257a
  Log 4658a810e53021bb8194eae2310bf5d3
  Mul 2f35706afddb4d148a595d106eedb7e6
  Neg 67362d85eaf7d8ee80f48cd9dd9d09b9
  Nom 95d978c8cc5eb26be29a90158f860ad8
  NotElementOf 04db0c303219c1a17b294cd68fb48dde
  NotEqual 60d0afbeee1e2fdbb3638c5c45b39a68
  Numeric 34a12d3a4a552068d786a20a441a5a0c
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Ops 4d4ded7a73ed5a4c8b83cf0bae613d27
  Or 202d2d148971979f168ac1edee2eb873
  Params f043d598866a816d6d2bad93df3e2d5e
  Pos b08290a384a9fff859e51e6e96d36be9
  PosOrNeg b3f0c68bd9c71c66fe74c52951484dab
  Pref 5bdc838a1ea7f62e685a4ad812e98018
  Punctuation 1c9e37e1c8217bd64ed668d863f1947d
  Quant d2fc267388e95b11912599d611536fcb
  Range 8e438ad81c1a17806c0c52a93fe011d8
  RangeWing 2115629cd83e25a0656a9efbb024a9bc
  RangeWing 4d637072ad901205bf793a262f526c33
  Relates 2c99c68533c337380850ff06d2103e36
  Resol 8effdfb668f5cb607c4bd51445f565fb
  Root c769dc3e9496719f922608bf2389ae38
  Sentence a6f8cb43a9ff4b05aac8fe8177bf8f38
  Set a6ae8efb481222e569393086741f0e5f
  SetExpr 3b2dff8429ec38b7490ffad48bfe57ce
  Sets ad18523b421d9287ca0aae16bff820d8
  Simpl c2dd23a8d56a67aeb71c59f26e43b05d
  Sub aaf2da6bfff58a4523858f58c32df4b3
  SuchThat 655c0f92ad2a71ee3007923c84b1d621
  Sum d5f11b74783ac2a16ec6db1a10fe0ff0
  System dff1e0e43983d65f96ab9b0cc376b202
  Und ae1870307e7dc3a94128d7dfda7cf0f8
  Union 5234cda473491e1abeb9830deb516287
  Unit 54a8ab43ab3314954f3f50907655fbd2
  canComut 9336e5ce1b06bb33ba2abdaf4a0173cb
  equatOps 24149df67c5148a043074cf3bc329ffd
  logicOps 4b3a784d6a53216a44782ed61826c751
  paramsOps 4ae810f709963c777d05267a8cc039b6
  prior 2a8a7c59b2ca4821612561d2d4131eae
  quant 1163b138515e147b4525b85db997c469
import  -/  AlgSets 497bab0d145816bfe1f10c37b09a8ffb
  exports: a418c89a854e08fcc0f4a98e6eb0a5da
  _N f58a4da4615b9fa278f90d6cc720fc99
  _Q b8d164b84eb05ba6dcfae472cc312eca
  _R 5eb652888ea9defd28e03612c137085e
import  -/  AlgShow fcfeb78e77c98c4f4ab51d6062a0e40d
  exports: 5fdcc8d88371b431351310f3bb37bf3d
  toRatio 0853a7a1cec538fd403669c9d5fc7498
import  -/  Lib.Colors 661ee66eb71335da3fd90f984f3e9e14
  exports: dd28f8f849d9531d0a7956c1d1cf94af
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_PARSER ee8b79c8f0a822f45c4e36a811192a0d
  dInfo b92a087152f8e08b1fbae947a3f5da6f
  โ 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Lib.ISUnits 5202eab2140996d8423fa18491ea1ee9
  exports: 25b531ebae09cc2b3e2bc89840df989a
  is_dim_keys 2cf5927df9931f5460e66da6ac7449c5
  is_scale_symbols 87cc177029f21e07baa04d9d59f06d14
import  -/  Lib.Noms 2d56e88a289ad37b00090ddb7a06fc81
  exports: 8a9b0085f320a4deb44ddea66e85019e
  NrRatio c5c6d48e6611c93db826c6f43b36a153
  NrReal 05af66b1a6c879b20489fc53a8f8da62
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #= c726cdd588c1bab42d70cffbda697ac7
  flatOp 37cffb9d9afad80a09e3fe4454b02bc2
  ok 3861b4d7f0d7b7d312a010526a83efc5
  specialChars f8b3b49883ceccabbc5f41944b0edb4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Trans 0a058c68d8234a5f23a0f2e61a261faf
import  -/  numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj:Data.Number.CReal 1a55b0320066e0e2ba4dc64187eb0074
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec b7773bc8c1ac3ed6fd10bf4cd77e4211
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char 1818451bffb866651c4613a8afa5c49a
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator decde65bbb233474d69ea522b099bfaf
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Expr 99dfec26ec833508740511c50a3971a6
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Language 82f47dec07f2f1eb28baf795089767cc
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim 52235281ee22406676917ab4032b6b25
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.String af9f9fc1efa7841e1343b5e5adceda1c
import  -/  parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token 042361c0300f7970870abae532d3645c
import  -/  regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt:Text.Regex 09b25bf7de10707ccb5258311435d7fa
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 71b18e7cee55f7c318eb9e2d0cbc48bd
8c691a9ecb95266b2232d5c3107ff178
  $fIsStringAlgo :: Data.String.IsString AlgData.Algo
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                AlgParser.$fIsStringAlgo_$cfromString
                  `cast`
                (Sym (Data.String.N:IsString[0]) <AlgData.Algo>_N) -}
70edc90ecc13735004c2ede733318e95
  $fIsStringAlgo_$cfromString :: GHC.Base.String -> AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.fromString} True True} AlgParser._algo) -}
4af2dfefd518fc71607ff5ed833e453f
  $fReadAlgo :: GHC.Read.Read AlgData.Algo
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Algo
                  AlgParser.$fReadAlgo_$creadsPrec
                  AlgParser.$fReadAlgo_$creadList
                  AlgParser.$fReadAlgo_$creadPrec
                  AlgParser.$fReadAlgo_$creadListPrec -}
57c49760f2954d2ba8067c2c474b7d72
  $fReadAlgo1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([AlgData.Algo] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [AlgData.Algo] -> Text.ParserCombinators.ReadP.P b) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [AlgData.Algo]
                        AlgParser.$fReadAlgo_$creadList
                        @ b
                        eta1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b ww1 }) -}
a5b7bfad5b19a10d32bd70620580ea37
  $fReadAlgo2 :: Text.ParserCombinators.ReadP.P [AlgData.Algo]
  {- Unfolding: (GHC.Read.$wlist
                   @ AlgData.Algo
                   AlgParser.$fReadAlgo3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <AlgData.Algo>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <AlgData.Algo>_R)))
                   @ [AlgData.Algo]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [AlgData.Algo])) -}
c8c3bca1d44ea415466833140afb7760
  $fReadAlgo3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (AlgData.Algo -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: AlgData.Algo -> Text.ParserCombinators.ReadP.P b) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ AlgData.Algo
                        (AlgParser.$fReadAlgo_$creadsPrec eta)
                        @ b
                        eta1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b ww1 }) -}
9f6f77dbd27062fff98267d4d24477eb
  $fReadAlgo_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [AlgData.Algo]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [AlgData.Algo]
                   AlgParser.$fReadAlgo2) -}
86fc49519a95359dff51cc2e06059145
  $fReadAlgo_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [AlgData.Algo]
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2,
     Unfolding: InlineRule (0, True, True)
                AlgParser.$fReadAlgo1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[AlgData.Algo]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[AlgData.Algo]>_R))) -}
faa117c007ba06d26d90225bb0022f2e
  $fReadAlgo_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec AlgData.Algo
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2,
     Unfolding: InlineRule (0, True, True)
                AlgParser.$fReadAlgo3
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <AlgData.Algo>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <AlgData.Algo>_R))) -}
348af780a042e47bf763865cca5d099a
  $fReadAlgo_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS AlgData.Algo
  {- Arity: 2, Strictness: <L,A><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (d :: GHC.Types.Int) (s :: GHC.Base.String) ->
                 {__scc {main@main:AlgParser.readsPrec} True False} GHC.Types.:
                                                                      @ (AlgData.Algo,
                                                                         GHC.Base.String)
                                                                      ({__scc {main@main:AlgParser.readsPrec} False True} AlgParser._algo
                                                                                                                            s,
                                                                       GHC.Types.[]
                                                                         @ GHC.Types.Char)
                                                                      (GHC.Types.[]
                                                                         @ (AlgData.Algo,
                                                                            GHC.Base.String))) -}
72cdde62863eb59b92407874c4a20c3a
  $fShowParsecT ::
    GHC.Show.Show (Text.Parsec.String.Parser AlgData.Algo)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Parsec.String.Parser AlgData.Algo)
                  AlgParser.$fShowParsecT_$cshowsPrec
                  AlgParser.$fShowParsecT_$cshow
                  AlgParser.$fShowParsecT_$cshowList -}
adfc285981319b7eb76c658c74859d38
  $fShowParsecT1 :: GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 {__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} True True} let {
                                                                                                                          n :: [GHC.Types.Char]
                                                                                                                          = GHC.Base.++
                                                                                                                              @ GHC.Types.Char
                                                                                                                              s
                                                                                                                              AlgParser.$fShowParsecT3
                                                                                                                        } in
                                                                                                                        letrec {
                                                                                                                          go8 :: [GHC.Types.Char]
                                                                                                                                 -> [GHC.Types.Char]
                                                                                                                            {- Arity: 1,
                                                                                                                               Strictness: <S,1*U> -}
                                                                                                                          = \ (ds :: [GHC.Types.Char]) ->
                                                                                                                            case ds of wild {
                                                                                                                              []
                                                                                                                              -> n
                                                                                                                              : y ys
                                                                                                                              -> GHC.Types.:
                                                                                                                                   @ GHC.Types.Char
                                                                                                                                   y
                                                                                                                                   (go8
                                                                                                                                      ys) }
                                                                                                                        } in
                                                                                                                        go8
                                                                                                                          AlgParser.$fShowParsecT2) -}
55619f6e1b21edd83a3731cd8380cb67
  $fShowParsecT2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} False True} {__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                                                                                   "\\194\\171Algo parser "#) -}
9f7d9e6274a8ca072037f02049401d87
  $fShowParsecT3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                           "\\194\\187"#) -}
87634dccb0fd4cb555214dd48d248dae
  $fShowParsecT4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} False True} AlgParser.$fShowParsecT_go
                                                                                                                           AlgParser.$fShowParsecT2) -}
b27298d4e8eef128f09be4dc8b0b5fcc
  $fShowParsecT_$cshow ::
    Text.Parsec.String.Parser AlgData.Algo -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ (w :: Text.Parsec.String.Parser AlgData.Algo) ->
                 {__scc {main@main:AlgParser.showsPrec} True False} {__scc {main@main:AlgParser.showsPrec} False True} {__scc {main@main:AlgParser.showsPrec.\} True False} AlgParser.$fShowParsecT4) -}
1ff5e498527efc7d546c198fda659b8a
  $fShowParsecT_$cshowList ::
    [Text.Parsec.String.Parser AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Text.Parsec.String.Parser AlgData.Algo])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Text.Parsec.String.Parser AlgData.Algo)
                   (\ (ds :: Text.Parsec.String.Parser AlgData.Algo) ->
                    {__scc {main@main:AlgParser.showsPrec} True False} AlgParser.$fShowParsecT1)
                   ls
                   s) -}
c7c9e7922f66d53ef3f17cba1a62c28a
  $fShowParsecT_$cshowsPrec ::
    GHC.Types.Int
    -> Text.Parsec.String.Parser AlgData.Algo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Text.Parsec.String.Parser AlgData.Algo) ->
                 {__scc {main@main:AlgParser.showsPrec} True False} AlgParser.$fShowParsecT1) -}
e518fbf8549152bcaa7646d3bb8fb3fe
  $fShowParsecT_go :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
1880485d0ceefc36548af9f8b974e057
  $fxIsStringAlgo :: Data.String.IsString AlgData.Algo
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.$fIsStringAlgo_$cfromString
                  `cast`
                (Sym (Data.String.N:IsString[0]) <AlgData.Algo>_N) -}
9347aae65f21bd18e7e42fa9928b87ec
  $fxReadAlgo :: GHC.Read.Read AlgData.Algo
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) AlgParser.$fReadAlgo -}
3884650cdba16165f5007af93c2b8e04
  $s$dmshow1 ::
    Text.Parsec.String.Parser AlgData.Algo
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (\ (ds :: Text.Parsec.String.Parser AlgData.Algo) ->
                 {__scc {main@main:AlgParser.showsPrec} True False} AlgParser.$fShowParsecT1) -}
9f1aee28eb52eb44df874f4ddc949ddd
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (AlgParser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (AlgParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
6c3827d1711f9304a278af56df3a3814
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
fa02624fa7c281185938d97125ae78f4
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.uncons} True True} case ds of wild {
                                                                                                                  []
                                                                                                                  -> GHC.Base.$
                                                                                                                       @ 'GHC.Types.PtrRepLifted
                                                                                                                       @ (GHC.Base.Maybe
                                                                                                                            (tok,
                                                                                                                             [tok]))
                                                                                                                       @ (Data.Functor.Identity.Identity
                                                                                                                            (GHC.Base.Maybe
                                                                                                                               (tok,
                                                                                                                                [tok])))
                                                                                                                       (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                                                                                                                          @ (GHC.Base.Maybe
                                                                                                                               (tok,
                                                                                                                                [tok])))
                                                                                                                       (GHC.Base.Nothing
                                                                                                                          @ (tok,
                                                                                                                             [tok]))
                                                                                                                  : t ts
                                                                                                                  -> GHC.Base.$
                                                                                                                       @ 'GHC.Types.PtrRepLifted
                                                                                                                       @ (GHC.Base.Maybe
                                                                                                                            (tok,
                                                                                                                             [tok]))
                                                                                                                       @ (Data.Functor.Identity.Identity
                                                                                                                            (GHC.Base.Maybe
                                                                                                                               (tok,
                                                                                                                                [tok])))
                                                                                                                       (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                                                                                                                          @ (GHC.Base.Maybe
                                                                                                                               (tok,
                                                                                                                                [tok])))
                                                                                                                       (GHC.Base.Just
                                                                                                                          @ (tok,
                                                                                                                             [tok])
                                                                                                                          (t,
                                                                                                                           ts)) }) -}
91cf0e6465ce3ca052b627e74cff6f1a
  $slookup2 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5f6c977fca0e5cbe07e6c716efab88e9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AlgParser.$trModule2
                   AlgParser.$trModule1) -}
2b960f351f2a98b501ef05e5f7ebbae4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AlgParser"#) -}
4409dea1db23e6460f4b887e74a07bbe
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2aa873245e5010cc560ba85ef9cd9ea5
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
2a6e116b05acda505fcd8dd34ad96658
  $w$sparseNumeric ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String u Data.Functor.Identity.Identity
    -> forall b1.
       Text.Parsec.Prim.State GHC.Base.String u
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State GHC.Base.String u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State GHC.Base.String u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ u
                   (w :: Text.Parsec.Token.GenTokenParser
                           GHC.Base.String u Data.Functor.Identity.Identity)
                   @ b1 ->
                 {__scc {main@main:AlgParser.parseNumeric} True True} let {
                                                                        p :: Text.Parsec.Prim.ParsecT
                                                                               GHC.Base.String
                                                                               u
                                                                               Data.Functor.Identity.Identity
                                                                               GHC.Base.String
                                                                        = ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case w of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                           ds14 })
                                                                            AlgParser.parseTerm78
                                                                      } in
                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                              u)
                                                                                                                                                                     (cok :: AlgData.Algo
                                                                                                                                                                             -> Text.Parsec.Prim.State
                                                                                                                                                                                  GHC.Base.String
                                                                                                                                                                                  u
                                                                                                                                                                             -> Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1)
                                                                                                                                                                     (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1)
                                                                                                                                                                     (eok :: AlgData.Algo
                                                                                                                                                                             -> Text.Parsec.Prim.State
                                                                                                                                                                                  GHC.Base.String
                                                                                                                                                                                  u
                                                                                                                                                                             -> Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1)
                                                                                                                                                                     (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1) ->
                                                                                                                                                                   {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} p `cast`
                                                                                                                                                                                                                                                                                                                                                                  (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                       <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                       <u>_R
                                                                                                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                       <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                    s1
                                                                                                                                                                                                                                                                                                                                                                    (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                       (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                u)
                                                                                                                                                                                                                                                                                                                                                                       (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                     {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm74
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @ u
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     u)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err')))
                                                                                                                                                                                                                                                                                                                                                                    cerr
                                                                                                                                                                                                                                                                                                                                                                    (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                       (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                u)
                                                                                                                                                                                                                                                                                                                                                                       (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                     {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm74
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @ u
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     u)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               err')))
                                                                                                                                                                                                                                                                                                                                                                    eerr) -}
c52980015784b9c7d3ca9891131f6d6e
  $wlvl ::
    AlgData.Algo
    -> forall b.
       Text.Parsec.Prim.State s u
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b)
       -> m b
  {- Arity: 3,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><C(C(C(S))),1*C1(C1(C1(U)))>,
     Inline: [0] -}
1a9e43fa9ceca94552605035748fd43f
  $wparseFloor ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
75f012dfbde6b175145a90f3129c8531
  $wparseFunc ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1,
     Strictness: <L,U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
5785a23afd8bd956e62728ca1e42fa38
  $wparseNumeric ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Token.GenTokenParser s u m
    -> forall b1.
       Text.Parsec.Prim.State s u
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> m b1
  {- Arity: 2,
     Strictness: <L,U(U,C(U))><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
96bfbd123af88b0c97983e7b1870fe02
  $wparseRange ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
e415ca6f95a6fc444c214414dce15c41
  $wpoly_go1 ::
    GHC.Prim.Char#
    -> Data.Map.Base.Map GHC.Types.Char a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
2b020a886e64441e09eac22863e9fe6c
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6d79418d1823c738a1299a628844aeec
  (<++>) :: GHC.Base.Applicative f => f [a] -> f [a] -> f [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: f [a])
                   (eta1 :: f [a]) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 {__scc {main@main:AlgParser.<++>} True True} GHC.Base.<*>
                                                                @ f
                                                                $dApplicative
                                                                @ [a]
                                                                @ [a]
                                                                (GHC.Base.fmap
                                                                   @ f
                                                                   $dFunctor
                                                                   @ [a]
                                                                   @ ([a] -> [a])
                                                                   (GHC.Base.++ @ a)
                                                                   eta)
                                                                eta1) -}
fafccdbcf4ce39f3e511dc4c91ae1a15
  (<:>) :: GHC.Base.Applicative f => f a -> f [a] -> f [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: f a)
                   (eta1 :: f [a]) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 {__scc {main@main:AlgParser.<:>} True True} GHC.Base.<*>
                                                               @ f
                                                               $dApplicative
                                                               @ [a]
                                                               @ [a]
                                                               (GHC.Base.fmap
                                                                  @ f
                                                                  $dFunctor
                                                                  @ a
                                                                  @ ([a] -> [a])
                                                                  (GHC.Types.: @ a)
                                                                  eta)
                                                               eta1) -}
0288fd993b3b01ec3ba73bf2f1567a07
  _algo :: [GHC.Types.Char] -> AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: [GHC.Types.Char]) ->
                 {__scc {main@main:AlgParser._algo} True True} case {__scc {main@main:AlgParser._algo.r} True True} AlgParser.parseResol
                                                                                                                      (AlgParser._algo_expanded
                                                                                                                         (AlgParser.xlatOps
                                                                                                                            s)) of wild {
                                                                 GHC.Base.Nothing
                                                                 -> GHC.Stack.errorWithStackTrace
                                                                      @ AlgData.Algo
                                                                      (GHC.CString.unpackAppendCString#
                                                                         "parse error at: "#
                                                                         s)
                                                                 GHC.Base.Just ipv
                                                                 -> AlgParser.format ipv }) -}
ce779857f96c614af8cb8e1e12ae1551
  _algo_$sconcatMap :: (a -> [b]) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (f :: a -> [b]) (xs :: [a]) ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 (c :: b -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (\ (x :: a) (b2 :: b1)[OneShot] ->
                       GHC.Base.foldr @ b @ b1 c b2 (f x))
                      n
                      xs)) -}
2322e52a1d5d53771d0b1fbc6e9132c5
  _algo_expanded :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser._algo} False True} {__scc {main@main:AlgParser._algo.expanded} True True} AlgParser._algo_$sconcatMap
                                                                                                                         @ GHC.Types.Char
                                                                                                                         @ GHC.Types.Char
                                                                                                                         AlgParser.expand) -}
1033716463d32b95f496c2ef4b7bef9f
  algo :: [GHC.Types.Char] -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: [GHC.Types.Char]) ->
                 {__scc {main@main:AlgParser.algo} True True} case AlgParser.parseResol
                                                                     (AlgParser.algo_go
                                                                        (AlgParser.xlatOps
                                                                           s)) of wild {
                                                                GHC.Base.Nothing
                                                                -> GHC.Base.Nothing @ AlgData.Algo
                                                                GHC.Base.Just x
                                                                -> GHC.Base.Just
                                                                     @ AlgData.Algo
                                                                     (AlgParser.format x) }) -}
b53745e836b609b0bd7e2da7c53b79fd
  algo_go :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
b9f8d5aa464a27b56ce79030b1eddc2e
  binOp ::
    AlgData.Ops -> AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
0418b6faecf58d350c14c4a4162289d0
  chkSentenceOrUnit :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (a :: AlgData.Algo) (b :: AlgData.Algo) ->
                 {__scc {main@main:AlgParser.chkSentenceOrUnit} True True} case b of wild {
                                                                             DEFAULT
                                                                             -> Lib.Debug.$wโ
                                                                                  @ AlgData.Algo
                                                                                  AlgShow.$fShowAlgo
                                                                                  Lib.Debug.D_PARSER
                                                                                  AlgParser.chkSentenceOrUnit4
                                                                                  (AlgData.Op
                                                                                     AlgData.Sentence
                                                                                     (GHC.Types.:
                                                                                        @ AlgData.Algo
                                                                                        a
                                                                                        (GHC.Types.:
                                                                                           @ AlgData.Algo
                                                                                           wild
                                                                                           (GHC.Types.[]
                                                                                              @ AlgData.Algo))))
                                                                             AlgData.Lit b'
                                                                             -> case Lib.Debug.$wdInfo
                                                                                       Lib.Debug.D_PARSER
                                                                                       (GHC.Base.++
                                                                                          @ GHC.Types.Char
                                                                                          (AlgShow.$fShowAlgSets_$cshow1
                                                                                             a)
                                                                                          (GHC.CString.unpackAppendCString#
                                                                                             " chkSentenceOrUnit "#
                                                                                             (AlgShow.$fShowAlgSets_$cshow1
                                                                                                wild))) of wild1 {
                                                                                  GHC.Types.False
                                                                                  -> case {__scc {main@main:AlgParser.chkSentenceOrUnit.ss} True True} AlgParser.$slookup2
                                                                                                                                                         @ AlgData.Scale
                                                                                                                                                         b'
                                                                                                                                                         Lib.ISUnits.is_scale_symbols of wild2 {
                                                                                       GHC.Base.Nothing
                                                                                       -> Lib.Debug.$wโ
                                                                                            @ AlgData.Algo
                                                                                            AlgShow.$fShowAlgo
                                                                                            Lib.Debug.D_PARSER
                                                                                            AlgParser.chkSentenceOrUnit3
                                                                                            (AlgData.Op
                                                                                               AlgData.Sentence
                                                                                               (GHC.Types.:
                                                                                                  @ AlgData.Algo
                                                                                                  a
                                                                                                  (GHC.Types.:
                                                                                                     @ AlgData.Algo
                                                                                                     wild
                                                                                                     (GHC.Types.[]
                                                                                                        @ AlgData.Algo))))
                                                                                       GHC.Base.Just ipv
                                                                                       -> Lib.Debug.$wโ
                                                                                            @ AlgData.Algo
                                                                                            AlgShow.$fShowAlgo
                                                                                            Lib.Debug.D_PARSER
                                                                                            AlgParser.chkSentenceOrUnit2
                                                                                            (AlgData.Quant
                                                                                               (a,
                                                                                                ipv)) }
                                                                                  GHC.Types.True
                                                                                  -> AlgParser.chkSentenceOrUnit1 } }) -}
49da693a95d02ab7c54f9fcb08414796
  chkSentenceOrUnit1 :: AlgData.Algo
  {- Strictness: x -}
1c97481b412c3fdc96ad28b0051e3b5e
  chkSentenceOrUnit2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.chkSentenceOrUnit} False True} GHC.CString.unpackCString#
                                                                              "Quant:"#) -}
651bead474cf40f06e1c712fbca6dd8b
  chkSentenceOrUnit3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.chkSentenceOrUnit} False True} GHC.CString.unpackCString#
                                                                              "sentence:"#) -}
9f67d318877656648f76488efd4fbffd
  chkSentenceOrUnit4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.chkSentenceOrUnit} False True} GHC.CString.unpackCString#
                                                                              "other sentence:"#) -}
70e6a1a500169127aba7a0e461b49b8e
  def ::
    Text.Parsec.Token.GenLanguageDef
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} True True} case Text.Parsec.Language.emptyDef
                                                                    @ GHC.Prim.Any of wild { Text.Parsec.Token.LanguageDef ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                                                             Text.Parsec.Token.LanguageDef
                                                               @ GHC.Base.String
                                                               @ u
                                                               @ Data.Functor.Identity.Identity
                                                               ds
                                                               ds1
                                                               ds2
                                                               ds3
                                                               (AlgParser.def28 @ u)
                                                                 `cast`
                                                               (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                         <GHC.Base.String>_R
                                                                         <u>_R
                                                                         <Data.Functor.Identity.Identity>_R
                                                                         <GHC.Types.Char>_R))
                                                               (AlgParser.def25 @ u)
                                                                 `cast`
                                                               (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                         <GHC.Base.String>_R
                                                                         <u>_R
                                                                         <Data.Functor.Identity.Identity>_R
                                                                         <GHC.Types.Char>_R))
                                                               (AlgParser.def22 @ u)
                                                               (AlgParser.def19 @ u)
                                                               AlgParser.def13
                                                               AlgParser.def1
                                                               ds10 }) -}
9759f3795c4c5f18553672ae87d92542
  def1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def12
                   AlgParser.def2) -}
d2f904271c389ea02766a52a0adc8821
  def10 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCString#
                                                                                                             "cos"#) -}
c2f4028884218a5d2fc6f475de079dcf
  def11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCString#
                                                                                                             "sin"#) -}
1d1b138319ce8c7b31ec15f343ba8530
  def12 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCString#
                                                                                                             "{}"#) -}
0bd7cfb99acc55abf16487365e225a24
  def13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def18
                   AlgParser.def14) -}
9349d4223ae2ed1ceb749d4cb5d9cb20
  def14 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def17
                   AlgParser.def15) -}
651dd947eba71a06d40e320ec1e16f57
  def15 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def16
                   (GHC.Types.[] @ GHC.Base.String)) -}
81cf4f6d4fe6bb9b137e451046044c84
  def16 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                                                             "\\226\\132\\154"#) -}
aa77325c4cba8f1d87004bf4419f4a26
  def17 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                                                             "\\226\\132\\157"#) -}
00de5c09d01a7942e564fc915a44690f
  def18 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                                                             "\\226\\132\\149"#) -}
406598b8d99079cdb5063c2a0087c552
  def19 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf} True True} Text.Parsec.Char.satisfy
                                                                                                                                                              @ GHC.Base.String
                                                                                                                                                              @ Data.Functor.Identity.Identity
                                                                                                                                                              @ u
                                                                                                                                                              (AlgParser.$s$fStream[]mtok
                                                                                                                                                                 @ GHC.Types.Char)
                                                                                                                                                              AlgParser.def20) -}
00348fd5ad8694c40691b85e826952bb
  def2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def11
                   AlgParser.def3) -}
38006129028d1dd8a68cdc75d8e5f951
  def20 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf.\} True True} GHC.List.elem
                                                                                                                   @ GHC.Types.Char
                                                                                                                   GHC.Classes.$fEqChar
                                                                                                                   c
                                                                                                                   AlgParser.def21) -}
97d265eef310fb4a2a386a01b6d55c67
  def21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                "+-*/=<>&|^;\\226\\136\\170\\226\\136\\169\\194\\186"#) -}
47ef109e572e0e83c3eb438e132ad122
  def22 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf} True True} Text.Parsec.Char.satisfy
                                                                                                                                                              @ GHC.Base.String
                                                                                                                                                              @ Data.Functor.Identity.Identity
                                                                                                                                                              @ u
                                                                                                                                                              (AlgParser.$s$fStream[]mtok
                                                                                                                                                                 @ GHC.Types.Char)
                                                                                                                                                              AlgParser.def23) -}
0fedb6006750ce22c73df7612d6bc213
  def23 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf.\} True True} GHC.List.elem
                                                                                                                   @ GHC.Types.Char
                                                                                                                   GHC.Classes.$fEqChar
                                                                                                                   c
                                                                                                                   AlgParser.def24) -}
7c2ef9d2a1c52096d9d1fe68485a38de
  def24 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                "+-*/=<>&|^;\\226\\136\\170\\226\\136\\169\\194\\186\n"#) -}
8724cf94948735a769132237d6683507
  def25 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.alphaNum} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<?>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.label} True True} Text.Parsec.Prim.<?>2
                                                                                                                                                                                                                                                                                                                                                           @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                           @ u
                                                                                                                                                                                                                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                           @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                           (AlgParser.def27
                                                                                                                                                                                                                                                                                                                                                              @ u)
                                                                                                                                                                                                                                                                                                                                                           AlgParser.def26) -}
ed7294159361dbede650edce7d8555c1
  def26 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.alphaNum1
                   (GHC.Types.[] @ GHC.Base.String)) -}
b361745952c38aa1cc303e3c2ea90f49
  def27 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.alphaNum} False True} Text.Parsec.Char.satisfy
                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                  @ Data.Functor.Identity.Identity
                                                                                                                                                                  @ u
                                                                                                                                                                  (AlgParser.$s$fStream[]mtok
                                                                                                                                                                     @ GHC.Types.Char)
                                                                                                                                                                  GHC.Unicode.isAlphaNum) -}
4303fadb4f230103c88de0104da5f6de
  def28 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.letter} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<?>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.label} True True} Text.Parsec.Prim.<?>2
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         @ u
                                                                                                                                                                                                                                                                                                                                                         @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                         (AlgParser.def30
                                                                                                                                                                                                                                                                                                                                                            @ u)
                                                                                                                                                                                                                                                                                                                                                         AlgParser.def29) -}
f1192b0ed61adde18fe5c63655124fd6
  def29 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.letter1
                   (GHC.Types.[] @ GHC.Base.String)) -}
831c90088d33c05106a4475db3aec545
  def3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def10
                   AlgParser.def4) -}
27d06c81622a4dbb06d57a4ed5b87de9
  def30 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.def} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.letter} False True} Text.Parsec.Char.satisfy
                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                @ u
                                                                                                                                                                (AlgParser.$s$fStream[]mtok
                                                                                                                                                                   @ GHC.Types.Char)
                                                                                                                                                                GHC.Unicode.isAlpha) -}
b941b354942c0a899a47167bc9e3aa16
  def4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def9
                   AlgParser.def5) -}
feac24c81c6241b39e7649ac23cd29bc
  def5 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def8
                   AlgParser.def6) -}
a13207a83644c3998e9cca6fd3db49d2
  def6 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   AlgParser.def7
                   (GHC.Types.[] @ GHC.Base.String)) -}
be92037c5110462dd264529d93913979
  def7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCStringUtf8#
                                                                                                             "\\194\\186"#) -}
5bb0bbdcea306373aa12309fd9f75293
  def8 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCString#
                                                                                                             "False"#) -}
d2d8a2f44ecdd89b6ba5fe9719e12c2b
  def9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.def} False True} {__scc {main@main:AlgParser.def} False True} GHC.CString.unpackCString#
                                                                                                             "True"#) -}
c9ee21a2fc8f9ae7425825af405165e8
  expand :: GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 {__scc {main@main:AlgParser.expand} True True} case {__scc {main@main:AlgParser.expand.sc} True True} AlgParser.expand1
                                                                                                                         @ [GHC.Types.Char]
                                                                                                                         c
                                                                                                                         AlgParser.specialCharsMap of wild {
                                                                  GHC.Base.Nothing
                                                                  -> GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       c
                                                                       (GHC.Types.[]
                                                                          @ GHC.Types.Char)
                                                                  GHC.Base.Just ipv -> ipv }) -}
fb467139bfd9c646cff30156ebb7d38a
  expand1 ::
    GHC.Types.Char
    -> Data.Map.Base.Map GHC.Types.Char a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Char)
                   (w1 :: Data.Map.Base.Map GHC.Types.Char a) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 AlgParser.$wpoly_go1 @ a ww1 w1 }) -}
e2f2fb5c24a939b2063d970629192735
  format :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
51f5039f12eea2b6bc5db5bcd276ddee
  getNom ::
    Data.Either.Either GHC.Integer.Type.Integer GHC.Types.Double
    -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Either.Either
                           GHC.Integer.Type.Integer GHC.Types.Double) ->
                 {__scc {main@main:AlgParser.getNom} True False} case w of wild {
                                                                   Data.Either.Left i
                                                                   -> AlgData.Nom
                                                                        ({__scc {main@main:AlgParser.getNom} False True} Lib.Noms.$fFloatingNr_$cfromInteger
                                                                                                                           i)
                                                                   Data.Either.Right n
                                                                   -> AlgData.Nom
                                                                        (Lib.Noms.NrReal
                                                                           ({__scc {main@main:AlgParser.getNom} False True} case Data.Number.CReal.$w$cfromRational
                                                                                                                                   (case n of ww { GHC.Types.D# ww1 ->
                                                                                                                                    case GHC.Float.$w$ctoRational
                                                                                                                                           ww1 of ww2 { (#,#) ww3 ww4 ->
                                                                                                                                    GHC.Real.:%
                                                                                                                                      @ GHC.Integer.Type.Integer
                                                                                                                                      ww3
                                                                                                                                      ww4 } }) of ww { Unit# ww1 ->
                                                                                                                            Data.Number.CReal.CR
                                                                                                                              ww1 })) }) -}
1ca4106c7e90d55ca8d374c412f6131f
  getParams :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgParser.getParams} True True} case ds of wild {
                                                                     DEFAULT
                                                                     -> GHC.Types.:
                                                                          @ AlgData.Algo
                                                                          wild
                                                                          (GHC.Types.[]
                                                                             @ AlgData.Algo)
                                                                     AlgData.Op ds1 m
                                                                     -> case ds1 of wild1 {
                                                                          DEFAULT
                                                                          -> GHC.Types.:
                                                                               @ AlgData.Algo
                                                                               wild
                                                                               (GHC.Types.[]
                                                                                  @ AlgData.Algo)
                                                                          AlgData.Params
                                                                          -> m } }) -}
4dd5f999b9c489f0de50cbd8066fb4c0
  int :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.int} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                         @ GHC.Base.String
                                                                                                                                                                                                                                                         @ ()
                                                                                                                                                                                                                                                         @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                         @ GHC.Base.String
                                                                                                                                                                                                                                                         AlgParser.int9
                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                   <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                   <()>_R
                                                                                                                                                                                                                                                                   <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                   <GHC.Base.String>_R))
                                                                                                                                                                                                                                                         AlgParser.int1) -}
305631a9108791226905b57f2ced1253
  int1 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.int} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                          @ GHC.Base.String
                                                                                                                                                                                                                                                          @ ()
                                                                                                                                                                                                                                                          @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                          @ GHC.Base.String
                                                                                                                                                                                                                                                          AlgParser.int5
                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                          (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                    <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                    <()>_R
                                                                                                                                                                                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                    <[GHC.Types.Char]>_R))
                                                                                                                                                                                                                                                          AlgParser.int2
                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                          (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                    <GHC.Base.String>_R
                                                                                                                                                                                                                                                                    <()>_R
                                                                                                                                                                                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                    <[GHC.Types.Char]>_R))) -}
d312ef28b6dc6084b6af5451be9495b8
  int10 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.plus} False True} Text.Parsec.Char.char
                                                                 @ GHC.Base.String
                                                                 @ Data.Functor.Identity.Identity
                                                                 @ ()
                                                                 (AlgParser.$s$fStream[]mtok
                                                                    @ GHC.Types.Char)
                                                                 AlgParser.int11) -}
ce4ad4c0f9293b37b4f633cefdf822a0
  int11 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '+'#) -}
8c57cd2ecc3df1a882251aa41c38c9ea
  int2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.number} True True} Text.Parsec.Combinator.$wmany1
                                                                  @ GHC.Base.String
                                                                  @ Data.Functor.Identity.Identity
                                                                  @ GHC.Types.Char
                                                                  @ ()
                                                                  @ GHC.Types.Char
                                                                  AlgParser.int3
                                                                    `cast`
                                                                  (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                            <GHC.Base.String>_R
                                                                            <()>_R
                                                                            <Data.Functor.Identity.Identity>_R
                                                                            <GHC.Types.Char>_R))) -}
cbece869a54c6554e1e3def8d76b8fac
  int3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.number} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.digit} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<?>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.label} True True} Text.Parsec.Prim.<?>2
                                                                                                                                                                                                                                                                                                                                                           @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                           @ ()
                                                                                                                                                                                                                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                           @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                           AlgParser.int_p
                                                                                                                                                                                                                                                                                                                                                           AlgParser.int4) -}
a858f8d655c865e660fd2bba32414173
  int4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit1
                   (GHC.Types.[] @ GHC.Base.String)) -}
499a10cb542e61dffae336c43a683f13
  int5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.minus} True True} {__scc {main@main:AlgParser.<:>} True True} Text.Parsec.Prim.$fAlternativeParsecT6
                                                                                                             @ [GHC.Types.Char]
                                                                                                             @ ()
                                                                                                             @ Data.Functor.Identity.Identity
                                                                                                             @ [GHC.Types.Char]
                                                                                                             @ [GHC.Types.Char]
                                                                                                             ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True False} AlgParser.int6)
                                                                                                               `cast`
                                                                                                             (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                       <[GHC.Types.Char]>_R
                                                                                                                       <()>_R
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <[GHC.Types.Char]
                                                                                                                        -> [GHC.Types.Char]>_R))
                                                                                                             AlgParser.int2
                                                                                                               `cast`
                                                                                                             (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                       <GHC.Base.String>_R
                                                                                                                       <()>_R
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <[GHC.Types.Char]>_R))) -}
3457af9dcd7378857222300bab982530
  int6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.minus} False True} {__scc {main@main:AlgParser.<:>} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} False True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                                                                             @ GHC.Types.Char
                                                                                                                                                                                                             @ ([GHC.Types.Char]
                                                                                                                                                                                                                -> [GHC.Types.Char])
                                                                                                                                                                                                             @ [GHC.Types.Char]
                                                                                                                                                                                                             @ ()
                                                                                                                                                                                                             @ Data.Functor.Identity.Identity
                                                                                                                                                                                                             (GHC.Types.:
                                                                                                                                                                                                                @ GHC.Types.Char)
                                                                                                                                                                                                             AlgParser.int7) -}
bf3472e95cb76dd0fdc1f526eaa4d789
  int7 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.minus} False True} Text.Parsec.Char.char
                                                                  @ GHC.Base.String
                                                                  @ Data.Functor.Identity.Identity
                                                                  @ ()
                                                                  (AlgParser.$s$fStream[]mtok
                                                                     @ GHC.Types.Char)
                                                                  AlgParser.int8) -}
5d29e464f127619d53b99a863eb797c5
  int8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-'#) -}
0bf707a3f38cb087a116508ae0c709b5
  int9 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.plus} True True} Text.Parsec.Prim.$fApplicativeParsecT2
                                                                @ [GHC.Types.Char]
                                                                @ ()
                                                                @ Data.Functor.Identity.Identity
                                                                @ GHC.Types.Char
                                                                @ GHC.Base.String
                                                                AlgParser.int10
                                                                AlgParser.int2
                                                                  `cast`
                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                          <GHC.Base.String>_R
                                                                          <()>_R
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <[GHC.Types.Char]>_R))) -}
ff58af19922b6ee9ae4958feecbbcbef
  int_p ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.number} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.digit} False True} Text.Parsec.Char.satisfy
                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                  @ Data.Functor.Identity.Identity
                                                                                                                                                                  @ ()
                                                                                                                                                                  (AlgParser.$s$fStream[]mtok
                                                                                                                                                                     @ GHC.Types.Char)
                                                                                                                                                                  GHC.Unicode.isDigit) -}
d657277acf707ffb4017c29646eeadeb
  lexer :: Text.Parsec.Token.TokenParser ()
  {- Unfolding: ({__scc {main@main:AlgParser.lexer} True True} Text.Parsec.Token.makeTokenParser
                                                                 @ GHC.Base.String
                                                                 @ Data.Functor.Identity.Identity
                                                                 @ ()
                                                                 (AlgParser.$s$fStream[]mtok
                                                                    @ GHC.Types.Char)
                                                                 (AlgParser.def @ ())) -}
c3570a44d7e61d23efee882d2803eee9
  mapNth :: GHC.Real.Integral a => (t -> [t]) -> a -> [t] -> [[t]]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,A,A,A,C(C1(U)),A,A,A)><L,C(U)><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ t
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: t -> [t])
                   (eta1 :: a)
                   (eta2 :: [t]) ->
                 let {
                   $dEnum :: GHC.Enum.Enum a = GHC.Real.$p2Integral @ a $dIntegral
                 } in
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 let {
                   lvl328 :: a
                   = {__scc {main@main:AlgParser.mapNth} False True} {__scc {main@main:AlgParser.mapNth.\} False True} GHC.Num.fromInteger
                                                                                                                         @ a
                                                                                                                         $dNum
                                                                                                                         AlgParser.mapNth3
                 } in
                 let {
                   $dEq :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a $dEq
                 } in
                 {__scc {main@main:AlgParser.mapNth} True True} case eta2 of wild {
                                                                  [] -> GHC.Types.[] @ [t]
                                                                  : o oo
                                                                  -> letrec {
                                                                       go8 :: [t] -> [a] -> [[t]]
                                                                         {- Arity: 2,
                                                                            Strictness: <S,1*U><L,1*U> -}
                                                                       = \ (ds :: [t])
                                                                           (_ys :: [a]) ->
                                                                         case ds of wild1 {
                                                                           [] -> GHC.Types.[] @ [t]
                                                                           : ipv ipv1
                                                                           -> case _ys of wild2 {
                                                                                []
                                                                                -> GHC.Types.[]
                                                                                     @ [t]
                                                                                : ipv2 ipv3
                                                                                -> GHC.Types.:
                                                                                     @ [t]
                                                                                     ({__scc {main@main:AlgParser.mapNth.\} True True} case GHC.Classes.==
                                                                                                                                              @ a
                                                                                                                                              $dEq1
                                                                                                                                              (GHC.Real.mod
                                                                                                                                                 @ a
                                                                                                                                                 $dIntegral
                                                                                                                                                 ipv2
                                                                                                                                                 eta1)
                                                                                                                                              lvl328 of wild3 {
                                                                                                                                         GHC.Types.False
                                                                                                                                         -> GHC.Types.:
                                                                                                                                              @ t
                                                                                                                                              ipv
                                                                                                                                              (GHC.Types.[]
                                                                                                                                                 @ t)
                                                                                                                                         GHC.Types.True
                                                                                                                                         -> eta
                                                                                                                                              ipv })
                                                                                     (go8
                                                                                        ipv1
                                                                                        ipv3) } }
                                                                     } in
                                                                     go8
                                                                       wild
                                                                       (GHC.Enum.enumFrom
                                                                          @ a
                                                                          $dEnum
                                                                          (GHC.Num.fromInteger
                                                                             @ a
                                                                             $dNum
                                                                             AlgParser.mapNth2)) }) -}
460aa8bb114fc293f0421ab0b689a9dc
  mapNth1 :: [GHC.Integer.Type.Integer]
  {- Unfolding: ({__scc {main@main:AlgParser.mapNth} False True} case GHC.Enum.$wenumDeltaInteger
                                                                        AlgParser.mapNth2
                                                                        AlgParser.mapNth2 of ww { (#,#) ww1 ww2 ->
                                                                 GHC.Types.:
                                                                   @ GHC.Integer.Type.Integer
                                                                   ww1
                                                                   ww2 }) -}
67150b965be5249c2cf866a1acd761c2
  mapNth2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7b53cd1ebf03fbae25cf4ddd384cb5c7
  mapNth3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
29317459ec7e03d9f937178e52783ae8
  mapNth_$smapNth ::
    (t -> [t]) -> GHC.Integer.Type.Integer -> [t] -> [[t]]
  {- Arity: 3, Strictness: <L,C(U)><L,U><S,1*U>,
     Unfolding: (\ @ t
                   (eta :: t -> [t])
                   (eta1 :: GHC.Integer.Type.Integer)
                   (eta2 :: [t]) ->
                 {__scc {main@main:AlgParser.mapNth} True True} case eta2 of wild {
                                                                  [] -> GHC.Types.[] @ [t]
                                                                  : o oo
                                                                  -> letrec {
                                                                       go8 :: [t]
                                                                              -> [GHC.Integer.Type.Integer]
                                                                              -> [[t]]
                                                                         {- Arity: 2,
                                                                            Strictness: <S,1*U><L,1*U> -}
                                                                       = \ (ds :: [t])
                                                                           (_ys :: [GHC.Integer.Type.Integer]) ->
                                                                         case ds of wild1 {
                                                                           [] -> GHC.Types.[] @ [t]
                                                                           : ipv ipv1
                                                                           -> case _ys of wild2 {
                                                                                []
                                                                                -> GHC.Types.[]
                                                                                     @ [t]
                                                                                : ipv2 ipv3
                                                                                -> GHC.Types.:
                                                                                     @ [t]
                                                                                     ({__scc {main@main:AlgParser.mapNth.\} True True} case GHC.Integer.Type.eqInteger#
                                                                                                                                              eta1
                                                                                                                                              AlgParser.mapNth3 of wild3 { DEFAULT ->
                                                                                                                                       case GHC.Prim.tagToEnum#
                                                                                                                                              @ GHC.Types.Bool
                                                                                                                                              wild3 of wild4 {
                                                                                                                                         GHC.Types.False
                                                                                                                                         -> case GHC.Integer.Type.eqInteger#
                                                                                                                                                   (GHC.Integer.Type.modInteger
                                                                                                                                                      ipv2
                                                                                                                                                      eta1)
                                                                                                                                                   AlgParser.mapNth3 of wild5 { DEFAULT ->
                                                                                                                                            case GHC.Prim.tagToEnum#
                                                                                                                                                   @ GHC.Types.Bool
                                                                                                                                                   wild5 of wild6 {
                                                                                                                                              GHC.Types.False
                                                                                                                                              -> GHC.Types.:
                                                                                                                                                   @ t
                                                                                                                                                   ipv
                                                                                                                                                   (GHC.Types.[]
                                                                                                                                                      @ t)
                                                                                                                                              GHC.Types.True
                                                                                                                                              -> eta
                                                                                                                                                   ipv } }
                                                                                                                                         GHC.Types.True
                                                                                                                                         -> case GHC.Real.divZeroError
                                                                                                                                            ret_ty [t]
                                                                                                                                            of {} } })
                                                                                     (go8
                                                                                        ipv1
                                                                                        ipv3) } }
                                                                     } in
                                                                     go8
                                                                       wild
                                                                       AlgParser.mapNth1 }) -}
a0a4284e57e8213b56e8973e7333180e
  minus :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.int5
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
21e68c0b1e3944db12cfefc1780c9f59
  nr :: Text.Parsec.String.Parser Data.Number.CReal.CReal
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.nr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Data.Number.CReal.CReal>_R)) -}
86b394e2d50e9385d6c2a6b83817b414
  nr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Data.Number.CReal.CReal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Data.Number.CReal.CReal
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                           @ GHC.Base.String
                                                                                                                                                           @ Data.Number.CReal.CReal
                                                                                                                                                           @ [GHC.Types.Char]
                                                                                                                                                           @ ()
                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                           AlgParser.nr_f
                                                                                                                                                           AlgParser.nr2
                                                                                                                                                             `cast`
                                                                                                                                                           (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                     <[GHC.Types.Char]>_R
                                                                                                                                                                     <()>_R
                                                                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                                                                     <[GHC.Types.Char]>_R))) -}
c73b7ee0120ac16680ab7a32aba6ca72
  nr10 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.<++>} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} False True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                                                                           @ [GHC.Types.Char]
                                                                                                                                                                                                           @ ([GHC.Types.Char]
                                                                                                                                                                                                              -> [GHC.Types.Char])
                                                                                                                                                                                                           @ [GHC.Types.Char]
                                                                                                                                                                                                           @ ()
                                                                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                                                                           (GHC.Base.++
                                                                                                                                                                                                              @ GHC.Types.Char)
                                                                                                                                                                                                           AlgParser.nr11
                                                                                                                                                                                                             `cast`
                                                                                                                                                                                                           (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                     <[GHC.Types.Char]>_R
                                                                                                                                                                                                                     <()>_R
                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                     <[GHC.Types.Char]>_R))) -}
85c31ee62963a462788d02773e2fb47f
  nr11 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.<++>} True True} Text.Parsec.Prim.$fAlternativeParsecT6
                                                                                                            @ [GHC.Types.Char]
                                                                                                            @ ()
                                                                                                            @ Data.Functor.Identity.Identity
                                                                                                            @ [GHC.Types.Char]
                                                                                                            @ [GHC.Types.Char]
                                                                                                            ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True False} AlgParser.nr18)
                                                                                                              `cast`
                                                                                                            (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                      <[GHC.Types.Char]>_R
                                                                                                                      <()>_R
                                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                                      <[GHC.Types.Char]
                                                                                                                       -> [GHC.Types.Char]>_R))
                                                                                                            AlgParser.nr12) -}
9084ff70499d27da83358024701bb5d6
  nr12 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} True False} AlgParser.nr13) -}
362ab5e1a7832d77d9e636067c6e92f3
  nr13 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.option} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  @ ()
                                                                                                                                                                                                                                                                                                                                                                                                                  @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                                                                  @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                  AlgParser.nr14
                                                                                                                                                                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                  (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                            <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <[GHC.Types.Char]>_R))
                                                                                                                                                                                                                                                                                                                                                                                                                  AlgParser.nr_p1
                                                                                                                                                                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                  (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                            <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                            <[GHC.Types.Char]>_R))) -}
f6572e52cda6c56746625c19b65f6ea9
  nr14 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} False True} {__scc {main@main:AlgParser.<:>} True True} Text.Parsec.Prim.$fAlternativeParsecT6
                                                                                                                                                               @ [GHC.Types.Char]
                                                                                                                                                               @ ()
                                                                                                                                                               @ Data.Functor.Identity.Identity
                                                                                                                                                               @ [GHC.Types.Char]
                                                                                                                                                               @ [GHC.Types.Char]
                                                                                                                                                               ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True False} AlgParser.nr15)
                                                                                                                                                                 `cast`
                                                                                                                                                               (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                         <[GHC.Types.Char]>_R
                                                                                                                                                                         <()>_R
                                                                                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <[GHC.Types.Char]
                                                                                                                                                                          -> [GHC.Types.Char]>_R))
                                                                                                                                                               AlgParser.int2
                                                                                                                                                                 `cast`
                                                                                                                                                               (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                         <GHC.Base.String>_R
                                                                                                                                                                         <()>_R
                                                                                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <[GHC.Types.Char]>_R))) -}
a457e783a8b7c481fbb40194f09edfb0
  nr15 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} False True} {__scc {main@main:AlgParser.<:>} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} False True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                                                                                                                              @ GHC.Types.Char
                                                                                                                                                                                                                                                              @ ([GHC.Types.Char]
                                                                                                                                                                                                                                                                 -> [GHC.Types.Char])
                                                                                                                                                                                                                                                              @ [GHC.Types.Char]
                                                                                                                                                                                                                                                              @ ()
                                                                                                                                                                                                                                                              @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                              (GHC.Types.:
                                                                                                                                                                                                                                                                 @ GHC.Types.Char)
                                                                                                                                                                                                                                                              AlgParser.nr16) -}
90c111696425804bda087219ca2e90f8
  nr16 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} False True} Text.Parsec.Char.char
                                                                                                                   @ GHC.Base.String
                                                                                                                   @ Data.Functor.Identity.Identity
                                                                                                                   @ ()
                                                                                                                   (AlgParser.$s$fStream[]mtok
                                                                                                                      @ GHC.Types.Char)
                                                                                                                   AlgParser.nr17) -}
7974661322bc6fd626c070939daf8cfe
  nr17 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '.'#) -}
54cf281a70fb6984e494b5abd2f392ba
  nr18 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.<++>} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} False True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                                                                           @ [GHC.Types.Char]
                                                                                                                                                                                                           @ ([GHC.Types.Char]
                                                                                                                                                                                                              -> [GHC.Types.Char])
                                                                                                                                                                                                           @ [GHC.Types.Char]
                                                                                                                                                                                                           @ ()
                                                                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                                                                           (GHC.Base.++
                                                                                                                                                                                                              @ GHC.Types.Char)
                                                                                                                                                                                                           AlgParser.int) -}
a30d406e7e3a9541daaf95e154e42eec
  nr19 :: GHC.Base.String -> Data.Number.CReal.CReal
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ Data.Number.CReal.CReal
                        (Text.ParserCombinators.ReadP.run
                           @ Data.Number.CReal.CReal
                           AlgParser.nr22
                           s) of wild {
                   [] -> AlgParser.nr21
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> AlgParser.nr20 } }) -}
c1a2d2e542e9bb2d00f598d0a85d627f
  nr2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.<++>} True True} Text.Parsec.Prim.$fAlternativeParsecT6
                                                                                                            @ [GHC.Types.Char]
                                                                                                            @ ()
                                                                                                            @ Data.Functor.Identity.Identity
                                                                                                            @ [GHC.Types.Char]
                                                                                                            @ [GHC.Types.Char]
                                                                                                            ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True False} AlgParser.nr10)
                                                                                                              `cast`
                                                                                                            (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                      <[GHC.Types.Char]>_R
                                                                                                                      <()>_R
                                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                                      <[GHC.Types.Char]
                                                                                                                       -> [GHC.Types.Char]>_R))
                                                                                                            AlgParser.nr3) -}
db867566765f03382b9aaff6a3b33ed2
  nr20 :: Data.Number.CReal.CReal
  {- Strictness: x -}
3f29f270d165eea8ebf10604a0028959
  nr21 :: Data.Number.CReal.CReal
  {- Strictness: x -}
8aa3baf4bcee5551cddd8849a7b14d42
  nr22 :: Text.ParserCombinators.ReadP.P Data.Number.CReal.CReal
  {- Unfolding: (Text.ParserCombinators.ReadP.Look
                   @ Data.Number.CReal.CReal
                   AlgParser.nr23) -}
a883d3ce455437e5ff1dc636ad8f0b72
  nr23 ::
    GHC.Base.String
    -> Text.ParserCombinators.ReadP.P Data.Number.CReal.CReal
  {- Arity: 1,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case AlgParser.nr_go (AlgParser.nr_w s) of wild {
                   [] -> Text.ParserCombinators.ReadP.Fail @ Data.Number.CReal.CReal
                   : ipv ipv1
                   -> Text.ParserCombinators.ReadP.Final
                        @ Data.Number.CReal.CReal
                        wild }) -}
a939edb9de0f6d7d982a265d1ca9de48
  nr3 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} True False} AlgParser.nr4) -}
e66156b14401a4f4338af7ef52843b5a
  nr4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.option} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                                                                                                                                                                   @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   @ ()
                                                                                                                                                                                                                                                                                                                                                                                                                   @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                                                                   @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                   AlgParser.nr5
                                                                                                                                                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                             <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <[GHC.Types.Char]>_R))
                                                                                                                                                                                                                                                                                                                                                                                                                   AlgParser.nr_p2
                                                                                                                                                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                             <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                             <[GHC.Types.Char]>_R))) -}
f06d89df09f0189a07b7a60bb3e7355f
  nr5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} {__scc {main@main:AlgParser.<:>} True True} Text.Parsec.Prim.$fAlternativeParsecT6
                                                                                                                                                                @ [GHC.Types.Char]
                                                                                                                                                                @ ()
                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                @ [GHC.Types.Char]
                                                                                                                                                                @ [GHC.Types.Char]
                                                                                                                                                                ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} True False} AlgParser.nr6)
                                                                                                                                                                  `cast`
                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                          <[GHC.Types.Char]>_R
                                                                                                                                                                          <()>_R
                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                          <[GHC.Types.Char]
                                                                                                                                                                           -> [GHC.Types.Char]>_R))
                                                                                                                                                                AlgParser.int) -}
655e00f8f33cf22b08d195be27875748
  nr6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char] -> [GHC.Types.Char])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} {__scc {main@main:AlgParser.<:>} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.fmap} False True} Text.Parsec.Prim.$fAlternativeParsecT5
                                                                                                                                                                                                                                                               @ GHC.Types.Char
                                                                                                                                                                                                                                                               @ ([GHC.Types.Char]
                                                                                                                                                                                                                                                                  -> [GHC.Types.Char])
                                                                                                                                                                                                                                                               @ [GHC.Types.Char]
                                                                                                                                                                                                                                                               @ ()
                                                                                                                                                                                                                                                               @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                               (GHC.Types.:
                                                                                                                                                                                                                                                                  @ GHC.Types.Char)
                                                                                                                                                                                                                                                               AlgParser.nr7) -}
59cc8c6bed8ad735900fdda4932061a9
  nr7 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf} True True} Text.Parsec.Char.satisfy
                                                                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                                                                  @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                  @ ()
                                                                                                                                                                                                                  (AlgParser.$s$fStream[]mtok
                                                                                                                                                                                                                     @ GHC.Types.Char)
                                                                                                                                                                                                                  AlgParser.nr8) -}
10db4a1da46a48b7f7688feab8f6f43c
  nr8 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.oneOf.\} True True} GHC.List.elem
                                                                                                                   @ GHC.Types.Char
                                                                                                                   GHC.Classes.$fEqChar
                                                                                                                   c
                                                                                                                   AlgParser.nr9) -}
0ab858ebee4e50b505615ee7841708be
  nr9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} GHC.CString.unpackCString#
                                                                                                                    "eE"#) -}
07ec0f2d465b14927451959a69d22e9c
  nr_f :: GHC.Base.String -> Data.Number.CReal.CReal
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.rd} True True} AlgParser.nr19) -}
1afc0eda22daadb4a42ead70624a650e
  nr_go ::
    [(Data.Number.CReal.CReal, GHC.Base.String)]
    -> [(Data.Number.CReal.CReal, GHC.Base.String)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2af30663d80bf77de42dc9295f73be1e
  nr_p1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.decimal} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.option} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                                                                                                                                                                        @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                        @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                        @ ()
                                                                                                                                                                                                                                                                                                                        @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                                                                                                                                                                                           @ GHC.Types.Char)) -}
3e9640f89605cd9d5d8268cfe8f44c77
  nr_p2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.nr} False True} {__scc {main@main:AlgParser.nr.exponent} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.option} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                                                                                                                                                                         @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                         @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                         @ ()
                                                                                                                                                                                                                                                                                                                         @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                         (GHC.Types.[]
                                                                                                                                                                                                                                                                                                                            @ GHC.Types.Char)) -}
18ddacef7830f3d593a3a2673d60b022
  nr_w :: Text.ParserCombinators.ReadP.ReadS Data.Number.CReal.CReal
  {- Unfolding: ({__scc {numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj:Data.Number.CReal.readsPrec} True True} Data.Number.CReal.$fReadCReal4) -}
790a6f8bc5e22c84738f0a9246d12798
  number :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.int2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
5fdd59de0220e6fe9aa23672a79b41f9
  parseAlgoExpr :: GHC.Base.String -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (i :: GHC.Base.String) ->
                 {__scc {main@main:AlgParser.parseAlgoExpr} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.parse} True False} case ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.parse} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.runP} True True} Text.Parsec.Prim.runPT
                                                                                                                                                                                                                                                                                                                                                                          @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                          @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                          @ ()
                                                                                                                                                                                                                                                                                                                                                                          @ AlgData.Algo
                                                                                                                                                                                                                                                                                                                                                                          (AlgParser.$s$fStream[]mtok
                                                                                                                                                                                                                                                                                                                                                                             @ GHC.Types.Char)
                                                                                                                                                                                                                                                                                                                                                                          AlgParser.parseInput
                                                                                                                                                                                                                                                                                                                                                                          GHC.Tuple.()
                                                                                                                                                                                                                                                                                                                                                                          AlgParser.parseAlgoExpr1
                                                                                                                                                                                                                                                                                                                                                                          i)
                                                                                                                                                                             `cast`
                                                                                                                                                                           (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                <Data.Either.Either
                                                                                                                                                                                   Text.Parsec.Error.ParseError
                                                                                                                                                                                   AlgData.Algo>_R) of wild {
                                                                                                                                                                        Data.Either.Left e
                                                                                                                                                                        -> GHC.Base.Nothing
                                                                                                                                                                             @ AlgData.Algo
                                                                                                                                                                        Data.Either.Right e
                                                                                                                                                                        -> GHC.Base.Just
                                                                                                                                                                             @ AlgData.Algo
                                                                                                                                                                             e }) -}
b968d757d6ba9265169dc018493dfe22
  parseAlgoExpr1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseAlgoExpr} False True} GHC.CString.unpackCString#
                                                                          "AlgParser"#) -}
19d2b1c6210593ff1ed44aedcb7bf5e4
  parseExpression :: Text.Parsec.String.Parser AlgData.Algo
e207ac432e68a7a472cf20558d81ce48
  parseFloor ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> t
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   (w :: Text.Parsec.Token.GenTokenParser
                           GHC.Base.String () Data.Functor.Identity.Identity)
                   (w1 :: t) ->
                 AlgParser.$wparseFloor @ t w)
                  `cast`
                (forall (t :: <*>_N).
                 <Text.Parsec.Token.GenTokenParser
                    GHC.Base.String () Data.Functor.Identity.Identity>_R
                 ->_R <t>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <[GHC.Types.Char]>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <AlgData.Algo>_R)) -}
9580a95d50c124f0ed52232b9d275d37
  parseFunc ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> t
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Arity: 2,
     Strictness: <L,U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   (w :: Text.Parsec.Token.GenTokenParser
                           GHC.Base.String () Data.Functor.Identity.Identity)
                   (w1 :: t) ->
                 AlgParser.$wparseFunc @ t w)
                  `cast`
                (forall (t :: <*>_N).
                 <Text.Parsec.Token.GenTokenParser
                    GHC.Base.String () Data.Functor.Identity.Identity>_R
                 ->_R <t>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <[GHC.Types.Char]>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <AlgData.Algo>_R)) -}
75e1b962713febae7b2ffb3fc0e2b47e
  parseIdentifier :: Text.Parsec.String.Parser AlgData.Algo
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.parseIdentifier1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <AlgData.Algo>_R)) -}
6e6ee903a41560160ec9138bf07967ad
  parseIdentifier1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
2a4721cffcb7821874ac07ba1b77ee9b
  parseInput :: Text.Parsec.String.Parser AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseInput} True True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseInput5
                                                                      AlgParser.parseInput1
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
70e5bca7e591364f13feded6e5378c46
  parseInput1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ b1 ->
                 {__scc {main@main:AlgParser.parseInput} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                             [GHC.Types.Char]
                                                                                                                                                                             ())
                                                                                                                                                                    (cok :: AlgData.Algo
                                                                                                                                                                            -> Text.Parsec.Prim.State
                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                 ()
                                                                                                                                                                            -> Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b1)
                                                                                                                                                                    (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1)
                                                                                                                                                                    (eok :: AlgData.Algo
                                                                                                                                                                            -> Text.Parsec.Prim.State
                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                 ()
                                                                                                                                                                            -> Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b1)
                                                                                                                                                                    (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1) ->
                                                                                                                                                                  {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseExpression
                                                                                                                                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                                                                                                                                 (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                      <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                                                                      <()>_R
                                                                                                                                                                                                                                                                                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                      <AlgData.Algo>_R)
                                                                                                                                                                                                                                                                                                                                                                   @ b1
                                                                                                                                                                                                                                                                                                                                                                   s1
                                                                                                                                                                                                                                                                                                                                                                   (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                      (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                               [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                               ())
                                                                                                                                                                                                                                                                                                                                                                      (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseInput2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err')))
                                                                                                                                                                                                                                                                                                                                                                   cerr
                                                                                                                                                                                                                                                                                                                                                                   (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                      (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                               [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                               ())
                                                                                                                                                                                                                                                                                                                                                                      (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseInput2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err')))
                                                                                                                                                                                                                                                                                                                                                                   eerr) -}
17b2dad3f981f73cd8aa79a579b745bb
  parseInput2 ::
    AlgData.Algo
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ex :: AlgData.Algo) @ b1 ->
                 let {
                   k :: forall b.
                        Text.Parsec.Prim.State [GHC.Types.Char] ()
                        -> (AlgData.Algo
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                        -> (Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                        -> (AlgData.Algo
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                        -> (Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                        -> Data.Functor.Identity.Identity b
                   = {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                      @ AlgData.Algo
                                                                                                                      @ [GHC.Types.Char]
                                                                                                                      @ ()
                                                                                                                      @ Data.Functor.Identity.Identity
                                                                                                                      ex
                 } in
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                         [GHC.Types.Char]
                                                                                                                         ())
                                                                                                                (cok :: AlgData.Algo
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (cerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1)
                                                                                                                (eok :: AlgData.Algo
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (eerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1) ->
                                                                                                              {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseInput3
                                                                                                                                                                                                                                                                                                               @ b1
                                                                                                                                                                                                                                                                                                               s1
                                                                                                                                                                                                                                                                                                               (\ (x :: ())
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} k @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    cok
                                                                                                                                                                                                                                                                                                                                                                                                                    cerr
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     cok
                                                                                                                                                                                                                                                                                                                                                                                                                       x1
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     cerr
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               cerr
                                                                                                                                                                                                                                                                                                               (\ (x :: ())
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} k @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    cok
                                                                                                                                                                                                                                                                                                                                                                                                                    cerr
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eok
                                                                                                                                                                                                                                                                                                                                                                                                                       x1
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eerr
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               eerr) -}
15c5efd5631bffb3c90d29979d1cfbb4
  parseInput3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseInput} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.eof} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<?>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.label} True True} Text.Parsec.Prim.<?>2
                                                                                                                                                                                                                                                                                                                                                                   @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                   @ ()
                                                                                                                                                                                                                                                                                                                                                                   @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                   @ ()
                                                                                                                                                                                                                                                                                                                                                                   AlgParser.parseInput_p
                                                                                                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                                                                                                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                             <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                             <()>_R
                                                                                                                                                                                                                                                                                                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                             <()>_R))
                                                                                                                                                                                                                                                                                                                                                                   Text.Parsec.Combinator.eof1) -}
f4ee2ddf362902ca8255c7b48c444ed8
  parseInput4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: ({__scc {main@main:AlgParser.parseInput} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.eof} False True} Text.Parsec.Combinator.$wanyToken
                                                                                                                                                                          @ GHC.Base.String
                                                                                                                                                                          @ Data.Functor.Identity.Identity
                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                          @ ()
                                                                                                                                                                          (AlgParser.$s$fStream[]mtok
                                                                                                                                                                             @ GHC.Types.Char)) -}
7bc0405d78f140bc999a34bce7f20ea4
  parseInput5 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseInput} False True} Text.Parsec.Token.whiteSpace
                                                                       @ GHC.Base.String
                                                                       @ ()
                                                                       @ Data.Functor.Identity.Identity
                                                                       AlgParser.lexer) -}
c296e30e5e0da3aaa1971a83921dd8a4
  parseInput_p ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseInput} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Combinator.eof} False True} Text.Parsec.Combinator.$wnotFollowedBy
                                                                                                                                                                          @ GHC.Base.String
                                                                                                                                                                          @ Data.Functor.Identity.Identity
                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                          @ ()
                                                                                                                                                                          GHC.Show.$fShowChar
                                                                                                                                                                          AlgParser.parseInput4) -}
a1f5f213d0069873b00d45204b655c6d
  parseLeftWing :: Text.Parsec.String.Parser AlgData.RangeWing
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.parseLeftWing1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <AlgData.RangeWing>_R)) -}
56ec95c13a45765c7d2893087c3228b6
  parseLeftWing1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.RangeWing
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.RangeWing
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ b1 ->
                 {__scc {main@main:AlgParser.parseLeftWing} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                               [GHC.Types.Char]
                                                                                                                                                                               ())
                                                                                                                                                                      (cok :: AlgData.RangeWing
                                                                                                                                                                              -> Text.Parsec.Prim.State
                                                                                                                                                                                   [GHC.Types.Char]
                                                                                                                                                                                   ()
                                                                                                                                                                              -> Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1)
                                                                                                                                                                      (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1)
                                                                                                                                                                      (eok :: AlgData.RangeWing
                                                                                                                                                                              -> Text.Parsec.Prim.State
                                                                                                                                                                                   [GHC.Types.Char]
                                                                                                                                                                                   ()
                                                                                                                                                                              -> Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1)
                                                                                                                                                                      (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1) ->
                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseLeftWing4
                                                                                                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                                                                                                   (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                        <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                                                                        <()>_R
                                                                                                                                                                                                                                                                                                                                                                        <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                        <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                     @ b1
                                                                                                                                                                                                                                                                                                                                                                     s1
                                                                                                                                                                                                                                                                                                                                                                     (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                        (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                 ())
                                                                                                                                                                                                                                                                                                                                                                        (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseLeftWing2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (x1 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err')))
                                                                                                                                                                                                                                                                                                                                                                     cerr
                                                                                                                                                                                                                                                                                                                                                                     (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                        (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                 ())
                                                                                                                                                                                                                                                                                                                                                                        (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseLeftWing2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (x1 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err')))
                                                                                                                                                                                                                                                                                                                                                                     eerr) -}
1b40273d0690dd27e23b1d8fb7e3bcb2
  parseLeftWing2 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.RangeWing
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.RangeWing
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (i :: GHC.Base.String) @ b1 ->
                 let {
                   lvl328 :: GHC.Types.Bool
                   = GHC.Base.eqString i AlgParser.parseLeftWing3
                 } in
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                         [GHC.Types.Char]
                                                                                                                         ())
                                                                                                                (cok :: AlgData.RangeWing
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (cerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1)
                                                                                                                (eok :: AlgData.RangeWing
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (eerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1) ->
                                                                                                              {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm
                                                                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                                                                             (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                  <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                  <()>_R
                                                                                                                                                                                                                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                  <AlgData.Algo>_R)
                                                                                                                                                                                                                                                                                                               @ b1
                                                                                                                                                                                                                                                                                                               s1
                                                                                                                                                                                                                                                                                                               (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x1 :: AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                    {- Strictness: m -}
                                                                                                                                                                                                                                                                                                                  = AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                      lvl328
                                                                                                                                                                                                                                                                                                                      x
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.RangeWing
ypes.Char]

ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    cok
                                                                                                                                                                                                                                                                                                                                                                                                                    cerr
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x2 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     cok
                                                                                                                                                                                                                                                                                                                                                                                                                       x2
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     cerr
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               cerr
                                                                                                                                                                                                                                                                                                               (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x1 :: AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                    {- Strictness: m -}
                                                                                                                                                                                                                                                                                                                  = AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                      lvl328
                                                                                                                                                                                                                                                                                                                      x
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.RangeWing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    @ [GHC.Types.Char]

ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    cok
                                                                                                                                                                                                                                                                                                                                                                                                                    cerr
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x2 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eok
                                                                                                                                                                                                                                                                                                                                                                                                                       x2
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eerr
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               eerr) -}
cd25c292bb0a3ffb392035fee372f732
  parseLeftWing3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseLeftWing} False True} GHC.CString.unpackCString#
                                                                          "["#) -}
b8c129c470b4c85b41dd764a2dba89d0
  parseLeftWing4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseLeftWing} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                    @ GHC.Base.String
                                                                                                                                                                                                                                                                    @ ()
                                                                                                                                                                                                                                                                    @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                    @ GHC.Base.String
                                                                                                                                                                                                                                                                    AlgParser.parseLeftWing7
                                                                                                                                                                                                                                                                      `cast`
                                                                                                                                                                                                                                                                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                              <GHC.Base.String>_R
                                                                                                                                                                                                                                                                              <()>_R
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                              <GHC.Base.String>_R))
                                                                                                                                                                                                                                                                    AlgParser.parseLeftWing5) -}
17269c3b7d89e40b05a8f15d645b405f
  parseLeftWing5 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseLeftWing} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                         ds14 })
                                                                          AlgParser.parseLeftWing6) -}
a5a1d08f131fd2876d17572f7c06bf77
  parseLeftWing6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseLeftWing} False True} GHC.CString.unpackCString#
                                                                          "]"#) -}
3f5965fcf5ed7269529ddef5096db8cc
  parseLeftWing7 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseLeftWing} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ())
                                                                                                                                                                       (cok :: GHC.Base.String
                                                                                                                                                                               -> Text.Parsec.Prim.State
                                                                                                                                                                                    GHC.Base.String
                                                                                                                                                                                    ()
                                                                                                                                                                               -> Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b)
                                                                                                                                                                       (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b)
                                                                                                                                                                       (eok :: GHC.Base.String
                                                                                                                                                                               -> Text.Parsec.Prim.State
                                                                                                                                                                                    GHC.Base.String
                                                                                                                                                                                    ()
                                                                                                                                                                               -> Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b)
                                                                                                                                                                       (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b) ->
                                                                                                                                                                     {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseLeftWing8
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    eerr) -}
eef39778c31dcf05a1e6244c92afa2f7
  parseLeftWing8 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseLeftWing} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                         ds14 })
                                                                          AlgParser.parseLeftWing3) -}
df57657e89ce6baf8f2c6c42c6e93f28
  parseNumber :: Text.Parsec.String.Parser AlgData.Algo
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.parseTerm22
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <AlgData.Algo>_R)) -}
be7cbdd5744d71ffc18bbdabb4237495
  parseNumeric ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Token.GenTokenParser s u m
    -> t -> Text.Parsec.Prim.ParsecT s u m AlgData.Algo
  {- Arity: 3,
     Strictness: <L,U(U,C(U))><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ s
                   @ u
                   @ (m :: * -> *)
                   (w :: Text.Parsec.Prim.Stream s m GHC.Types.Char)
                   (w1 :: Text.Parsec.Token.GenTokenParser s u m)
                   (w2 :: t) ->
                 AlgParser.$wparseNumeric @ t @ s @ u @ m w w1)
                  `cast`
                (forall (t :: <*>_N) (s :: <*>_N) (u :: <*>_N) (m :: <* -> *>_N).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R <Text.Parsec.Token.GenTokenParser s u m>_R
                 ->_R <t>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <s>_R <u>_R <m>_R <AlgData.Algo>_R)) -}
7d486b27ed50d399afad2caa1327dbb5
  parsePunctuator ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.parseTerm18
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <AlgData.Algo>_R)) -}
b124c1336d4d7c49d25ff5ee7daefeb0
  parseRange ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String () Data.Functor.Identity.Identity
    -> t
    -> Text.Parsec.Prim.ParsecT
         GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   (w :: Text.Parsec.Token.GenTokenParser
                           GHC.Base.String () Data.Functor.Identity.Identity)
                   (w1 :: t) ->
                 AlgParser.$wparseRange @ t w)
                  `cast`
                (forall (t :: <*>_N).
                 <Text.Parsec.Token.GenTokenParser
                    GHC.Base.String () Data.Functor.Identity.Identity>_R
                 ->_R <t>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <[GHC.Types.Char]>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <AlgData.Algo>_R)) -}
4ecb4d5f61d30d6b1fecdc45c60820c3
  parseResol :: GHC.Base.String -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <L,U> -}
1f399d548b7f07dfcf80f798b6574219
  parseRightWing :: Text.Parsec.String.Parser AlgData.RangeWing
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.parseRightWing1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <AlgData.RangeWing>_R)) -}
b35c352d79bd7a68ef3638aed74f3634
  parseRightWing1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.RangeWing
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.RangeWing
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ b1 ->
                 {__scc {main@main:AlgParser.parseRightWing} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                ())
                                                                                                                                                                       (cok :: AlgData.RangeWing
                                                                                                                                                                               -> Text.Parsec.Prim.State
                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                    ()
                                                                                                                                                                               -> Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1)
                                                                                                                                                                       (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b1)
                                                                                                                                                                       (eok :: AlgData.RangeWing
                                                                                                                                                                               -> Text.Parsec.Prim.State
                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                    ()
                                                                                                                                                                               -> Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1)
                                                                                                                                                                       (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b1) ->
                                                                                                                                                                     {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm
                                                                                                                                                                                                                                                                                                                                                                      `cast`
                                                                                                                                                                                                                                                                                                                                                                    (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                         <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                                                                         <()>_R
                                                                                                                                                                                                                                                                                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                         <AlgData.Algo>_R)
                                                                                                                                                                                                                                                                                                                                                                      @ b1
                                                                                                                                                                                                                                                                                                                                                                      s1
                                                                                                                                                                                                                                                                                                                                                                      (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                         (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                  ())
                                                                                                                                                                                                                                                                                                                                                                         (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                       {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseRightWing2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (\ (x1 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ())[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err')))
                                                                                                                                                                                                                                                                                                                                                                      cerr
                                                                                                                                                                                                                                                                                                                                                                      (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                         (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                  ())
                                                                                                                                                                                                                                                                                                                                                                         (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                       {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseRightWing2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (\ (x1 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ())[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 err')))
                                                                                                                                                                                                                                                                                                                                                                      eerr) -}
a3ceec1004149cca9db57dd5a44e0c17
  parseRightWing2 ::
    AlgData.Algo
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.RangeWing
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.RangeWing
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (v :: AlgData.Algo)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: AlgData.RangeWing
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: AlgData.RangeWing
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseRightWing4
                                                                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                                                                             (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                  <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                  <()>_R
                                                                                                                                                                                                                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                  <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                               @ b1
                                                                                                                                                                                                                                                                                                               eta
                                                                                                                                                                                                                                                                                                               (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x1 :: GHC.Types.Bool
                                                                                                                                                                                                                                                                                                                  = GHC.Base.eqString
                                                                                                                                                                                                                                                                                                                      x
                                                                                                                                                                                                                                                                                                                      AlgParser.parseRightWing3
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x2 :: AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                    {- Strictness: m -}
                                                                                                                                                                                                                                                                                                                  = AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                      x1
                                                                                                                                                                                                                                                                                                                      v
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.RangeWing
ypes.Char]

ata.Functor.Identity.Identity
x2)
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    eta1
                                                                                                                                                                                                                                                                                                                                                                                                                    eta2
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x3 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eta1
                                                                                                                                                                                                                                                                                                                                                                                                                       x3
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eta2
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               eta2
                                                                                                                                                                                                                                                                                                               (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x1 :: GHC.Types.Bool
                                                                                                                                                                                                                                                                                                                  = GHC.Base.eqString
                                                                                                                                                                                                                                                                                                                      x
                                                                                                                                                                                                                                                                                                                      AlgParser.parseRightWing3
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                let {
                                                                                                                                                                                                                                                                                                                  x2 :: AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                    {- Strictness: m -}
                                                                                                                                                                                                                                                                                                                  = AlgData.RangeWing
                                                                                                                                                                                                                                                                                                                      x1
                                                                                                                                                                                                                                                                                                                      v
                                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.RangeWing
ypes.Char]

ata.Functor.Identity.Identity
x2)
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    eta1
                                                                                                                                                                                                                                                                                                                                                                                                                    eta2
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x3 :: AlgData.RangeWing)
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eta3
                                                                                                                                                                                                                                                                                                                                                                                                                       x3
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err'))
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eta4
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               eta4) -}
2891263842b196fa9ce18d151143957f
  parseRightWing3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseRightWing} False True} GHC.CString.unpackCString#
                                                                           "]"#) -}
a7929543d83d1db63dfe8ab42fd7e072
  parseRightWing4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseRightWing} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                     @ GHC.Base.String
                                                                                                                                                                                                                                                                     @ ()
                                                                                                                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                     @ GHC.Base.String
                                                                                                                                                                                                                                                                     AlgParser.parseRightWing6
                                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                                     (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                               <GHC.Base.String>_R
                                                                                                                                                                                                                                                                               <()>_R
                                                                                                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                               <GHC.Base.String>_R))
                                                                                                                                                                                                                                                                     AlgParser.parseRightWing5) -}
8dc765b863cb509bf21a40bc5b1f8ee6
  parseRightWing5 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseRightWing} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                          ds14 })
                                                                           AlgParser.parseRightWing3) -}
1a5b238d6d69e3d7daa752500a7cbc33
  parseRightWing6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseRightWing} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                                 GHC.Base.String
                                                                                                                                                                                 ())
                                                                                                                                                                        (cok :: GHC.Base.String
                                                                                                                                                                                -> Text.Parsec.Prim.State
                                                                                                                                                                                     GHC.Base.String
                                                                                                                                                                                     ()
                                                                                                                                                                                -> Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b)
                                                                                                                                                                        (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b)
                                                                                                                                                                        (eok :: GHC.Base.String
                                                                                                                                                                                -> Text.Parsec.Prim.State
                                                                                                                                                                                     GHC.Base.String
                                                                                                                                                                                     ()
                                                                                                                                                                                -> Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b)
                                                                                                                                                                        (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                 -> Data.Functor.Identity.Identity
                                                                                                                                                                                      b) ->
                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseRightWing7
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     eerr) -}
bd332341814dfdb7a50d7a3d43e98533
  parseRightWing7 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseRightWing} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                          ds14 })
                                                                           AlgParser.parseRightWing8) -}
682cb17f933aaa632100caa1e3a0308b
  parseRightWing8 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseRightWing} False True} GHC.CString.unpackCString#
                                                                           "["#) -}
cc996cfe9dbf1da678bc8fec506acd25
  parseSet ::
    Text.Parsec.Token.GenTokenParser s u m
    -> Text.Parsec.Prim.ParsecT s u m AlgData.Algo
    -> Text.Parsec.Prim.ParsecT s u m AlgData.Algo
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                AlgParser.parseTerm65
                  `cast`
                (forall (s :: <*>_N) (u :: <*>_N) (m :: <* -> *>_N).
                 <Text.Parsec.Token.GenTokenParser s u m>_R
                 ->_R <Text.Parsec.Prim.ParsecT s u m AlgData.Algo>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <s>_R <u>_R <m>_R <AlgData.Algo>_R)) -}
82b8241f4b38a4214e2ba872c471965b
  parseTerm :: Text.Parsec.String.Parser AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                               @ GHC.Base.String
                                                                                                                                                                                                                                                               @ ()
                                                                                                                                                                                                                                                               @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                               @ AlgData.Algo
                                                                                                                                                                                                                                                               AlgParser.parseTerm84
                                                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                                                               (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                         <GHC.Base.String>_R
                                                                                                                                                                                                                                                                         <()>_R
                                                                                                                                                                                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                         <AlgData.Algo>_R))
                                                                                                                                                                                                                                                               AlgParser.parseTerm1) -}
b86a9e889efcea49378d9ee6cf78af42
  parseTerm1 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm83
                                                                                                                                                                                                                                                                AlgParser.parseTerm2) -}
05af06a2933f4ed2844dfd675981ac5e
  parseTerm10 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm50
                                                                                                                                                                                                                                                                AlgParser.parseTerm11) -}
32a528ef68681a81d84db56b738ca15d
  parseTerm11 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm46
                                                                                                                                                                                                                                                                AlgParser.parseTerm12) -}
c7d7aeff2053b9b78b020293685bf951
  parseTerm12 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm42
                                                                                                                                                                                                                                                                AlgParser.parseTerm13) -}
91dbdf066fbf9fdf5acddd68c59f4466
  parseTerm13 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm38
                                                                                                                                                                                                                                                                AlgParser.parseTerm14) -}
c0cfe397f7ad3bb4ad78dc2ec4d688d8
  parseTerm14 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm33
                                                                                                                                                                                                                                                                AlgParser.parseTerm15) -}
9d054ce8d6ae60c07105a2c13d856926
  parseTerm15 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm28
                                                                                                                                                                                                                                                                AlgParser.parseTerm16) -}
79fbb5efb946b9a21f929266a73d4c8a
  parseTerm16 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseIdentifier1
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm17) -}
a23f126d7ddd01a3ec989818eb7aad36
  parseTerm17 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm22
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm18
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))) -}
c0bd1a113f18007cfeb6ec714850f755
  parseTerm18 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ b1 ->
                 {__scc {main@main:AlgParser.parsePunctuator} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                 ())
                                                                                                                                                                        (cok :: AlgData.Algo
                                                                                                                                                                                -> Text.Parsec.Prim.State
                                                                                                                                                                                     [GHC.Types.Char]
                                                                                                                                                                                     ()
                                                                                                                                                                                -> Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b1)
                                                                                                                                                                        (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                 -> Data.Functor.Identity.Identity
                                                                                                                                                                                      b1)
                                                                                                                                                                        (eok :: AlgData.Algo
                                                                                                                                                                                -> Text.Parsec.Prim.State
                                                                                                                                                                                     [GHC.Types.Char]
                                                                                                                                                                                     ()
                                                                                                                                                                                -> Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b1)
                                                                                                                                                                        (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                 -> Data.Functor.Identity.Identity
                                                                                                                                                                                      b1) ->
                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm19
                                                                                                                                                                                                                                                                                                                                                                       @ b1
                                                                                                                                                                                                                                                                                                                                                                       s1
                                                                                                                                                                                                                                                                                                                                                                       (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                          (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                   [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                   ())
                                                                                                                                                                                                                                                                                                                                                                          (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                                                                                                                                                                          x1 :: AlgData.Algo
                                                                                                                                                                                                                                                                                                                                                                          = AlgData.Punctuation
                                                                                                                                                                                                                                                                                                                                                                              x
                                                                                                                                                                                                                                                                                                                                                                        } in
                                                                                                                                                                                                                                                                                                                                                                        {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.Algo
ypes.Char]

ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (\ (x2 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               x2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err')))
                                                                                                                                                                                                                                                                                                                                                                       cerr
                                                                                                                                                                                                                                                                                                                                                                       (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                          (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                   [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                   ())
                                                                                                                                                                                                                                                                                                                                                                          (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                                                                                                                                                                          x1 :: AlgData.Algo
                                                                                                                                                                                                                                                                                                                                                                          = AlgData.Punctuation
                                                                                                                                                                                                                                                                                                                                                                              x
                                                                                                                                                                                                                                                                                                                                                                        } in
                                                                                                                                                                                                                                                                                                                                                                        {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.Algo
ypes.Char]

ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (\ (x2 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               x2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  err')))
                                                                                                                                                                                                                                                                                                                                                                       eerr) -}
fdee08236e7d4ea641585021a0117545
  parseTerm19 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parsePunctuator} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                                  GHC.Base.String
                                                                                                                                                                                  ())
                                                                                                                                                                         (cok :: GHC.Base.String
                                                                                                                                                                                 -> Text.Parsec.Prim.State
                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                      ()
                                                                                                                                                                                 -> Text.Parsec.Error.ParseError
                                                                                                                                                                                 -> Data.Functor.Identity.Identity
                                                                                                                                                                                      b)
                                                                                                                                                                         (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                                -> Data.Functor.Identity.Identity
                                                                                                                                                                                     b)
                                                                                                                                                                         (eok :: GHC.Base.String
                                                                                                                                                                                 -> Text.Parsec.Prim.State
                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                      ()
                                                                                                                                                                                 -> Text.Parsec.Error.ParseError
                                                                                                                                                                                 -> Data.Functor.Identity.Identity
                                                                                                                                                                                      b)
                                                                                                                                                                         (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                                  -> Data.Functor.Identity.Identity
                                                                                                                                                                                       b) ->
                                                                                                                                                                       {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm20
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      eerr) -}
69817463be86afda71af96f0ae8019b8
  parseTerm2 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm79
                                                                                                                                                                                                                                                                AlgParser.parseTerm3) -}
a9017cc8470cbb6b7cd82138362ffa5f
  parseTerm20 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parsePunctuator} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                           ds14 })
                                                                            AlgParser.parseTerm21) -}
51fd0455b84cc75753a92d8b5e212dc5
  parseTerm21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parsePunctuator} False True} GHC.CString.unpackCString#
                                                                            "."#) -}
c57983fbb1901650badccdfe3228d7f2
  parseTerm22 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ b1 ->
                 {__scc {main@main:AlgParser.parseNumber} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                             [GHC.Types.Char]
                                                                                                                                                                             ())
                                                                                                                                                                    (cok :: AlgData.Algo
                                                                                                                                                                            -> Text.Parsec.Prim.State
                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                 ()
                                                                                                                                                                            -> Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b1)
                                                                                                                                                                    (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1)
                                                                                                                                                                    (eok :: AlgData.Algo
                                                                                                                                                                            -> Text.Parsec.Prim.State
                                                                                                                                                                                 [GHC.Types.Char]
                                                                                                                                                                                 ()
                                                                                                                                                                            -> Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b1)
                                                                                                                                                                    (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b1) ->
                                                                                                                                                                  {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.nr1
                                                                                                                                                                                                                                                                                                                                                                   @ b1
                                                                                                                                                                                                                                                                                                                                                                   s1
                                                                                                                                                                                                                                                                                                                                                                   (\ (x :: Data.Number.CReal.CReal)
                                                                                                                                                                                                                                                                                                                                                                      (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                               [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                               ())
                                                                                                                                                                                                                                                                                                                                                                      (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm23
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err')))
                                                                                                                                                                                                                                                                                                                                                                   cerr
                                                                                                                                                                                                                                                                                                                                                                   (\ (x :: Data.Number.CReal.CReal)
                                                                                                                                                                                                                                                                                                                                                                      (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                               [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                               ())
                                                                                                                                                                                                                                                                                                                                                                      (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm23
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (x1 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              err')))
                                                                                                                                                                                                                                                                                                                                                                   eerr) -}
d680932b121bf913683d2bc470bb6da6
  parseTerm23 ::
    Data.Number.CReal.CReal
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (cr :: Data.Number.CReal.CReal) @ b1 ->
                 let {
                   n :: AlgData.Algo
                   = let {
                       r :: GHC.Base.Maybe GHC.Real.Rational
                       = {__scc {main@main:AlgParser.parseNumber.r} True True} AlgShow.toRatio
                                                                                 cr
                     } in
                     {__scc {main@main:AlgParser.parseNumber.n} True False} AlgData.Nom
                                                                              ({__scc {main@main:AlgParser.parseNumber.n} False True} case r of wild {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> Lib.Noms.NrReal
                                                                                                                                             cr
                                                                                                                                        GHC.Base.Just ipv
                                                                                                                                        -> Lib.Noms.NrRatio
                                                                                                                                             ipv })
                 } in
                 let {
                   $wf :: GHC.Base.String
                          -> forall b.
                             Text.Parsec.Prim.State [GHC.Types.Char] ()
                             -> (AlgData.Algo
                                 -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                 -> Text.Parsec.Error.ParseError
                                 -> Data.Functor.Identity.Identity b)
                             -> Data.Functor.Identity.Identity b
                     {- Arity: 3,
                        Strictness: <L,U><L,U(U,U(U,U,U),U)><C(C(C(S))),1*C1(C1(C1(U)))>,
                        Inline: [0] -}
                   = \ (w :: GHC.Base.String)
                       @ b
                       (w1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                       (w2 :: AlgData.Algo
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot] ->
                     let {
                       x :: AlgData.Algo
                       = case {__scc {main@main:AlgParser.parseNumber.s} True True} AlgParser.$slookup2
                                                                                      @ AlgData.Scale
                                                                                      w
                                                                                      Lib.ISUnits.is_scale_symbols of wild {
                           GHC.Base.Nothing
                           -> {__scc {main@main:AlgParser.parseNumber.chkMul} True True} case GHC.Base.eqString
                                                                                                w
                                                                                                (GHC.Types.[]
                                                                                                   @ GHC.Types.Char) of wild1 {
                                                                                           GHC.Types.False
                                                                                           -> AlgData.Op
                                                                                                AlgData.Mul
                                                                                                (GHC.Types.:
                                                                                                   @ AlgData.Algo
                                                                                                   n
                                                                                                   (GHC.Types.:
                                                                                                      @ AlgData.Algo
                                                                                                      (AlgData.Lit
                                                                                                         w)
                                                                                                      (GHC.Types.[]
                                                                                                         @ AlgData.Algo)))
                                                                                           GHC.Types.True
                                                                                           -> n }
                           GHC.Base.Just ipv -> AlgData.Quant (n, ipv) }
                     } in
                     {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.parserReturn} True False} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.parserReturn} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.parserReturn.\} True True} w2
                                                                                                                                                                                                                                                                                                                                                                                                                                         x
                                                                                                                                                                                                                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                                                                                                                                                                                                                         (Text.Parsec.Prim.unknownError
                                                                                                                                                                                                                                                                                                                                                                                                                                            @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                            @ ()
                                                                                                                                                                                                                                                                                                                                                                                                                                            w1)
                 } in
                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                         [GHC.Types.Char]
                                                                                                                         ())
                                                                                                                (cok :: AlgData.Algo
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (cerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1)
                                                                                                                (eok :: AlgData.Algo
                                                                                                                        -> Text.Parsec.Prim.State
                                                                                                                             [GHC.Types.Char]
                                                                                                                             ()
                                                                                                                        -> Text.Parsec.Error.ParseError
                                                                                                                        -> Data.Functor.Identity.Identity
                                                                                                                             b1)
                                                                                                                (eerr :: Text.Parsec.Error.ParseError
                                                                                                                         -> Data.Functor.Identity.Identity
                                                                                                                              b1) ->
                                                                                                              {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm24
                                                                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                                                                             (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                  <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                                                                  <()>_R
                                                                                                                                                                                                                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                  <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                               @ b1
                                                                                                                                                                                                                                                                                                               s1
                                                                                                                                                                                                                                                                                                               (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} $wf
                                                                                                                                                                                                                                                                                                                                                                                                                    x
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x1 :: AlgData.Algo)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                     cok
                                                                                                                                                                                                                                                                                                                                                                                                                       x1
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               cerr
                                                                                                                                                                                                                                                                                                               (\ (x :: GHC.Base.String)
                                                                                                                                                                                                                                                                                                                  (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                           [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                           ())
                                                                                                                                                                                                                                                                                                                  (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} $wf
                                                                                                                                                                                                                                                                                                                                                                                                                    x
                                                                                                                                                                                                                                                                                                                                                                                                                    @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                    s2
                                                                                                                                                                                                                                                                                                                                                                                                                    (\ (x1 :: AlgData.Algo)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                       (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                ())[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                       (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                     eok
                                                                                                                                                                                                                                                                                                                                                                                                                       x1
                                                                                                                                                                                                                                                                                                                                                                                                                       s3
                                                                                                                                                                                                                                                                                                                                                                                                                       (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                          err
                                                                                                                                                                                                                                                                                                                                                                                                                          err')))
                                                                                                                                                                                                                                                                                                               eerr) -}
06e73fff61b754eeef0417345c51baa8
  parseTerm24 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseNumber} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                                                                                                                  @ ()
                                                                                                                                                                                                                                                                  @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                  @ GHC.Base.String
                                                                                                                                                                                                                                                                  AlgParser.parseTerm26
                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                  (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                            <GHC.Base.String>_R
                                                                                                                                                                                                                                                                            <()>_R
                                                                                                                                                                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                            <GHC.Base.String>_R))
                                                                                                                                                                                                                                                                  AlgParser.parseTerm25) -}
1835d5f31bd8338e474f277a454b9fb2
  parseTerm25 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseNumber} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.symbol} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds14 })
                                                                        (GHC.Types.[]
                                                                           @ GHC.Types.Char)) -}
94821ea5273db41893f3ec73925449f4
  parseTerm26 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseNumber} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                              ())
                                                                                                                                                                     (cok :: GHC.Base.String
                                                                                                                                                                             -> Text.Parsec.Prim.State
                                                                                                                                                                                  GHC.Base.String
                                                                                                                                                                                  ()
                                                                                                                                                                             -> Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b)
                                                                                                                                                                     (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b)
                                                                                                                                                                     (eok :: GHC.Base.String
                                                                                                                                                                             -> Text.Parsec.Prim.State
                                                                                                                                                                                  GHC.Base.String
                                                                                                                                                                                  ()
                                                                                                                                                                             -> Text.Parsec.Error.ParseError
                                                                                                                                                                             -> Data.Functor.Identity.Identity
                                                                                                                                                                                  b)
                                                                                                                                                                     (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b) ->
                                                                                                                                                                   {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm27
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Base.String>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <()>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Base.String>_R)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  eerr) -}
0372d7cf62e8e65136b42eca4bf1aa66
  parseTerm27 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.parseNumber} False True} Text.Parsec.Token.identifier
                                                                        @ GHC.Base.String
                                                                        @ ()
                                                                        @ Data.Functor.Identity.Identity
                                                                        AlgParser.lexer) -}
9bef41306ff69eafd79cfe133b32f9a0
  parseTerm28 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm31
                                                                      AlgParser.parseTerm29
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
4051900c4354378920fb795bbcd1104f
  parseTerm29 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgParser.parseTerm30) -}
1dc7caed55c23c8302d2aa852bd388a4
  parseTerm3 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm73
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <GHC.Base.String>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm4) -}
ea56b326a1aa6ee2936e83885903bd66
  parseTerm30 :: AlgData.Algo
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (AlgData.Bool GHC.Types.False) -}
23d52dbb0a29823bae99dc197555d962
  parseTerm31 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm32) -}
bc09dd87db602cd8cb7074d50522500c
  parseTerm32 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "False"#) -}
0e71bb7b2cd1dc891ab731d14a8f4420
  parseTerm33 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm36
                                                                      AlgParser.parseTerm34
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
6684172480f27864fbb8fcc9b21321b0
  parseTerm34 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgParser.parseTerm35) -}
83314a526c1146b0a3df6a29588edd22
  parseTerm35 :: AlgData.Algo
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (AlgData.Bool GHC.Types.True) -}
a042f2b785373140d3d6c9365e2f219b
  parseTerm36 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm37) -}
5296d53b0d16a7e1406fc627529d4bd0
  parseTerm37 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "True"#) -}
4ddc0560528e68a59764c9d96d4384a5
  parseTerm38 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm40
                                                                      AlgParser.parseTerm39
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
310e40d76c6f065807c7dd3ded9f52eb
  parseTerm39 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgSets._R) -}
76c276efcff1036c87e04838e07dc580
  parseTerm4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm68
                                                                                                                                                                                                                                                                AlgParser.parseTerm5) -}
d4019038e40c963a9751e117389bc0e7
  parseTerm40 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm41) -}
31a92256956ada31a789c20bb36dd0d2
  parseTerm41 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCStringUtf8#
                                                                      "\\226\\132\\157"#) -}
17796ab0c67ccd67e19b9e99761535a6
  parseTerm42 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm44
                                                                      AlgParser.parseTerm43
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
143e380d269a9a23223943ed1e8a60dd
  parseTerm43 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgSets._Q) -}
2a22466f07888d16dcafe61ccec1ab99
  parseTerm44 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm45) -}
627cd7f960da80808de724d40596c2ea
  parseTerm45 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCStringUtf8#
                                                                      "\\226\\132\\154"#) -}
820e1a5447731338428881b10813cbf7
  parseTerm46 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm48
                                                                      AlgParser.parseTerm47
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
f8a6fd7f09dd80961cd4780f01ca9bb0
  parseTerm47 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgSets._N) -}
a3a32735184ea245bf5c0a50b1534e66
  parseTerm48 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm49) -}
d5f8c0d98585746d43fd8132358f4287
  parseTerm49 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCStringUtf8#
                                                                      "\\226\\132\\149"#) -}
66925cdd4d28ce9417d7acafecf42abd
  parseTerm5 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm66
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <GHC.Base.String>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm6) -}
5f259a28d888ef5a331be8ca772c871c
  parseTerm50 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm52
                                                                      AlgParser.parseTerm51
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
2fcfc5118aea00516db5e44c7ac71c71
  parseTerm51 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgData.Ellipsis) -}
f1f6a995b72af4e702bff0e9ffedae5c
  parseTerm52 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm53) -}
5799acbef4b02cd3663228641fdf8996
  parseTerm53 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "..."#) -}
01fe5f96fdf03314dfc84b978b97f361
  parseTerm54 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm56
                                                                      AlgParser.parseTerm55
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
3ec598af7272644b6561d47e0420b7f7
  parseTerm55 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgData.Infinitesimal) -}
9e2b7e701efe1c9dc5d19cacd476b53b
  parseTerm56 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm57) -}
d63f9366ecb875264c7ddfbe15fcca03
  parseTerm57 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "inf"#) -}
b8901e748c88ea5c29295ae2c8e7e091
  parseTerm58 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm60
                                                                      AlgParser.parseTerm59
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
29abbf84b15662016b3918c9717c12f4
  parseTerm59 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgData.Infinit) -}
7b3098ab963fb3e28f4914e9d1ed6954
  parseTerm6 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm63
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <GHC.Base.String>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm7) -}
1c94874f62985d92a6352c67d102ef5a
  parseTerm60 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm61) -}
70d03c49557f9a6bf7d3ba23801e4701
  parseTerm61 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "Inf"#) -}
d3d59f207ab55d9dead9337dc9fe1165
  parseTerm62 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} AlgParser.$wparseRange
                                                                      @ (Text.Parsec.String.Parser
                                                                           AlgData.Algo)
                                                                      AlgParser.lexer) -}
35ccdb0f547addf2ac61efba62ba913a
  parseTerm63 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                            ())
                                                                                                                                                                   (cok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                          -> Data.Functor.Identity.Identity
                                                                                                                                                                               b)
                                                                                                                                                                   (eok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b) ->
                                                                                                                                                                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm64
                                                                                                                                                                                                                                                                                                                                                                                                                                                                @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr) -}
53091c98ab8f32e2e819a8c4ee906937
  parseTerm64 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} AlgParser.parseTerm65
                                                                      @ GHC.Base.String
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      AlgParser.lexer
                                                                      AlgParser.parseExpression) -}
d4e00f10501ae4ad46c4e557e0e4c524
  parseTerm65 ::
    Text.Parsec.Token.GenTokenParser s u m
    -> Text.Parsec.Prim.ParsecT s u m AlgData.Algo
    -> forall b1.
       Text.Parsec.Prim.State s u
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> (AlgData.Algo
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> m b1
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ s
                   @ u
                   @ (m :: * -> *)
                   (lexer1 :: Text.Parsec.Token.GenTokenParser s u m)
                   (e :: Text.Parsec.Prim.ParsecT s u m AlgData.Algo)
                   @ b1 ->
                 {__scc {main@main:AlgParser.parseSet} True True} let {
                                                                    p :: Text.Parsec.Prim.ParsecT
                                                                           s u m AlgData.Algo
                                                                    = ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.braces} True True} case lexer1 of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                                                                                                                                                                       ds17
                                                                                                                                                                         @ AlgData.Algo })
                                                                        e
                                                                  } in
                                                                  {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                          s
                                                                                                                                                                          u)
                                                                                                                                                                 (cok :: AlgData.Algo
                                                                                                                                                                         -> Text.Parsec.Prim.State
                                                                                                                                                                              s
                                                                                                                                                                              u
                                                                                                                                                                         -> Text.Parsec.Error.ParseError
                                                                                                                                                                         -> m b1)
                                                                                                                                                                 (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                          -> m b1)
                                                                                                                                                                 (eok :: AlgData.Algo
                                                                                                                                                                         -> Text.Parsec.Prim.State
                                                                                                                                                                              s
                                                                                                                                                                              u
                                                                                                                                                                         -> Text.Parsec.Error.ParseError
                                                                                                                                                                         -> m b1)
                                                                                                                                                                 (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                          -> m b1) ->
                                                                                                                                                               {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} p `cast`
                                                                                                                                                                                                                                                                                                                                                              (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                                                                                                                   <s>_R
                                                                                                                                                                                                                                                                                                                                                                   <u>_R
                                                                                                                                                                                                                                                                                                                                                                   <m>_R
                                                                                                                                                                                                                                                                                                                                                                   <AlgData.Algo>_R)
                                                                                                                                                                                                                                                                                                                                                                @ b1
                                                                                                                                                                                                                                                                                                                                                                s1
                                                                                                                                                                                                                                                                                                                                                                (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                   (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                            s
                                                                                                                                                                                                                                                                                                                                                                            u)
                                                                                                                                                                                                                                                                                                                                                                   (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.$wlvl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ s
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ u
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ m
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (\ (x1 :: AlgData.Algo)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 s
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 u)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           err')))
                                                                                                                                                                                                                                                                                                                                                                cerr
                                                                                                                                                                                                                                                                                                                                                                (\ (x :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                   (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                            s
                                                                                                                                                                                                                                                                                                                                                                            u)
                                                                                                                                                                                                                                                                                                                                                                   (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.$wlvl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ s
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ u
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ m
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     x
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (\ (x1 :: AlgData.Algo)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 s
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 u)[OneShot]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        x1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           err')))
                                                                                                                                                                                                                                                                                                                                                                eerr) -}
c68a677aad0355df4dab304b5d542aa6
  parseTerm66 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                            ())
                                                                                                                                                                   (cok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                          -> Data.Functor.Identity.Identity
                                                                                                                                                                               b)
                                                                                                                                                                   (eok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b) ->
                                                                                                                                                                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm67
                                                                                                                                                                                                                                                                                                                                                                                                                                                                @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr) -}
baf91aea6a22da061b302d40cd7f4402
  parseTerm67 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} AlgParser.$wparseFloor
                                                                      @ (Text.Parsec.String.Parser
                                                                           AlgData.Algo)
                                                                      AlgParser.lexer) -}
08c2e8ae9bf8615014d14a69eada2a1d
  parseTerm68 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm71
                                                                      AlgParser.parseTerm69
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
11737daa1cdb75e3637b414e33a7f71d
  parseTerm69 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgParser.parseTerm70) -}
879e8d37ef32962f9f989e9b5c231bca
  parseTerm7 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm62
                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                                                                                                                                                                                                          <[GHC.Types.Char]>_R
                                                                                                                                                                                                                                                                          <()>_R
                                                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                          <AlgData.Algo>_R))
                                                                                                                                                                                                                                                                AlgParser.parseTerm8) -}
14af97680680fc5f9c020a61ff3a115b
  parseTerm70 :: AlgData.Algo
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (AlgData.Op
                   AlgData.Set
                   (GHC.Types.[] @ AlgData.Algo)) -}
bc845ccdd9806dcc8fa4e0f67e3d2710
  parseTerm71 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm72) -}
ed4fc0f8ffe6d48d0546b7fbc8e9e316
  parseTerm72 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "{}"#) -}
4c420aa9e75f9a1647b9fcf2839d1434
  parseTerm73 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} AlgParser.$w$sparseNumeric
                                                                      @ (Text.Parsec.Prim.ParsecT
                                                                           GHC.Base.String
                                                                           ()
                                                                           Data.Functor.Identity.Identity
                                                                           AlgData.Algo)
                                                                      @ ()
                                                                      AlgParser.lexer) -}
36992fbbcc2534e16bcb523e990953d8
  parseTerm74 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: (\ @ u @ b1 ->
                 {__scc {main@main:AlgParser.parseNumeric} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                               GHC.Base.String
                                                                                                                                                                               u)
                                                                                                                                                                      (cok :: AlgData.Algo
                                                                                                                                                                              -> Text.Parsec.Prim.State
                                                                                                                                                                                   GHC.Base.String
                                                                                                                                                                                   u
                                                                                                                                                                              -> Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1)
                                                                                                                                                                      (cerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1)
                                                                                                                                                                      (eok :: AlgData.Algo
                                                                                                                                                                              -> Text.Parsec.Prim.State
                                                                                                                                                                                   GHC.Base.String
                                                                                                                                                                                   u
                                                                                                                                                                              -> Text.Parsec.Error.ParseError
                                                                                                                                                                              -> Data.Functor.Identity.Identity
                                                                                                                                                                                   b1)
                                                                                                                                                                      (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                               -> Data.Functor.Identity.Identity
                                                                                                                                                                                    b1) ->
                                                                                                                                                                    {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.>>=} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm75
                                                                                                                                                                                                                                                                                                                                                                     @ u
                                                                                                                                                                                                                                                                                                                                                                     @ b1
                                                                                                                                                                                                                                                                                                                                                                     s1
                                                                                                                                                                                                                                                                                                                                                                     (\ (x :: [GHC.Types.Char])
                                                                                                                                                                                                                                                                                                                                                                        (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                 GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 u)
                                                                                                                                                                                                                                                                                                                                                                        (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                      let {
                                                                                                                                                                                                                                                                                                                                                                        x1 :: AlgData.Algo
                                                                                                                                                                                                                                                                                                                                                                        = AlgData.Numeric
                                                                                                                                                                                                                                                                                                                                                                            x
                                                                                                                                                                                                                                                                                                                                                                      } in
                                                                                                                                                                                                                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @ AlgData.Algo
ase.String
u
ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (x2 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      u)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             x2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err')))
                                                                                                                                                                                                                                                                                                                                                                     cerr
                                                                                                                                                                                                                                                                                                                                                                     (\ (x :: [GHC.Types.Char])
                                                                                                                                                                                                                                                                                                                                                                        (s2 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                 GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 u)
                                                                                                                                                                                                                                                                                                                                                                        (err :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                      let {
                                                                                                                                                                                                                                                                                                                                                                        x1 :: AlgData.Algo
                                                                                                                                                                                                                                                                                                                                                                        = AlgData.Numeric
                                                                                                                                                                                                                                                                                                                                                                            x
                                                                                                                                                                                                                                                                                                                                                                      } in
                                                                                                                                                                                                                                                                                                                                                                      {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
lgData.Algo
ase.String
u
ata.Functor.Identity.Identity
x1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @ b1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          cerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (x2 :: AlgData.Algo)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (s3 :: Text.Parsec.Prim.State
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      u)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             x2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             s3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err'))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (\ (err' :: Text.Parsec.Error.ParseError) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Text.Parsec.Error.mergeError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                err')))
                                                                                                                                                                                                                                                                                                                                                                     eerr) -}
322632c2da6ffae0d05793a27a3896bd
  parseTerm75 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.parseNumeric} False True} Text.Parsec.Prim.many1
                                                                         @ GHC.Base.String
                                                                         @ u
                                                                         @ Data.Functor.Identity.Identity
                                                                         @ GHC.Types.Char
                                                                         (AlgParser.parseTerm76 @ u)
                                                                           `cast`
                                                                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                   <GHC.Base.String>_R
                                                                                   <u>_R
                                                                                   <Data.Functor.Identity.Identity>_R
                                                                                   <GHC.Types.Char>_R))) -}
1894896388d358efa2d13ea321ce965b
  parseTerm76 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.parseNumeric} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.alphaNum} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<?>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.label} True True} Text.Parsec.Prim.<?>2
                                                                                                                                                                                                                                                                                                                                                                    @ GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                    @ u
                                                                                                                                                                                                                                                                                                                                                                    @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                    @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                    (AlgParser.parseTerm77
                                                                                                                                                                                                                                                                                                                                                                       @ u)
                                                                                                                                                                                                                                                                                                                                                                    AlgParser.def26) -}
e4ebf19cff7ffd13f888936856d4d0f4
  parseTerm77 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String u Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ u ->
                 {__scc {main@main:AlgParser.parseNumeric} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Char.alphaNum} False True} Text.Parsec.Char.satisfy
                                                                                                                                                                           @ GHC.Base.String
                                                                                                                                                                           @ Data.Functor.Identity.Identity
                                                                                                                                                                           @ u
                                                                                                                                                                           (AlgParser.$s$fStream[]mtok
                                                                                                                                                                              @ GHC.Types.Char)
                                                                                                                                                                           GHC.Unicode.isAlphaNum) -}
728bf6b67ad36bf0cd3e796ddcb03086
  parseTerm78 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseNumeric} False True} GHC.CString.unpackCString#
                                                                         "#"#) -}
cac8022987cb5456d8e7c78d9aa8dadc
  parseTerm79 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} Text.Parsec.Prim.$fMonadParsecT_$c>>
                                                                      @ [GHC.Types.Char]
                                                                      @ ()
                                                                      @ Data.Functor.Identity.Identity
                                                                      @ ()
                                                                      @ AlgData.Algo
                                                                      AlgParser.parseTerm81
                                                                      AlgParser.parseTerm80
                                                                        `cast`
                                                                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                                                                <[GHC.Types.Char]>_R
                                                                                <()>_R
                                                                                <Data.Functor.Identity.Identity>_R
                                                                                <AlgData.Algo>_R))) -}
31312afb7c5a214c74c549cd010cf6ab
  parseTerm8 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm58
                                                                                                                                                                                                                                                                AlgParser.parseTerm9) -}
62d35e942f57bda11501f877e052dd8a
  parseTerm80 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.return} True True} Text.Parsec.Prim.$fAlternativeParsecT4
                                                                                                                                                                     @ AlgData.Algo
                                                                                                                                                                     @ [GHC.Types.Char]
                                                                                                                                                                     @ ()
                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                     AlgData.Pref) -}
52351cdef483be79f367e9d179b36785
  parseTerm81 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity ()
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.reserved} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                                                                                                                                                                       ds2 })
                                                                      AlgParser.parseTerm82) -}
8e3fa30532784ffdf099b033d1741575
  parseTerm82 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} GHC.CString.unpackCString#
                                                                      "?"#) -}
1f6d5be2cb5654a03bcf9093d4f133a2
  parseTerm83 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} ({__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Token.parens} True True} case AlgParser.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                                                                                                                                                                     ds16
                                                                                                                                                                       @ AlgData.Algo })
                                                                      AlgParser.parseExpression) -}
3d5d91ecbec6ed531201dfc2683e72ce
  parseTerm84 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Unfolding: (\ @ b ->
                 {__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} True False} \ (s1 :: Text.Parsec.Prim.State
                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                            ())
                                                                                                                                                                   (cok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (ds :: Text.Parsec.Error.ParseError
                                                                                                                                                                          -> Data.Functor.Identity.Identity
                                                                                                                                                                               b)
                                                                                                                                                                   (eok :: AlgData.Algo
                                                                                                                                                                           -> Text.Parsec.Prim.State
                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                ()
                                                                                                                                                                           -> Text.Parsec.Error.ParseError
                                                                                                                                                                           -> Data.Functor.Identity.Identity
                                                                                                                                                                                b)
                                                                                                                                                                   (eerr :: Text.Parsec.Error.ParseError
                                                                                                                                                                            -> Data.Functor.Identity.Identity
                                                                                                                                                                                 b) ->
                                                                                                                                                                 {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.try.\} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.unParser} True False} AlgParser.parseTerm85
                                                                                                                                                                                                                                                                                                                                                                                                                                                                @ b
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                cok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eok
                                                                                                                                                                                                                                                                                                                                                                                                                                                                eerr) -}
ed01f48288b0cbf7a3c4952c6b390045
  parseTerm85 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (AlgData.Algo
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} AlgParser.$wparseFunc
                                                                      @ (Text.Parsec.String.Parser
                                                                           AlgData.Algo)
                                                                      AlgParser.lexer) -}
68ec2a6e800d6b3eb4393f10f939a728
  parseTerm9 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.parseTerm} False True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.<|>} True True} {__scc {parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X:Text.Parsec.Prim.mplus} True True} Text.Parsec.Prim.parserPlus
                                                                                                                                                                                                                                                                @ GHC.Base.String
                                                                                                                                                                                                                                                                @ ()
                                                                                                                                                                                                                                                                @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                                                AlgParser.parseTerm54
                                                                                                                                                                                                                                                                AlgParser.parseTerm10) -}
793bc2927f4f7fa3235f7d72fc40310f
  plus :: Text.Parsec.String.Parser GHC.Base.String
  {- Unfolding: InlineRule (0, True, True)
                AlgParser.int9
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.String>_R)) -}
bec677943a3b4a7a1cfbc14c0598dd99
  resolFromList :: [GHC.Base.String] -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>m6, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 {__scc {main@main:AlgParser.resolFromList} True False} case w of wild {
                                                                          []
                                                                          -> AlgParser.resolFromList1
                                                                          : o oo
                                                                          -> case {__scc {main@main:AlgParser.resolFromList} False True} {__scc {main@main:AlgParser.resolFromList.e} True True} AlgParser.parseAlgoExpr
                                                                                                                                                                                                   o of wild1 {
                                                                               GHC.Base.Nothing
                                                                               -> AlgData.Op
                                                                                    AlgData.Resol
                                                                                    ({__scc {main@main:AlgParser.resolFromList} False True} AlgParser.stepsFromList
                                                                                                                                              oo)
                                                                               GHC.Base.Just ipv
                                                                               -> AlgData.Op
                                                                                    AlgData.Resol
                                                                                    (GHC.Types.:
                                                                                       @ AlgData.Algo
                                                                                       ipv
                                                                                       ({__scc {main@main:AlgParser.resolFromList} False True} AlgParser.stepsFromList
                                                                                                                                                 oo)) } }) -}
13c803a7c45372d73e04732852c4ece7
  resolFromList1 :: AlgData.Algo
  {- Strictness: x -}
17cb6c6f029111f3169ab8a58a8b1332
  specialCharsMap :: Data.Map.Base.Map GHC.Types.Char GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.specialCharsMap} True True} AlgParser.specialCharsMap_$sfromList
                                                                           @ [GHC.Types.Char]
                                                                           Utils.specialChars) -}
d6f0cb0bfb7bd3b280b683393c0e1003
  specialCharsMap1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c2bb65eda03fe280b7ac85e9ea592042
  specialCharsMap_$sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Char, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> AlgParser.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> AlgParser.specialCharsMap1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
279a434d97ae138d1ce5b597f09f56d2
  stepOp ::
    AlgData.Ops -> AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><L,U>,
     Unfolding: (\ (op :: AlgData.Ops)
                   (a :: AlgData.Algo)
                   (b :: AlgData.Algo) ->
                 {__scc {main@main:AlgParser.stepOp} True True} let {
                                                                  fail :: GHC.Prim.Void#
                                                                          -> AlgData.Algo
                                                                    {- Arity: 1,
                                                                       Strictness: <L,A> -}
                                                                  = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                                                                    case b of wild {
                                                                      DEFAULT
                                                                      -> AlgData.Op
                                                                           AlgData.Equation
                                                                           (GHC.Types.:
                                                                              @ AlgData.Algo
                                                                              a
                                                                              (GHC.Types.:
                                                                                 @ AlgData.Algo
                                                                                 (AlgData.Op
                                                                                    op
                                                                                    (GHC.Types.:
                                                                                       @ AlgData.Algo
                                                                                       wild
                                                                                       (GHC.Types.[]
                                                                                          @ AlgData.Algo)))
                                                                                 (GHC.Types.[]
                                                                                    @ AlgData.Algo)))
                                                                      AlgData.Op ds1 p
                                                                      -> case ds1 of wild1 {
                                                                           DEFAULT
                                                                           -> AlgData.Op
                                                                                AlgData.Equation
                                                                                (GHC.Types.:
                                                                                   @ AlgData.Algo
                                                                                   a
                                                                                   (GHC.Types.:
                                                                                      @ AlgData.Algo
                                                                                      (AlgData.Op
                                                                                         op
                                                                                         (GHC.Types.:
                                                                                            @ AlgData.Algo
                                                                                            wild
                                                                                            (GHC.Types.[]
                                                                                               @ AlgData.Algo)))
                                                                                      (GHC.Types.[]
                                                                                         @ AlgData.Algo)))
                                                                           AlgData.System
                                                                           -> AlgData.Op
                                                                                AlgData.Equation
                                                                                (GHC.Types.:
                                                                                   @ AlgData.Algo
                                                                                   a
                                                                                   (GHC.Types.:
                                                                                      @ AlgData.Algo
                                                                                      (AlgData.Op
                                                                                         op
                                                                                         p)
                                                                                      (GHC.Types.[]
                                                                                         @ AlgData.Algo)))
                                                                           AlgData.Params
                                                                           -> AlgData.Op
                                                                                AlgData.Equation
                                                                                (GHC.Types.:
                                                                                   @ AlgData.Algo
                                                                                   a
                                                                                   (GHC.Types.:
                                                                                      @ AlgData.Algo
                                                                                      (AlgData.Op
                                                                                         op
                                                                                         p)
                                                                                      (GHC.Types.[]
                                                                                         @ AlgData.Algo))) } }
                                                                } in
                                                                case a of wild {
                                                                  DEFAULT -> fail GHC.Prim.void#
                                                                  AlgData.Op ds m
                                                                  -> case ds of wild1 {
                                                                       DEFAULT
                                                                       -> fail GHC.Prim.void#
                                                                       AlgData.Equation
                                                                       -> AlgData.Op
                                                                            AlgData.Simpl
                                                                            (GHC.Base.++
                                                                               @ AlgData.Algo
                                                                               m
                                                                               (GHC.Types.:
                                                                                  @ AlgData.Algo
                                                                                  (AlgData.Op
                                                                                     op
                                                                                     (GHC.Types.:
                                                                                        @ AlgData.Algo
                                                                                        b
                                                                                        (GHC.Types.[]
                                                                                           @ AlgData.Algo)))
                                                                                  (GHC.Types.[]
                                                                                     @ AlgData.Algo)))
                                                                       AlgData.Simpl
                                                                       -> AlgData.Op
                                                                            AlgData.Simpl
                                                                            (GHC.Base.++
                                                                               @ AlgData.Algo
                                                                               m
                                                                               (GHC.Types.:
                                                                                  @ AlgData.Algo
                                                                                  (AlgData.Op
                                                                                     op
                                                                                     (GHC.Types.:
                                                                                        @ AlgData.Algo
                                                                                        b
                                                                                        (GHC.Types.[]
                                                                                           @ AlgData.Algo)))
                                                                                  (GHC.Types.[]
                                                                                     @ AlgData.Algo))) } }) -}
5035f5f1ee9edb46a27bde411989e079
  stepsFromList :: [GHC.Base.String] -> [AlgData.Algo]
  {- Arity: 1, Strictness: <S,1*U> -}
87807d399b8b67857b8af97631cb81f5
  unOp :: AlgData.Ops -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m6,
     Unfolding: InlineRule (2, True, False)
                (\ (op :: AlgData.Ops) (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgParser.unOp} True True} case ds of wild {
                                                                DEFAULT
                                                                -> AlgData.Op
                                                                     op
                                                                     (GHC.Types.:
                                                                        @ AlgData.Algo
                                                                        wild
                                                                        (GHC.Types.[]
                                                                           @ AlgData.Algo))
                                                                AlgData.Op ds1 m
                                                                -> case ds1 of wild1 {
                                                                     DEFAULT
                                                                     -> AlgData.Op
                                                                          op
                                                                          (GHC.Types.:
                                                                             @ AlgData.Algo
                                                                             wild
                                                                             (GHC.Types.[]
                                                                                @ AlgData.Algo))
                                                                     AlgData.Params
                                                                     -> AlgData.Op op m } }) -}
432bd520d516602745da0d8ab4c6b8da
  xlatOps :: GHC.Base.String -> GHC.Base.String
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} True False} \ (x :: GHC.Base.String) ->
                                                                  {__scc {main@main:AlgParser.xlatOps} False True} let {
                                                                                                                     str :: GHC.Base.String
                                                                                                                     = ({__scc {main@main:AlgParser.xlatOps} False True} AlgParser.xlatOps_xlatOr)
                                                                                                                         (({__scc {main@main:AlgParser.xlatOps} False True} AlgParser.xlatOps4)
                                                                                                                            x)
                                                                                                                   } in
                                                                                                                   {__scc {main@main:AlgParser.xlatOps.xlatEquiv} True True} Text.Regex.subRegex
                                                                                                                                                                               AlgParser.xlatOps2
                                                                                                                                                                               str
                                                                                                                                                                               AlgParser.xlatOps1) -}
a0517c0098b6115d7972f321b391077b
  xlatOps1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEquiv} False True} GHC.CString.unpackCString#
                                                                                                                               "<=>"#) -}
e49a893550a8500c9d540ff092e773b9
  xlatOps2 :: Text.Regex.Posix.Wrap.Regex
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEquiv} False True} Text.Regex.mkRegex
                                                                                                                               AlgParser.xlatOps3) -}
85361383c1b043415d2b3de8825cf084
  xlatOps3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEquiv} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                               "\\226\\135\\148"#) -}
1b372c1f8a664879c6da0beee55abfe4
  xlatOps4 :: GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 ({__scc {main@main:AlgParser.xlatOps} False True} AlgParser.xlatOps_xlatAnd)
                   (({__scc {main@main:AlgParser.xlatOps} False True} AlgParser.xlatOps_xlatEmpty)
                      x)) -}
7c2a4d5a53f4b002de6886108e9b51f5
  xlatOps5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEmpty} False True} GHC.CString.unpackCString#
                                                                                                                               "{}"#) -}
bd6a4acaf17096687da160a4c48fc5b4
  xlatOps6 :: Text.Regex.Posix.Wrap.Regex
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEmpty} False True} Text.Regex.mkRegex
                                                                                                                               AlgParser.xlatOps7) -}
dd4416d5274d6743825deb2c65b47d63
  xlatOps7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatEmpty} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                               "\\226\\136\\133"#) -}
62cc2c7ed74e5e17425a0a57145f5c4d
  xlatOps8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '&'#) -}
e4c06002577b5cbdd07d44138a6fd658
  xlatOps9 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '|'#) -}
f78ba7f6a15326d5d606562b9134f293
  xlatOps_xlat :: GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 {__scc {main@main:AlgParser.xlatOps.xlatAnd.xlat} True True} case ds of wild { GHC.Types.C# ds1 ->
                                                                              case ds1 of ds2 {
                                                                                DEFAULT -> wild
                                                                                '\8743'#
                                                                                -> AlgParser.xlatOps8 } }) -}
f0ada851a1321cb39e419a87d04621ee
  xlatOps_xlat1 :: GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 {__scc {main@main:AlgParser.xlatOps.xlatOr.xlat} True True} case ds of wild { GHC.Types.C# ds1 ->
                                                                             case ds1 of ds2 {
                                                                               DEFAULT -> wild
                                                                               '\8744'#
                                                                               -> AlgParser.xlatOps9 } }) -}
d6a0fcb99b852e094ae4094d266e6a41
  xlatOps_xlatAnd :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatAnd} True True} GHC.Base.map
                                                                                                                            @ GHC.Types.Char
                                                                                                                            @ GHC.Types.Char
                                                                                                                            AlgParser.xlatOps_xlat) -}
d6c3df4bc2ffa79ffd4b91cda2f38564
  xlatOps_xlatEmpty :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (str :: GHC.Base.String) ->
                 {__scc {main@main:AlgParser.xlatOps.xlatEmpty} True True} Text.Regex.subRegex
                                                                             AlgParser.xlatOps6
                                                                             str
                                                                             AlgParser.xlatOps5) -}
d9b167bf44b63d07c81e4db59ee98cde
  xlatOps_xlatOr :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgParser.xlatOps} False True} {__scc {main@main:AlgParser.xlatOps.xlatOr} True True} GHC.Base.map
                                                                                                                           @ GHC.Types.Char
                                                                                                                           @ GHC.Types.Char
                                                                                                                           AlgParser.xlatOps_xlat1) -}
444f5db168dbead0100a1095f8e0fb2f
  ยบ :: [GHC.Types.Char] -> GHC.Base.Maybe AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgParser.ยบ} True True} AlgParser.algo) -}
instance Data.String.IsString [AlgData.Algo]
  = AlgParser.$fIsStringAlgo
instance GHC.Read.Read [AlgData.Algo] = AlgParser.$fReadAlgo
instance GHC.Show.Show [Text.Parsec.Prim.ParsecT]
  = AlgParser.$fShowParsecT
"SPEC mapNth @ Integer _" [ALWAYS] forall @ t
                                          ($dIntegral :: GHC.Real.Integral GHC.Integer.Type.Integer)
  AlgParser.mapNth @ GHC.Integer.Type.Integer @ t $dIntegral
  = AlgParser.mapNth_$smapNth @ t
"SPEC/AlgParser $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                             ($dMonad :: GHC.Base.Monad
                                                                           Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = AlgParser.$s$fStream[]mtok @ tok
"SPEC/AlgParser $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = AlgParser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/AlgParser $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = AlgParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
"SPEC/AlgParser concatMap @ [] _ _" [ALWAYS] forall @ a
                                                    @ b
                                                    ($dFoldable :: Data.Foldable.Foldable [])
  Data.Foldable.concatMap @ [] @ a @ b $dFoldable
  = AlgParser._algo_$sconcatMap @ a @ b
"SPEC/AlgParser fromList @ Char _" [ALWAYS] forall @ a
                                                   ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = AlgParser.specialCharsMap_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

