
==================== FINAL INTERFACE ====================
2016-12-12 00:14:40.764137 UTC

interface main@main:Derive [hpc] 8001
  interface hash: 1138abfb69fe7d4aac4c9ecdbc276f16
  ABI hash: 8f07829f22ca1b5d04ffe13d35f4598c
  export-list hash: 1b9ecc14bef0894f0f1a4f0e89424bac
  orphan hash: a6db3b0c5ba12c63d753df43ed5816b2
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Derive.derive
  Derive.dmat
module dependencies: AlgAux AlgData AlgNum AlgParser AlgSets [boot]
                     AlgShow Context [boot] Evid [boot] Lib.Colors Lib.Debug Lib.ISUnits
                     Lib.Noms Solver [boot] Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgParser
         main@main:AlgShow main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Data.Fixed d1989dfab155c520171e87e6f218a2f6
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Ratio bd7ae7e84fadf68e9483b9d3f1445f8c
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  <+ 74ac64e61861c5e35547bffdfaf82e5b
  algRebuild 808c3f56acb9610937b91ddc50fd898c
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  DerivedFunc 50d2bf1cc2a319fbc93fd46322560471
  Exp e6844369b86b13f0dedad0ecd6de9184
  Func 464633904860f7b8d151038b299768e1
  Mul 2f35706afddb4d148a595d106eedb7e6
  Neg 67362d85eaf7d8ee80f48cd9dd9d09b9
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Sum d5f11b74783ac2a16ec6db1a10fe0ff0
import  -/  AlgParser 92f3a827acb9a4c042748bb6c970a485
  exports: 1e3c0e2ea45406ebe59e3da15707b465
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_ANY 8e65c7fcd431375d5184c87f41f469b9
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #> 58b8e1358c534cd698b1556cfbb95273
  ? 69fb246831506ec99bb14b5161c9b2e0
22d6dbce496398370886f441f9af6f1d
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Derive.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
471f5357ab60eb825619c02243f53e81
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
604cce8267c1fd307489a6b20b13ed58
  $s$fShow[] :: GHC.Show.Show [AlgData.Algo]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [AlgData.Algo]
                  Derive.$s$fShow[]_$s$fShow[]_$cshowsPrec
                  Derive.$s$fShow[]_$s$fShow[]_$cshow
                  Derive.$s$fShow[]_$s$fShow[]_$cshowList -}
baa0d107d27185d67c728f6f8eaf01e6
  $s$fShow[]1 :: GHC.Show.Show [GHC.Base.Maybe AlgData.Algo]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Base.Maybe AlgData.Algo]
                  (GHC.Show.$fShow[]_$cshowsPrec
                     @ (GHC.Base.Maybe AlgData.Algo)
                     Derive.$s$fShow[]2)
                  (GHC.Show.$fShow[]_$cshow
                     @ (GHC.Base.Maybe AlgData.Algo)
                     Derive.$s$fShow[]2)
                  (GHC.Show.$fShow[]_$cshowList
                     @ (GHC.Base.Maybe AlgData.Algo)
                     Derive.$s$fShow[]2) -}
d9008d00dbcb0c0bc3773fc1346b880a
  $s$fShow[]2 :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Derive.$s$fShowMaybe -}
3d0ff3548b69633d5cd6ad3934667439
  $s$fShow[]_$s$fShow[]_$cshow :: [AlgData.Algo] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [AlgData.Algo]) ->
                 AlgShow.$fShowAlgo_$cshowList x (GHC.Types.[] @ GHC.Types.Char)) -}
7644f918a274d2e622d4b9f816c12ec2
  $s$fShow[]_$s$fShow[]_$cshowList ::
    [[AlgData.Algo]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [[AlgData.Algo]]) (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [AlgData.Algo]
                   AlgShow.$fShowAlgo_$cshowList
                   eta
                   eta1) -}
e8522a856d03ce889fe9960899959e9e
  $s$fShow[]_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int)
                   (eta :: [AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 AlgShow.$fShowAlgo_$cshowList eta eta1) -}
fbf9a0a130b6bc1694c6aa5af703d2b9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Derive.$trModule2
                   Derive.$trModule1) -}
8bc0096b368cda4c2fd49e59965a3bae
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Derive"#) -}
c7c7881b10a359b7de1e300abda9f28c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
804c9c12f0af573a383c70d6561abf57
  derive ::
    AlgData.Algo -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5577101728cb35f164949b8360aa3820
  dmat :: [GHC.Base.Maybe n] -> [n] -> [[n]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n (a :: [GHC.Base.Maybe n]) (b :: [n]) ->
                 {__scc {main@main:Derive.dmat} True True} Derive.dmat1
                                                             @ n
                                                             a
                                                             (GHC.Types.[] @ n)
                                                             b) -}
9550c2f8bb24ad68bece46a924e6d4a0
  dmat1 :: [GHC.Base.Maybe n] -> [n] -> [n] -> [[n]]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,1*U> -}
"SPEC/Derive $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow = Derive.$s$fShowMaybe
"SPEC/Derive $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                         AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Derive.$s$fShowMaybe_$s$fShowMaybe_$cshowList
"SPEC/Derive $fShow[] @ (Maybe Algo)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                   (GHC.Base.Maybe AlgData.Algo))
  GHC.Show.$fShow[] @ (GHC.Base.Maybe AlgData.Algo) $dShow
  = Derive.$s$fShow[]1
"SPEC/Derive $fShow[] @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           AlgData.Algo)
  GHC.Show.$fShow[] @ AlgData.Algo $dShow = Derive.$s$fShow[]
"SPEC/Derive $fShow[]_$cshow @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  AlgData.Algo)
  GHC.Show.$fShow[]_$cshow @ AlgData.Algo $dShow
  = Derive.$s$fShow[]_$s$fShow[]_$cshow
"SPEC/Derive $fShow[]_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      AlgData.Algo)
  GHC.Show.$fShow[]_$cshowList @ AlgData.Algo $dShow
  = Derive.$s$fShow[]_$s$fShow[]_$cshowList
"SPEC/Derive $fShow[]_$cshowsPrec @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       AlgData.Algo)
  GHC.Show.$fShow[]_$cshowsPrec @ AlgData.Algo $dShow
  = Derive.$s$fShow[]_$s$fShow[]_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

