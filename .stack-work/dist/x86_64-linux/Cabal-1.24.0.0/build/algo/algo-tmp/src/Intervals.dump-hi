
==================== FINAL INTERFACE ====================
2016-12-12 00:14:42.253474 UTC

interface main@main:Intervals [hpc] 8001
  interface hash: c016cf2fb94a65815286b7e0be8fe4d0
  ABI hash: 83095e626cdefe3b8e7a59fdec06f8e2
  export-list hash: ee5e6f4872d20f9fb1322ac95ef84fad
  orphan hash: 8b13bda6703b9b60d117b95ccfbe835b
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Intervals._toRange
  Intervals.fromRange
  Intervals.is
  Intervals.negInf
  Intervals.posInf
  Intervals.rangeInters
  Intervals.rangeUnion
  Intervals.toRange
  Intervals.wingMax
  Intervals.wingMin
  Intervals.wingMinMax
  Intervals.wingOrd
module dependencies: AlgAux AlgData AlgNum AlgParser AlgSets [boot]
                     AlgShow Context [boot] Evid [boot] Lib.Colors Lib.Debug Lib.ISUnits
                     Lib.Noms Rules [boot] Solver [boot] Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgParser
         main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  repVars b03047de44748ffa5694b823b9fe07fd
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  Bool 67f527cfffcc3ad2fd344285e61c737a
  ElementOf fcc71430e74c3899ad99c3301ba98051
  Equals 9500932a4069a75b430a3a44c9f0f2e7
  Equation 551a1d9fee8c2cb8da0f9aaca286e438
  Greater 4512db64871fd047ef64dd8534debcb9
  GreaterOrEqual a01ee902550a2703354b1a97ab6a3b2e
  Infinit 9666a84f86ee6e9cdb8e02658a597d56
  Less c36695b59b4e48329b7124d1706fa572
  LessOrEqual dbdbaf734cfe4774f93497dc5d2af134
  Neg 67362d85eaf7d8ee80f48cd9dd9d09b9
  Neighbor d3872eb91e1fc48b3f5f63cf95ee82a5
  NotEqual 60d0afbeee1e2fdbb3638c5c45b39a68
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Pos b08290a384a9fff859e51e6e96d36be9
  Pref 5bdc838a1ea7f62e685a4ad812e98018
  Range 8e438ad81c1a17806c0c52a93fe011d8
  RangeWing 2115629cd83e25a0656a9efbb024a9bc
  RangeWing 4d637072ad901205bf793a262f526c33
  Resol 8effdfb668f5cb607c4bd51445f565fb
  Set a6ae8efb481222e569393086741f0e5f
  Sets ad18523b421d9287ca0aae16bff820d8
  Simpl c2dd23a8d56a67aeb71c59f26e43b05d
  Union 5234cda473491e1abeb9830deb516287
  wingExpr 9705fe6f6375bbd1cb39199fb26fa4aa
  wingIncl e3db35f38bc8b5e6737ea2dbca59b879
import  -/  AlgParser 92f3a827acb9a4c042748bb6c970a485
  exports: 1e3c0e2ea45406ebe59e3da15707b465
import  -/  AlgSets 497bab0d145816bfe1f10c37b09a8ffb
  exports: a418c89a854e08fcc0f4a98e6eb0a5da
  _R 5eb652888ea9defd28e03612c137085e
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_RANGES 1ba542525b7eeb7d35284d4472ebc93a
  dInfo b92a087152f8e08b1fbae947a3f5da6f
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Rules 65c22ab50bdec46160bd2ab18821a9b3
  exports: 3891c33bd5835e807491989550afc99e
  simplify 94faa0711da19a46ff913e4e1c8c5285
import  -/  Solver e35bfc302554872ad4514c120d4f41cd
  exports: 32eca56b2140e4152941d077dea19996
  varSolved 3f91e1d41e8129bd2a9f9c02faa43acd
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  algProc f29c502b7da474ec92b691e39f092f79
  isNom 9d9b9ee80a525288ce8dd1af739e668f
  ~> 67beaaa477d3a0f58367f5d7ec8c20d4
d09b22eeee16100648367261c40f4bfa
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  Intervals.$s$fEqMaybe_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ AlgData.Algo AlgData.$fEqAlgo) -}
41a9878b8fb21f2ba890d94669bd3845
  $s$fEqMaybe_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe AlgData.Algo
    -> GHC.Base.Maybe AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe AlgData.Algo)
                   (ds1 :: GHC.Base.Maybe AlgData.Algo) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> AlgData.$fEqAlgSets_$c==2 a1 b1 } }) -}
627083a20b692ee366ea69c6bff92446
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Intervals.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
5acb660ee0b75add4ea63ef23bbac7cb
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
d52b9787f9d8f4b26259a627c95e7224
  $sfromList ::
    [(AlgData.Algo, a)] -> Data.Map.Base.Map AlgData.Algo a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(AlgData.Algo, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ AlgData.Algo @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ AlgData.Algo
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ AlgData.Algo @ a)
                             (Data.Map.Base.Tip @ AlgData.Algo @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case AlgData.$fOrdAlgo_$ccompare kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Intervals.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ AlgData.Algo
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ AlgData.Algo @ a)
                                     (Data.Map.Base.Tip @ AlgData.Algo @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Intervals.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ AlgData.Algo
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ AlgData.Algo @ a)
                                     (Data.Map.Base.Tip @ AlgData.Algo @ a))
                                  wild2 } } } } } }) -}
8763dbf1d4f708b3ef757b44628a5b51
  $sfromList1 ::
    Data.Map.Base.Map AlgData.Algo a1
    -> [(AlgData.Algo, a1)] -> Data.Map.Base.Map AlgData.Algo a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
55bc7889f20751bd64f8dda6d4b61432
  $sinsert_$sgo10 ::
    AlgData.Algo
    -> a1
    -> Data.Map.Base.Map AlgData.Algo a1
    -> Data.Map.Base.Map AlgData.Algo a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
07e988a854260b141e93754fa1edcdf7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Intervals.$trModule2
                   Intervals.$trModule1) -}
29ded600402ab574d078a66f092fcf2c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Intervals"#) -}
34263ca086fa71a6a225f421d786371b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7b524bb7e61a7114fb04e5df9fa4efc4
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map AlgData.Algo a
    -> [(AlgData.Algo, a)]
    -> Data.Map.Base.Map AlgData.Algo a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
93f5f598c21d1a7332584cf84a048ec7
  $wwingMinMax ::
    GHC.Types.Ordering
    -> GHC.Types.Bool
    -> AlgData.Algo
    -> GHC.Types.Bool
    -> AlgData.Algo
    -> GHC.Base.Maybe AlgData.RangeWing
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Ordering)
                   (ww :: GHC.Types.Bool)
                   (ww1 :: AlgData.Algo)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: AlgData.Algo) ->
                 let {
                   b :: AlgData.RangeWing = AlgData.RangeWing ww2 ww3
                 } in
                 let {
                   a :: AlgData.RangeWing = AlgData.RangeWing ww ww1
                 } in
                 {__scc {main@main:Intervals.wingMinMax} True True} case {__scc {main@main:Intervals.wingMinMax.o} True True} Intervals.$wwingOrd
                                                                                                                                ww
                                                                                                                                ww1
                                                                                                                                ww2
                                                                                                                                ww3 of wild {
                                                                      GHC.Base.Nothing
                                                                      -> GHC.Base.Nothing
                                                                           @ AlgData.RangeWing
                                                                      GHC.Base.Just a1
                                                                      -> case a1 of wild1 {
                                                                           GHC.Types.LT
                                                                           -> case w of wild2 {
                                                                                DEFAULT
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     a
                                                                                GHC.Types.LT
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     b }
                                                                           GHC.Types.EQ
                                                                           -> case w of wild2 {
                                                                                DEFAULT
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     a
                                                                                GHC.Types.EQ
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     b }
                                                                           GHC.Types.GT
                                                                           -> case w of wild2 {
                                                                                DEFAULT
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     a
                                                                                GHC.Types.GT
                                                                                -> GHC.Base.Just
                                                                                     @ AlgData.RangeWing
                                                                                     b } } }) -}
589a66cd4d96ddf952a55c1c3f5b0bc9
  $wwingOrd ::
    GHC.Types.Bool
    -> AlgData.Algo
    -> GHC.Types.Bool
    -> AlgData.Algo
    -> GHC.Base.Maybe GHC.Types.Ordering
  {- Arity: 4, Strictness: <L,1*U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: AlgData.Algo)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: AlgData.Algo) ->
                 {__scc {main@main:Intervals.wingOrd} True True} case {__scc {main@main:Intervals.is} True True} AlgData.$fEqAlgSets_$c==2
                                                                                                                   (Solver.varSolved
                                                                                                                      (AlgData.Op
                                                                                                                         AlgData.Equation
                                                                                                                         (GHC.Types.:
                                                                                                                            @ AlgData.Algo
                                                                                                                            ww1
                                                                                                                            (GHC.Types.:
                                                                                                                               @ AlgData.Algo
                                                                                                                               (AlgData.Op
                                                                                                                                  AlgData.Equals
                                                                                                                                  (GHC.Types.:
                                                                                                                                     @ AlgData.Algo
                                                                                                                                     ww3
                                                                                                                                     (GHC.Types.[]
                                                                                                                                        @ AlgData.Algo)))
                                                                                                                               (GHC.Types.[]
                                                                                                                                  @ AlgData.Algo)))))
                                                                                                                   Intervals.is1 of wild {
                                                                   GHC.Types.False
                                                                   -> case {__scc {main@main:Intervals.is} True True} AlgData.$fEqAlgSets_$c==2
                                                                                                                        (Solver.varSolved
                                                                                                                           (AlgData.Op
                                                                                                                              AlgData.Equation
                                                                                                                              (GHC.Types.:
                                                                                                                                 @ AlgData.Algo
                                                                                                                                 ww1
                                                                                                                                 (GHC.Types.:
                                                                                                                                    @ AlgData.Algo
                                                                                                                                    (AlgData.Op
                                                                                                                                       AlgData.Less
                                                                                                                                       (GHC.Types.:
                                                                                                                                          @ AlgData.Algo
                                                                                                                                          ww3
                                                                                                                                          (GHC.Types.[]
                                                                                                                                             @ AlgData.Algo)))
                                                                                                                                    (GHC.Types.[]
                                                                                                                                       @ AlgData.Algo)))))
                                                                                                                        Intervals.is1 of wild1 {
                                                                        GHC.Types.False
                                                                        -> case {__scc {main@main:Intervals.is} True True} AlgData.$fEqAlgSets_$c==2
                                                                                                                             (Solver.varSolved
                                                                                                                                (AlgData.Op
                                                                                                                                   AlgData.Equation
                                                                                                                                   (GHC.Types.:
                                                                                                                                      @ AlgData.Algo
                                                                                                                                      ww1
                                                                                                                                      (GHC.Types.:
                                                                                                                                         @ AlgData.Algo
                                                                                                                                         (AlgData.Op
                                                                                                                                            AlgData.Greater
                                                                                                                                            (GHC.Types.:
                                                                                                                                               @ AlgData.Algo
                                                                                                                                               ww3
                                                                                                                                               (GHC.Types.[]
                                                                                                                                                  @ AlgData.Algo)))
                                                                                                                                         (GHC.Types.[]
                                                                                                                                            @ AlgData.Algo)))))
                                                                                                                             Intervals.is1 of wild2 {
                                                                             GHC.Types.False
                                                                             -> GHC.Base.Nothing
                                                                                  @ GHC.Types.Ordering
                                                                             GHC.Types.True
                                                                             -> Intervals.wingOrd2 }
                                                                        GHC.Types.True
                                                                        -> Intervals.wingOrd1 }
                                                                   GHC.Types.True
                                                                   -> GHC.Base.Just
                                                                        @ GHC.Types.Ordering
                                                                        (case ww of wild1 {
                                                                           GHC.Types.False
                                                                           -> case ww2 of wild2 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.EQ
                                                                                GHC.Types.True
                                                                                -> GHC.Types.LT }
                                                                           GHC.Types.True
                                                                           -> case ww2 of wild2 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.GT
                                                                                GHC.Types.True
                                                                                -> GHC.Types.EQ } }) }) -}
4181f89e5350f6dc05abdc7534b87d24
  _toRange :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
36722c411733a002c4810e855d53064d
  fromRange :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
5871de4c8fd1848815638f056400a05d
  is :: AlgData.Ops -> AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (op :: AlgData.Ops) (a :: AlgData.Algo) (b :: AlgData.Algo) ->
                 {__scc {main@main:Intervals.is} True True} AlgData.$fEqAlgSets_$c==2
                                                              (Solver.varSolved
                                                                 (AlgData.Op
                                                                    AlgData.Equation
                                                                    (GHC.Types.:
                                                                       @ AlgData.Algo
                                                                       a
                                                                       (GHC.Types.:
                                                                          @ AlgData.Algo
                                                                          (AlgData.Op
                                                                             op
                                                                             (GHC.Types.:
                                                                                @ AlgData.Algo
                                                                                b
                                                                                (GHC.Types.[]
                                                                                   @ AlgData.Algo)))
                                                                          (GHC.Types.[]
                                                                             @ AlgData.Algo)))))
                                                              Intervals.is1) -}
b08c61293da9a118529a8b8e0d0fc037
  is1 :: AlgData.Algo
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (AlgData.Bool GHC.Types.True) -}
b158b9112fea1a0dfd5b5ba38fa6605e
  negInf :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Intervals.negInf} True False} AlgData.Op
                                                                   AlgData.Neg
                                                                   Intervals.negInf1) -}
68482533b176c5e5b727bffad7bca778
  negInf1 :: [AlgData.Algo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   AlgData.Infinit
                   (GHC.Types.[] @ AlgData.Algo)) -}
28cc3758199b27079468c5737388c1ef
  posInf :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Intervals.posInf} True False} AlgData.Op
                                                                   AlgData.Pos
                                                                   Intervals.negInf1) -}
4ee4fb99685bdc80e666ccf3994d68ec
  rangeInters ::
    AlgData.Algo -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <S,U><L,U> -}
ec2ad44cdbe060e1b40631b2e3ff77d8
  rangeUnion ::
    AlgData.Algo -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <S,U><L,U> -}
4b359a6e1769eb38d1980de09cecfe45
  toRange :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
9b15fc4c3927142fc24c443f1171eb6a
  wingMax ::
    AlgData.RangeWing
    -> AlgData.RangeWing -> GHC.Base.Maybe AlgData.RangeWing
  {- Unfolding: ({__scc {main@main:Intervals.wingMax} True False} \ (a :: AlgData.RangeWing)
                                                                    (b :: AlgData.RangeWing) ->
                                                                  {__scc {main@main:Intervals.wingMax} False True} {__scc {main@main:Intervals.wingMinMax} True True} case {__scc {main@main:Intervals.wingMinMax.o} True True} Intervals.wingOrd
                                                                                                                                                                                                                                  a
                                                                                                                                                                                                                                  b of wild {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> GHC.Base.Nothing
                                                                                                                                                                             @ AlgData.RangeWing
                                                                                                                                                                        GHC.Base.Just a1
                                                                                                                                                                        -> case a1 of wild1 {
                                                                                                                                                                             GHC.Types.LT
                                                                                                                                                                             -> GHC.Base.Just
                                                                                                                                                                                  @ AlgData.RangeWing
                                                                                                                                                                                  b
                                                                                                                                                                             GHC.Types.EQ
                                                                                                                                                                             -> GHC.Base.Just
                                                                                                                                                                                  @ AlgData.RangeWing
                                                                                                                                                                                  a
                                                                                                                                                                             GHC.Types.GT
                                                                                                                                                                             -> GHC.Base.Just
                                                                                                                                                                                  @ AlgData.RangeWing
                                                                                                                                                                                  a } }) -}
385653248caad47f99110a1112806741
  wingMin ::
    AlgData.RangeWing
    -> AlgData.RangeWing -> GHC.Base.Maybe AlgData.RangeWing
  {- Unfolding: ({__scc {main@main:Intervals.wingMin} True False} \ (a :: AlgData.RangeWing)
                                                                    (b :: AlgData.RangeWing) ->
                                                                  {__scc {main@main:Intervals.wingMin} False True} {__scc {main@main:Intervals.wingMinMax} True True} case {__scc {main@main:Intervals.wingMinMax.o} True True} Intervals.wingOrd
                                                                                                                                                                                                                                  a
                                                                                                                                                                                                                                  b of wild {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> GHC.Base.Nothing
                                                                                                                                                                             @ AlgData.RangeWing
                                                                                                                                                                        GHC.Base.Just a1
                                                                                                                                                                        -> case a1 of wild1 {
                                                                                                                                                                             DEFAULT
                                                                                                                                                                             -> GHC.Base.Just
                                                                                                                                                                                  @ AlgData.RangeWing
                                                                                                                                                                                  a
                                                                                                                                                                             GHC.Types.GT
                                                                                                                                                                             -> GHC.Base.Just
                                                                                                                                                                                  @ AlgData.RangeWing
                                                                                                                                                                                  b } }) -}
4d8576b315ad03555cf9cc0b782e35ba
  wingMinMax ::
    GHC.Types.Ordering
    -> AlgData.RangeWing
    -> AlgData.RangeWing
    -> GHC.Base.Maybe AlgData.RangeWing
  {- Arity: 3, Strictness: <L,1*U><S,U(U,U)><S,U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Ordering)
                   (w1 :: AlgData.RangeWing)
                   (w2 :: AlgData.RangeWing) ->
                 case w1 of ww { AlgData.RangeWing ww1 ww2 ->
                 case w2 of ww3 { AlgData.RangeWing ww4 ww5 ->
                 Intervals.$wwingMinMax w ww1 ww2 ww4 ww5 } }) -}
8047593cb07c38e1b8dd04661baf776a
  wingOrd ::
    AlgData.RangeWing
    -> AlgData.RangeWing -> GHC.Base.Maybe GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(1*U,U)><S,1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.RangeWing) (w1 :: AlgData.RangeWing) ->
                 case w of ww { AlgData.RangeWing ww1 ww2 ->
                 case w1 of ww3 { AlgData.RangeWing ww4 ww5 ->
                 Intervals.$wwingOrd ww1 ww2 ww4 ww5 } }) -}
42e758e9abcd364412cbd56d72a1ef9f
  wingOrd1 :: GHC.Base.Maybe GHC.Types.Ordering
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Ordering GHC.Types.LT) -}
b14ebe43a95661d3a376452083ab78f9
  wingOrd2 :: GHC.Base.Maybe GHC.Types.Ordering
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Ordering GHC.Types.GT) -}
"SPEC/Intervals $fEqMaybe @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             AlgData.Algo)
  GHC.Base.$fEqMaybe @ AlgData.Algo $dEq = Intervals.$s$fEqMaybe
"SPEC/Intervals $fEqMaybe_$c== @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  AlgData.Algo)
  GHC.Base.$fEqMaybe_$c== @ AlgData.Algo $dEq
  = Intervals.$s$fEqMaybe_$s$fEqMaybe_$c==
"SPEC/Intervals $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow
  = Intervals.$s$fShowMaybe
"SPEC/Intervals $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                            AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Intervals.$s$fShowMaybe_$s$fShowMaybe_$cshowList
"SPEC/Intervals fromList @ Algo _" [ALWAYS] forall @ a
                                                   ($dOrd :: GHC.Classes.Ord AlgData.Algo)
  Data.Map.Base.fromList @ AlgData.Algo @ a $dOrd
  = Intervals.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

