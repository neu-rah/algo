
==================== FINAL INTERFACE ====================
2016-12-12 00:14:55.001723 UTC

interface main@main:Neighbor [hpc] 8001
  interface hash: 88dce7378e14709a84c7802d83716522
  ABI hash: 82eae1a0f7675f417bf8e26a74afd49c
  export-list hash: 994967eb7d698b4c451938efbd586f00
  orphan hash: 387299392ffeae853d9e8cedc40cb5de
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Neighbor._mkNeighbor
  Neighbor._neighbourMove
  Neighbor.distribIn
  Neighbor.fromNeighbor
  Neighbor.invNeigh
  Neighbor.ldistrib
  Neighbor.mkNeighbor
  Neighbor.neighbourMove
  Neighbor.neighbourRelat
  Neighbor.rdistrib
module dependencies: AlgAux AlgData AlgNum AlgParser AlgSets [boot]
                     AlgShow Calc Context [boot] Evid [boot] Intervals Lib.Colors
                     Lib.Debug Lib.ISUnits Lib.Noms Rules [boot] Sample Solver [boot]
                     Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  <+ 74ac64e61861c5e35547bffdfaf82e5b
  algRebuild 808c3f56acb9610937b91ddc50fd898c
  hasNeighbor 0b135267f812dbf217da7b258e96f041
  isNeighbor b08cbc711693e3bd96a1ad59995e7885
  rebuild 68c8e7921c08b0005008c267fd2f2452
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  And 5d24d8c844bd2a97c85e63b7abcbb24f
  Div 775b00476d70cc8a25f3cca491cc087c
  Equals 9500932a4069a75b430a3a44c9f0f2e7
  Equation 551a1d9fee8c2cb8da0f9aaca286e438
  Mul 2f35706afddb4d148a595d106eedb7e6
  Neighbor d3872eb91e1fc48b3f5f63cf95ee82a5
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Resol 8effdfb668f5cb607c4bd51445f565fb
  Simpl c2dd23a8d56a67aeb71c59f26e43b05d
  canComut 9336e5ce1b06bb33ba2abdaf4a0173cb
  equatOps 24149df67c5148a043074cf3bc329ffd
  inverse b0b6d117b76fb60e22c041fcc08475fa
  neighbourExpr 31d5fa9207ea604a10cdc071e1e32fda
  resolSteps e6d89533f628878f7da1e0f17dbec795
import  -/  Calc 9118e33b3ee020f4d62b8161b6bc016d
  exports: c22777f833144e9b6018d344cb957367
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_NEIGH 454383f9378f8c0d6f61ab3d24a4580f
  dInfo b92a087152f8e08b1fbae947a3f5da6f
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Solver e35bfc302554872ad4514c120d4f41cd
  exports: 32eca56b2140e4152941d077dea19996
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #= c726cdd588c1bab42d70cffbda697ac7
  #> 58b8e1358c534cd698b1556cfbb95273
  ? 69fb246831506ec99bb14b5161c9b2e0
  algElement 63f484e2ccb87dff14a42794bbb18ef7
  hasOp 920b2c24d840d28b30b54ea7f731106e
  isOp 2220696462435708854d3dec225b0bdd
  ok 3861b4d7f0d7b7d312a010526a83efc5
  ~> 67beaaa477d3a0f58367f5d7ec8c20d4
a960028cf6dd13a279d083e4636d08da
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  Neighbor.$s$fEqMaybe_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ AlgData.Algo AlgData.$fEqAlgo) -}
6c501cf590ece4f2354f5b87aee98d2a
  $s$fEqMaybe_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe AlgData.Algo
    -> GHC.Base.Maybe AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe AlgData.Algo)
                   (ds1 :: GHC.Base.Maybe AlgData.Algo) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> AlgData.$fEqAlgSets_$c==2 a1 b1 } }) -}
a7ac473df26b3a866d5e4ffe577485dd
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Neighbor.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
d50ca0964d13563717d351b625ff96f2
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
568413e536def91078d191464936de15
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Neighbor.$trModule2
                   Neighbor.$trModule1) -}
9ff54af8ec4544a7cbce38021cfbbc1e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Neighbor"#) -}
6759cdbfe74c911fcd369626a74fcb8c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
e2c900ac00725050f4b1fb039922c12a
  _mkNeighbor :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:Neighbor._mkNeighbor} True True} case ds of wild {
                                                                      DEFAULT
                                                                      -> Neighbor._mkNeighbor1
                                                                      AlgData.Op op ds1
                                                                      -> case ds1 of wild1 {
                                                                           []
                                                                           -> Neighbor._mkNeighbor1
                                                                           : o ds2
                                                                           -> case ds2 of wild2 {
                                                                                []
                                                                                -> case GHC.List.elem
                                                                                          @ AlgData.Ops
                                                                                          AlgData.$fEqOps
                                                                                          op
                                                                                          AlgData.equatOps of wild3 {
                                                                                     GHC.Types.False
                                                                                     -> GHC.Base.Nothing
                                                                                          @ AlgData.Algo
                                                                                     GHC.Types.True
                                                                                     -> GHC.Base.Just
                                                                                          @ AlgData.Algo
                                                                                          (AlgData.Neighbor
                                                                                             op
                                                                                             o) }
                                                                                : ipv ipv1
                                                                                -> Neighbor._mkNeighbor1 } } }) -}
24bd080fe2cb13c867c9a31b169de545
  _mkNeighbor1 :: GHC.Base.Maybe AlgData.Algo
  {- Strictness: x -}
9b73550f0dbc75332f4df484a6a067a0
  _neighbourMove :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
3aa27bae02f26a2ca1f984ca25c9f626
  distribIn :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
66fe16aa41c2a67aa46fe0ab76ff84e4
  fromNeighbor :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>m6, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: AlgData.Algo) ->
                 {__scc {main@main:Neighbor.fromNeighbor} True False} case w of wild {
                                                                        DEFAULT
                                                                        -> {__scc {main@main:Neighbor.fromNeighbor} False True} Neighbor.fromNeighbor1
                                                                                                                                  wild
                                                                        AlgData.Neighbor op v
                                                                        -> AlgData.Op
                                                                             op
                                                                             (GHC.Types.:
                                                                                @ AlgData.Algo
                                                                                v
                                                                                (GHC.Types.[]
                                                                                   @ AlgData.Algo)) }) -}
107086db14818a60fa2a66b934c8a0f9
  fromNeighbor1 :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <L,U>x -}
dc2fc4a398428e5865767e334789aaa0
  invNeigh :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>m16,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:Neighbor.invNeigh} True True} case ds of wild {
                                                                   DEFAULT
                                                                   -> Neighbor.invNeigh1 wild
                                                                   AlgData.Neighbor op v
                                                                   -> AlgData.Neighbor
                                                                        (AlgData.inverse op)
                                                                        v }) -}
1e8bbd276ed80fde01eb7805d3a99008
  invNeigh1 :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <B,1*U>x -}
86616efd688236526d09747e03cb50ce
  ldistrib :: t -> [t] -> [[t]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
148fd6a1a838be2a10e5208191bd61d2
  mkNeighbor :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (e :: AlgData.Algo) ->
                 {__scc {main@main:Neighbor.mkNeighbor} True True} case e of wild {
                                                                     DEFAULT
                                                                     -> GHC.Base.Nothing
                                                                          @ AlgData.Algo
                                                                     AlgData.Op op ds
                                                                     -> case ds of wild1 {
                                                                          []
                                                                          -> GHC.Base.Nothing
                                                                               @ AlgData.Algo
                                                                          : ds1 ds2
                                                                          -> case ds1 of wild2 {
                                                                               DEFAULT
                                                                               -> case ds2 of wild3 {
                                                                                    []
                                                                                    -> {__scc {main@main:Utils.algElement} True False} Neighbor._mkNeighbor
                                                                                                                                         wild
                                                                                    : ipv ipv1
                                                                                    -> GHC.Base.Nothing
                                                                                         @ AlgData.Algo }
                                                                               AlgData.Op ds3 ds4
                                                                               -> case ds2 of wild3 {
                                                                                    []
                                                                                    -> Neighbor._mkNeighbor
                                                                                         wild
                                                                                    : ipv ipv1
                                                                                    -> GHC.Base.Nothing
                                                                                         @ AlgData.Algo } } } }) -}
86324962139d5820569febc39b7aff54
  neighbourMove :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Neighbor.neighbourMove} True True} let {
                                                                        a1 :: GHC.Base.Maybe
                                                                                AlgData.Algo
                                                                        = GHC.Base.Just
                                                                            @ AlgData.Algo
                                                                            o
                                                                      } in
                                                                      {__scc {main@main:Utils.~>} True True} case {__scc {main@main:Utils.·>} True True} Utils.proc
                                                                                                                                                           @ GHC.Base.Maybe
                                                                                                                                                           @ AlgData.Algo
                                                                                                                                                           GHC.Base.$fMonadMaybe
                                                                                                                                                           Neighbor.$s$fEqMaybe
                                                                                                                                                           GHC.Base.$fAlternativeMaybe
                                                                                                                                                           Neighbor._neighbourMove
                                                                                                                                                           o of wild {
                                                                                                               GHC.Base.Nothing
                                                                                                               -> a1
                                                                                                               GHC.Base.Just ipv
                                                                                                               -> wild }) -}
a2bdc708f495fc9f27ccdaed614dc056
  neighbourRelat :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
feb3bc6d5c38d75fb081954d7b6e18c9
  rdistrib :: t -> [t] -> [[t]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
"SPEC/Neighbor $fEqMaybe @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            AlgData.Algo)
  GHC.Base.$fEqMaybe @ AlgData.Algo $dEq = Neighbor.$s$fEqMaybe
"SPEC/Neighbor $fEqMaybe_$c== @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                 AlgData.Algo)
  GHC.Base.$fEqMaybe_$c== @ AlgData.Algo $dEq
  = Neighbor.$s$fEqMaybe_$s$fEqMaybe_$c==
"SPEC/Neighbor $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow = Neighbor.$s$fShowMaybe
"SPEC/Neighbor $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                           AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Neighbor.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

