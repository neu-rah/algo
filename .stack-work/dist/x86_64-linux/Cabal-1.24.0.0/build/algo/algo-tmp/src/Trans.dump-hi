
==================== FINAL INTERFACE ====================
2016-12-12 00:15:14.648731 UTC

interface main@main:Trans [hpc] 8001
  interface hash: de8877756482f4c38cde8035c7609359
  ABI hash: 05748e28f217fcc81b7952c9c425ecc0
  export-list hash: 57190290814adb8677aa482be04ae006
  orphan hash: 02c5ef4d071dd1001ea3d155d0a9d5f1
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Trans.trans
  Trans.useVars
module dependencies: AlgAux AlgData AlgNum AlgParser AlgSets [boot]
                     AlgShow Calc Context Derive Evid [boot] Intervals Lib.Colors
                     Lib.Debug Lib.ISUnits Lib.Noms Neighbor Rules [boot] Sample
                     Solver [boot] Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgParser
         main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  <+ 74ac64e61861c5e35547bffdfaf82e5b
  algRebuild 808c3f56acb9610937b91ddc50fd898c
  plex 495a2b2a68969a340d4b001e6b96b602
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  Ctx 4d637072ad901205bf793a262f526c33
  Document 300b94279054e268cbaddbf88cd55282
  Equation 551a1d9fee8c2cb8da0f9aaca286e438
  Lit 11c3a155764287bafe570d1de382257a
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Resol 8effdfb668f5cb607c4bd51445f565fb
  Simpl c2dd23a8d56a67aeb71c59f26e43b05d
  Und ae1870307e7dc3a94128d7dfda7cf0f8
import  -/  Context 83c9cf53459dd0cc32aa6da943957421
  exports: 21153040397191ce6298f9ca97a37e24
  chkAssign d075117bac2fd215496411ac14320d8f
  useCtx b6666dd3ad77e2a4f7929f7a35fbc752
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_CTX 15f84637acb3780328b0daa2a4a2221e
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #> 58b8e1358c534cd698b1556cfbb95273
  emptyCtx 98a5740122b9b5d1bf005bd76eee3b56
  ok 3861b4d7f0d7b7d312a010526a83efc5
0403c22a44ac3a1c1a453775cc4564cc
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Trans.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
ed41a9a6dbf6402960ecfce71ed52d28
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
30ae2a4e16d32074d98873991d7fcda8
  $slookup1 ::
    AlgData.Algo
    -> Data.Map.Base.Map AlgData.Algo a -> GHC.Base.Maybe a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
605faebc7aecbe8aa07f25c9fe868a91
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Trans.$trModule2 Trans.$trModule1) -}
505e118968c28f2e72c632b0e9d6482f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trans"#) -}
b62e0ebbd7ee065ab301f847fc208c01
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
368b0bf9b01ef07707b649db7eed395a
  trans :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Trans.trans} True True} let {
                                                             fail :: GHC.Prim.Void#
                                                                     -> GHC.Base.Maybe AlgData.Algo
                                                               {- Arity: 1, Strictness: <L,A> -}
                                                             = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                                                               Lib.Debug.$w←
                                                                 @ (GHC.Base.Maybe AlgData.Algo)
                                                                 Trans.$s$fShowMaybe
                                                                 Lib.Debug.D_CTX
                                                                 (GHC.CString.unpackAppendCString#
                                                                    "trans "#
                                                                    (GHC.Base.++
                                                                       @ GHC.Types.Char
                                                                       (AlgShow.$fShowAlgSets_$cshow1
                                                                          o)
                                                                       Trans.trans1))
                                                                 (case {__scc {main@main:Trans.trans.vars} True True} {__scc {main@main:Context.chkAssign} True False} GHC.Base.Just
                                                                                                                                                                         @ AlgData.Ctx
                                                                                                                                                                         ({__scc {main@main:Context.chkAssign} False True} Context.getDefs'
                                                                                                                                                                                                                             (Data.Map.Base.Tip
                                                                                                                                                                                                                                @ AlgData.Algo
                                                                                                                                                                                                                                @ AlgData.Algo)
                                                                                                                                                                                                                             o) of wild {
                                                                    GHC.Base.Nothing
                                                                    -> GHC.Base.Nothing
                                                                         @ AlgData.Algo
                                                                    GHC.Base.Just x
                                                                    -> Trans.useVars x o })
                                                           } in
                                                           case o of wild {
                                                             DEFAULT -> fail GHC.Prim.void#
                                                             AlgData.Op ds m
                                                             -> case ds of wild1 {
                                                                  DEFAULT -> fail GHC.Prim.void#
                                                                  AlgData.Document
                                                                  -> case {__scc {main@main:Trans.trans.vars} True True} {__scc {main@main:Context.chkAssign} True False} GHC.Base.Just
                                                                                                                                                                            @ AlgData.Ctx
                                                                                                                                                                            ({__scc {main@main:Context.chkAssign} False True} Context.getDefs'
                                                                                                                                                                                                                                (Data.Map.Base.Tip
                                                                                                                                                                                                                                   @ AlgData.Algo
                                                                                                                                                                                                                                   @ AlgData.Algo)
                                                                                                                                                                                                                                wild) of wild2 {
                                                                       GHC.Base.Nothing
                                                                       -> GHC.Base.Nothing
                                                                            @ AlgData.Algo
                                                                       GHC.Base.Just ipv
                                                                       -> GHC.Base.Just
                                                                            @ AlgData.Algo
                                                                            (AlgData.Op
                                                                               AlgData.Document
                                                                               (let {
                                                                                  v :: AlgData.Ctx
                                                                                  = {__scc {main@main:Trans.trans.(...)} True False} {__scc {main@main:Trans.trans.v} True False} ipv
                                                                                } in
                                                                                Trans.trans_go
                                                                                  ({__scc {main@main:Trans.trans.r} True True} GHC.Base.map
                                                                                                                                 @ AlgData.Algo
                                                                                                                                 @ (GHC.Base.Maybe
                                                                                                                                      AlgData.Algo)
                                                                                                                                 (Context.useCtx
                                                                                                                                    v)
                                                                                                                                 m)
                                                                                  m)) } } }) -}
3298c2905641b04c1a05f6b5851c6985
  trans1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Trans.trans} False True} GHC.CString.unpackCString#
                                                              ": "#) -}
960f9572ef73647c0120edbaac6d36f5
  trans_go ::
    [GHC.Base.Maybe AlgData.Algo] -> [AlgData.Algo] -> [AlgData.Algo]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
ee06369e40e785375b0cee72c874510a
  useVars ::
    AlgData.Ctx -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
"SPEC/Trans $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow = Trans.$s$fShowMaybe
"SPEC/Trans $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                        AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Trans.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

