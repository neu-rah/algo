
==================== FINAL INTERFACE ====================
2016-12-12 00:14:53.750497 UTC

interface main@main:Calc [hpc] 8001
  interface hash: f6e41c24a17f684c982aac4ffeebd67f
  ABI hash: 9118e33b3ee020f4d62b8161b6bc016d
  export-list hash: c22777f833144e9b6018d344cb957367
  orphan hash: 0712b925c20594fc8ada39eacd924772
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Calc._calc
  Calc.calc
  Calc.chkLeftWing
  Calc.chkRightWing
  Calc.comutCalc
  Calc.comutCalc'
  Calc.linearCalc
module dependencies: AlgAux AlgData AlgNum AlgParser AlgSets [boot]
                     AlgShow Context [boot] Evid [boot] Intervals Lib.Colors Lib.Debug
                     Lib.ISUnits Lib.Noms Rules [boot] Sample Solver [boot] Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ratio bd7ae7e84fadf68e9483b9d3f1445f8c
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  conclusion f9ca210ae6862448cf2e6b369282b471
  rebuild 68c8e7921c08b0005008c267fd2f2452
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  AlgSet c279f8ccf2534d6117c5ff3f5836fb90
  Algo 4d637072ad901205bf793a262f526c33
  And 5d24d8c844bd2a97c85e63b7abcbb24f
  Bool 67f527cfffcc3ad2fd344285e61c737a
  ElementOf fcc71430e74c3899ad99c3301ba98051
  Equation 551a1d9fee8c2cb8da0f9aaca286e438
  Floor b793e78fac6a98cf0909d2a13675d4b5
  Greater 4512db64871fd047ef64dd8534debcb9
  GreaterOrEqual a01ee902550a2703354b1a97ab6a3b2e
  Infinit 9666a84f86ee6e9cdb8e02658a597d56
  Intersect 1bd339fb9bda5755a1a75cc848589700
  Less c36695b59b4e48329b7124d1706fa572
  LessOrEqual dbdbaf734cfe4774f93497dc5d2af134
  List a491851cc569fc9864b8c7e1b6f6d617
  Mul 2f35706afddb4d148a595d106eedb7e6
  Neg 67362d85eaf7d8ee80f48cd9dd9d09b9
  Nom 95d978c8cc5eb26be29a90158f860ad8
  NotElementOf 04db0c303219c1a17b294cd68fb48dde
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Ops 4d4ded7a73ed5a4c8b83cf0bae613d27
  Params f043d598866a816d6d2bad93df3e2d5e
  Pos b08290a384a9fff859e51e6e96d36be9
  Range 8e438ad81c1a17806c0c52a93fe011d8
  RangeWing 2115629cd83e25a0656a9efbb024a9bc
  RangeWing 4d637072ad901205bf793a262f526c33
  Set a6ae8efb481222e569393086741f0e5f
  Sets ad18523b421d9287ca0aae16bff820d8
  Sub aaf2da6bfff58a4523858f58c32df4b3
  SuchThat 655c0f92ad2a71ee3007923c84b1d621
  Sum d5f11b74783ac2a16ec6db1a10fe0ff0
  Union 5234cda473491e1abeb9830deb516287
  canComut 9336e5ce1b06bb33ba2abdaf4a0173cb
  partialCalc ddb33f73698bf15123c59568e5def0ee
import  -/  AlgSets 497bab0d145816bfe1f10c37b09a8ffb
  exports: a418c89a854e08fcc0f4a98e6eb0a5da
  _N f58a4da4615b9fa278f90d6cc720fc99
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_CALC 4b293de6c8beef48f64641fbef856fc7
  D_SETS 526a28b1d03d4591424abb8dafa3ebf6
  dInfo b92a087152f8e08b1fbae947a3f5da6f
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Lib.Noms 2d56e88a289ad37b00090ddb7a06fc81
  exports: 8a9b0085f320a4deb44ddea66e85019e
  NrRatio c5c6d48e6611c93db826c6f43b36a153
  NrReal 05af66b1a6c879b20489fc53a8f8da62
import  -/  Sample 2763d59fbe38144852d6aa8e1dbbc2f7
  exports: a3daa5f6df08ebc04b10ca14b6275347
  sample 87d293099c933d8c8444042ab63aad92
import  -/  Solver e35bfc302554872ad4514c120d4f41cd
  exports: 32eca56b2140e4152941d077dea19996
  _solved d494135d14c4e620dd76fb9b19500715
  solved 95cf717e5879c2a58a3b5957d0649ab2
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #= c726cdd588c1bab42d70cffbda697ac7
  #> 58b8e1358c534cd698b1556cfbb95273
  chkQuant 04ed86859b5bc3a9091e050fcd568c1d
  emptyCtx 98a5740122b9b5d1bf005bd76eee3b56
  getOp 20e4e90d60d9c0f7aaf3549675e6310d
  isOp 2220696462435708854d3dec225b0bdd
  literals b692d27f2ce06b9e3e12238f389bd76c
  membersOf 5e4f26caffa4dc04d7b305bdbbd4f01e
  ok 3861b4d7f0d7b7d312a010526a83efc5
import  -/  numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj:Data.Number.CReal 1a55b0320066e0e2ba4dc64187eb0074
dcb52b5485375e485bdfa027c448e8b2
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Calc.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
fdc8fe29204cc9ea060f07453b940d95
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
f7b0d70fde9ebece51b83b0ee684a2c8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Calc.$trModule2 Calc.$trModule1) -}
67e3e809d3acc376a5ae1c96ab7eac7d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Calc"#) -}
6efea4edb8d66c7c5d18dfc52ae7b542
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d1eb7afdc0e2a973e38b1bc720fbd830
  _calc :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
a17ec7ad1200d77c09274ef812616b7d
  calc :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Calc.calc} True True} Calc._calc
                                                           (AlgAux.conclusion o)) -}
01d5dd6a1c614c1e9178a1f5168b3cf2
  chkLeftWing :: AlgData.Algo -> AlgData.RangeWing -> AlgData.Algo
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(1*U,U)>m6,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Algo) (w1 :: AlgData.RangeWing) ->
                 case w1 of ww { AlgData.RangeWing ww1 ww2 ->
                 {__scc {main@main:Calc.chkLeftWing} True False} case ww1 of wild {
                                                                   GHC.Types.False
                                                                   -> AlgData.Op
                                                                        AlgData.Equation
                                                                        (GHC.Types.:
                                                                           @ AlgData.Algo
                                                                           w
                                                                           (GHC.Types.:
                                                                              @ AlgData.Algo
                                                                              (AlgData.Op
                                                                                 AlgData.Greater
                                                                                 (GHC.Types.:
                                                                                    @ AlgData.Algo
                                                                                    ww2
                                                                                    (GHC.Types.[]
                                                                                       @ AlgData.Algo)))
                                                                              (GHC.Types.[]
                                                                                 @ AlgData.Algo)))
                                                                   GHC.Types.True
                                                                   -> AlgData.Op
                                                                        AlgData.Equation
                                                                        (GHC.Types.:
                                                                           @ AlgData.Algo
                                                                           w
                                                                           (GHC.Types.:
                                                                              @ AlgData.Algo
                                                                              (AlgData.Op
                                                                                 AlgData.GreaterOrEqual
                                                                                 (GHC.Types.:
                                                                                    @ AlgData.Algo
                                                                                    ww2
                                                                                    (GHC.Types.[]
                                                                                       @ AlgData.Algo)))
                                                                              (GHC.Types.[]
                                                                                 @ AlgData.Algo))) } }) -}
2daba4c1efc9c43ff937f9c4a52f1c5e
  chkRightWing :: AlgData.Algo -> AlgData.RangeWing -> AlgData.Algo
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(1*U,U)>m6,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Algo) (w1 :: AlgData.RangeWing) ->
                 case w1 of ww { AlgData.RangeWing ww1 ww2 ->
                 {__scc {main@main:Calc.chkRightWing} True False} case ww1 of wild {
                                                                    GHC.Types.False
                                                                    -> AlgData.Op
                                                                         AlgData.Equation
                                                                         (GHC.Types.:
                                                                            @ AlgData.Algo
                                                                            w
                                                                            (GHC.Types.:
                                                                               @ AlgData.Algo
                                                                               (AlgData.Op
                                                                                  AlgData.Less
                                                                                  (GHC.Types.:
                                                                                     @ AlgData.Algo
                                                                                     ww2
                                                                                     (GHC.Types.[]
                                                                                        @ AlgData.Algo)))
                                                                               (GHC.Types.[]
                                                                                  @ AlgData.Algo)))
                                                                    GHC.Types.True
                                                                    -> AlgData.Op
                                                                         AlgData.Equation
                                                                         (GHC.Types.:
                                                                            @ AlgData.Algo
                                                                            w
                                                                            (GHC.Types.:
                                                                               @ AlgData.Algo
                                                                               (AlgData.Op
                                                                                  AlgData.LessOrEqual
                                                                                  (GHC.Types.:
                                                                                     @ AlgData.Algo
                                                                                     ww2
                                                                                     (GHC.Types.[]
                                                                                        @ AlgData.Algo)))
                                                                               (GHC.Types.[]
                                                                                  @ AlgData.Algo))) } }) -}
0c9c41e7a93ff7a173052b0ce1d4f05e
  comutCalc ::
    AlgData.Ops -> [AlgData.Algo] -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (op :: AlgData.Ops) (m :: [AlgData.Algo]) ->
                 {__scc {main@main:Calc.comutCalc} True True} case {__scc {main@main:AlgData.canComut} True True} GHC.List.elem
                                                                                                                    @ AlgData.Ops
                                                                                                                    AlgData.$fEqOps
                                                                                                                    op
                                                                                                                    AlgData.comutOps of wild {
                                                                GHC.Types.False
                                                                -> GHC.Base.Nothing @ AlgData.Algo
                                                                GHC.Types.True
                                                                -> let {
                                                                     proc :: [[AlgData.Algo]]
                                                                     = {__scc {main@main:Calc.comutCalc.proc} True True} GHC.Base.map
                                                                                                                           @ AlgData.Algo
                                                                                                                           @ [AlgData.Algo]
                                                                                                                           (\ (o :: AlgData.Algo) ->
                                                                                                                            {__scc {main@main:Calc.comutCalc.proc.\} True True} {__scc {main@main:Utils.getOp} True False} case o of wild1 {
                                                                                                                                                                                                                             DEFAULT
                                                                                                                                                                                                                             -> GHC.Types.:
                                                                                                                                                                                                                                  @ AlgData.Algo
                                                                                                                                                                                                                                  wild1
                                                                                                                                                                                                                                  (GHC.Types.[]
                                                                                                                                                                                                                                     @ AlgData.Algo)
                                                                                                                                                                                                                             AlgData.Op op1 ds1
                                                                                                                                                                                                                             -> {__scc {main@main:AlgData.==} True False} case {__scc {main@main:AlgData.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                                                                           @ GHC.Types.Bool
                                                                                                                                                                                                                                                                                                                           (GHC.Prim.==#
                                                                                                                                                                                                                                                                                                                              (GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                 @ AlgData.Ops
                                                                                                                                                                                                                                                                                                                                 op1)
                                                                                                                                                                                                                                                                                                                              (GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                 @ AlgData.Ops
                                                                                                                                                                                                                                                                                                                                 op)) of wild2 {
                                                                                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                                                                                            -> GHC.Types.:
                                                                                                                                                                                                                                                                                 @ AlgData.Algo
                                                                                                                                                                                                                                                                                 wild1
                                                                                                                                                                                                                                                                                 (GHC.Types.[]
                                                                                                                                                                                                                                                                                    @ AlgData.Algo)
                                                                                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                                                                                            -> ds1 } })
                                                                                                                           m
                                                                   } in
                                                                   case Calc.comutCalc_go1
                                                                          proc of wild1 {
                                                                     [] -> Calc.comutCalc' op m
                                                                     : ds1 ds2
                                                                     -> GHC.Base.Just
                                                                          @ AlgData.Algo
                                                                          (AlgData.Op
                                                                             op
                                                                             (Calc.comutCalc_go
                                                                                proc)) } }) -}
5975763d30c99988e9b2c4b2559b6450
  comutCalc' ::
    AlgData.Ops -> [AlgData.Algo] -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
bb970afdee730fb15424e108ef8bdfde
  comutCalc_go :: [[AlgData.Algo]] -> [AlgData.Algo]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
982265160ebd2729a7027b0f334ab799
  comutCalc_go1 :: [[AlgData.Algo]] -> [[AlgData.Algo]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
caaf1ef379b3a601a4eadc613e56b594
  linearCalc ::
    AlgData.Ops -> [AlgData.Algo] -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
"SPEC/Calc $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow = Calc.$s$fShowMaybe
"SPEC/Calc $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Calc.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

