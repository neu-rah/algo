
==================== FINAL INTERFACE ====================
2016-12-12 00:15:16.200154 UTC

interface main@main:Continued [hpc] 8001
  interface hash: 3a340a25bd924ed2acd60bd09daf5c9f
  ABI hash: 6ef56c59e8871027be7c374299473edf
  export-list hash: 7361ce6f455a4db7793296441d896517
  orphan hash: 8b162f9488b13638b9aa7cc101db93c7
  flag hash: c25c71772aae7ac07670edcd14020fd8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Continued.___deltas
  Continued.__deltas
  Continued._cln
  Continued._delta
  Continued._deltas
  Continued._stp
  Continued.add
  Continued.contSteps
  Continued.continued
  Continued.cpa
  Continued.dabs
  Continued.delta
  Continued.deltas
  Continued.dif
  Continued.e0
  Continued.e1
  Continued.e10
  Continued.e11
  Continued.e12
  Continued.e13
  Continued.e2
  Continued.e3
  Continued.e4
  Continued.e5
  Continued.e6
  Continued.e7
  Continued.e8
  Continued.e9
  Continued.ee
  Continued.len
  Continued.list
  Continued.localCalc
  Continued.proj
  Continued.sortKeys
  Continued.stepWith
  Continued.stp
  Continued.termCalc
  Continued.walk
  Continued.ws
module dependencies: AlgAux AlgData AlgFile [boot] AlgNum AlgParser
                     AlgSets [boot] AlgShow Calc Context Derive Evid Intervals
                     Lib.Colors Lib.Debug Lib.ISUnits Lib.Noms Neighbor Rules Sample
                     Solver Steps Utils
package dependencies: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-ordlist-0.4.7.0@data-ordlist-0.4.7.0-KWzW5aSYDm3KUQkWjneBW4
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primes-0.2.1.0@primes-0.2.1.0-K0eIDQpwpli2u6M20VlfZn
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-compat-0.95.1@regex-compat-0.95.1-JPDhOGKcrkD8S1t3VsLLUt
                      regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         main@main:AlgNum main@main:AlgParser main@main:AlgParser
         main@main:AlgShow main@main:AlgShow
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-Fy6xYMm8dnjHHt23b8RdmR:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: Boolean-0.2.3@Boolean-0.2.3-JYotQglXhtoJXpADNau8XH:Data.Boolean
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ratio bd7ae7e84fadf68e9483b9d3f1445f8c
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  AlgAux 11857fb5eafb79b4e497e9d216a2ba5d
  exports: a5bbe99cfa73a20385453c450cf73119
  isAlgOp c3271a3df1a3ac156cf7f50781a9ce5a
import  -/  AlgData 307fffe4f0712a2d16396958905f20d6
  exports: 429708355c7b5468a518bfa47675e12b
  Algo 4d637072ad901205bf793a262f526c33
  Ellipsis 7fe5995c2eeca68984dc2412317220d4
  Identity 22255c417d22acd67f4bd8a171b8c890
  Nom 95d978c8cc5eb26be29a90158f860ad8
  Op 15ebbb24b6785911f3ab55036df6fa5d
  Sub aaf2da6bfff58a4523858f58c32df4b3
  Sum d5f11b74783ac2a16ec6db1a10fe0ff0
import  -/  AlgShow fcfeb78e77c98c4f4ab51d6062a0e40d
  exports: 5fdcc8d88371b431351310f3bb37bf3d
import  -/  Calc 9118e33b3ee020f4d62b8161b6bc016d
  exports: c22777f833144e9b6018d344cb957367
  calc a17ec7ad1200d77c09274ef812616b7d
import  -/  Lib.Debug c5ad911a598d38e4e2cba45a09de710b
  exports: e68806ff5497d096232692f266395170
  D_CONT 1a8f81f4b24a3571fc61065dec76962f
  dInfo b92a087152f8e08b1fbae947a3f5da6f
  ← 1be09bfd6d4e400c5809b6c36a0fe02b
import  -/  Lib.Noms 2d56e88a289ad37b00090ddb7a06fc81
  exports: 8a9b0085f320a4deb44ddea66e85019e
import  -/  Rules 74470094acc99b8481373ebd8cc3be83
  exports: d7450c0b10c7c04ae0e8f801289b432b
  liberalSizeTo 43e90f044716a713d26b7d46dfb68e02
import  -/  Solver 86999a48d8d4440cc196365ff996c4a9
  exports: 4471d3a30a1204f3bf559c4f2aa5ef86
import  -/  Utils e3ec9e04ed6635229273d876ecf1c4f6
  exports: edc5a96c02c5468ab823d3bed5331cb6
  #= c726cdd588c1bab42d70cffbda697ac7
  #> 58b8e1358c534cd698b1556cfbb95273
  chkQuant 04ed86859b5bc3a9091e050fcd568c1d
  getOp 20e4e90d60d9c0f7aaf3549675e6310d
  membersOf 5e4f26caffa4dc04d7b305bdbbd4f01e
  ok 3861b4d7f0d7b7d312a010526a83efc5
  ·> 61faea27b71b2abcf0be3760475a5832
224c374c15beee76e49e33baa31d5a5b
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  Continued.$s$fEqMaybe_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ AlgData.Algo AlgData.$fEqAlgo) -}
72a3b580f34fdad8a38efe33c902d68c
  $s$fEqMaybe_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe AlgData.Algo
    -> GHC.Base.Maybe AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe AlgData.Algo)
                   (ds1 :: GHC.Base.Maybe AlgData.Algo) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> AlgData.$fEqAlgSets_$c==2 a1 b1 } }) -}
1576a6d328949dbce18f298a1228e3b1
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe AlgData.Algo)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe AlgData.Algo)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ AlgData.Algo
                     AlgShow.$fShowAlgo)
                  (GHC.Show.$fShowMaybe_$cshow @ AlgData.Algo AlgShow.$fShowAlgo)
                  Continued.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
9a9374b619077f74f0895223a89a2bbb
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe AlgData.Algo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe AlgData.Algo])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe AlgData.Algo)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ AlgData.Algo
                      AlgShow.$fShowAlgo
                      GHC.Show.shows22)
                   eta
                   eta1) -}
baa0da14929169097d31eb754d64d7bc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Continued.$trModule2
                   Continued.$trModule1) -}
dc4f900c1e26bc6fba1f1ab0f0f8a240
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Continued"#) -}
a0c60a843a5413988052b95e844c9292
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7ce2a0bc04201490e3324818760bdcc2
  $wcontinued ::
    AlgData.Algo
    -> GHC.Prim.Int# -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: AlgData.Algo)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: AlgData.Algo) ->
                 {__scc {main@main:Continued.continued} True True} let {
                                                                     $w$j :: GHC.Base.Maybe
                                                                               (AlgData.Algo,
                                                                                (AlgData.Algo,
                                                                                 AlgData.Algo,
                                                                                 AlgData.Algo))
                                                                             -> GHC.Base.Maybe
                                                                                  AlgData.Algo
                                                                       {- Arity: 1,
                                                                          Strictness: <S,1*U>,
                                                                          Inline: [0] -}
                                                                     = \ (w2 :: GHC.Base.Maybe
                                                                                  (AlgData.Algo,
                                                                                   (AlgData.Algo,
                                                                                    AlgData.Algo,
                                                                                    AlgData.Algo)))[OneShot] ->
                                                                       {__scc {main@main:Continued.continued.h} True False} case w2 of wild {
                                                                                                                              GHC.Base.Nothing
                                                                                                                              -> GHC.Base.Nothing
                                                                                                                                   @ AlgData.Algo
                                                                                                                              GHC.Base.Just _m1
                                                                                                                              -> {__scc {main@main:Continued.continued.(...)} True False} case _m1 of wild1 { (,) r ds ->
                                                                                                                                                                                          case ds of wild2 { (,,) e c d ->
                                                                                                                                                                                          {__scc {main@main:Continued.continued.r} True False} Continued.delta
                                                                                                                                                                                                                                                 (Continued.cpa
                                                                                                                                                                                                                                                    @ AlgData.Algo
                                                                                                                                                                                                                                                    @ AlgData.Algo)
                                                                                                                                                                                                                                                 r
                                                                                                                                                                                                                                                 r
                                                                                                                                                                                                                                                 AlgData.Ellipsis
                                                                                                                                                                                                                                                 w1 } } }
                                                                   } in
                                                                   {__scc {main@main:Continued.continued.cs} True False} case {__scc {main@main:Continued.continued.cs} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                      @ GHC.Types.Bool
                                                                                                                                                                                      (GHC.Prim.<=#
                                                                                                                                                                                         ww
                                                                                                                                                                                         0#) of wild {
                                                                                                                           GHC.Types.False
                                                                                                                           -> case {__scc {main@main:Continued.continued.cs} False True} Continued.$wunsafeDrop
                                                                                                                                                                                           @ (GHC.Base.Maybe
                                                                                                                                                                                                (AlgData.Algo,
                                                                                                                                                                                                 (AlgData.Algo,
                                                                                                                                                                                                  AlgData.Algo,
                                                                                                                                                                                                  AlgData.Algo)))
                                                                                                                                                                                           ww
                                                                                                                                                                                           (Continued.contSteps
                                                                                                                                                                                              w) of wild1 {
                                                                                                                                []
                                                                                                                                -> GHC.Base.Nothing
                                                                                                                                     @ AlgData.Algo
                                                                                                                                : ds1 ds2
                                                                                                                                -> $w$j
                                                                                                                                     ds1 }
                                                                                                                           GHC.Types.True
                                                                                                                           -> case {__scc {main@main:Continued.continued.cs} False True} Continued.contSteps
                                                                                                                                                                                           w of wild1 {
                                                                                                                                []
                                                                                                                                -> GHC.Base.Nothing
                                                                                                                                     @ AlgData.Algo
                                                                                                                                : ds1 ds2
                                                                                                                                -> $w$j
                                                                                                                                     ds1 } }) -}
079067f55f4f536df548c5d059ace6c7
  $wlvl ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Double)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double)
                   (ww3 :: GHC.Types.Double) ->
                 {__scc {main@main:Continued._deltas.\} True True} Continued.sortKeys
                                                                     (GHC.Types.:
                                                                        @ GHC.Types.Ordering
                                                                        (GHC.Classes.$fOrdDouble_$ccompare
                                                                           ww1
                                                                           ww3)
                                                                        (GHC.Types.:
                                                                           @ GHC.Types.Ordering
                                                                           (GHC.Classes.$fOrdDouble_$ccompare
                                                                              ww2
                                                                              ww)
                                                                           (GHC.Types.[]
                                                                              @ GHC.Types.Ordering)))) -}
cf321c9292c251fac027996918f99f7f
  $wproj :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
a6c605ffc45a075db516fc8e0d52ad97
  $wstepWith ::
    AlgData.Algo
    -> AlgData.Algo -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: AlgData.Algo)
                   (ww1 :: AlgData.Algo)
                   (ww2 :: AlgData.Algo) ->
                 {__scc {main@main:Continued.stepWith} True True} let {
                                                                    d' :: AlgData.Algo
                                                                    = {__scc {main@main:Continued.stepWith.d'} True True} Continued._cln
                                                                                                                            ww2
                                                                  } in
                                                                  case Continued.delta
                                                                         Continued.add
                                                                         ww1
                                                                         d'
                                                                         AlgData.Ellipsis
                                                                         AlgData.Ellipsis of wild {
                                                                    GHC.Base.Nothing
                                                                    -> GHC.Base.Nothing
                                                                         @ AlgData.Algo
                                                                    GHC.Base.Just x
                                                                    -> case Continued.delta
                                                                              (Continued.cpa
                                                                                 @ AlgData.Algo
                                                                                 @ AlgData.Algo)
                                                                              ww1
                                                                              d'
                                                                              AlgData.Ellipsis
                                                                              x of wild1 {
                                                                         GHC.Base.Nothing
                                                                         -> GHC.Base.Nothing
                                                                              @ AlgData.Algo
                                                                         GHC.Base.Just x1
                                                                         -> Continued.delta
                                                                              (Continued.cpa
                                                                                 @ AlgData.Algo
                                                                                 @ AlgData.Algo)
                                                                              ww
                                                                              ww
                                                                              ww1
                                                                              x1 } }) -}
e8ddf490b15d6d4311666b318b72600b
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
63542c053ed8d927a8267222d3cb01a9
  ___deltas ::
    AlgData.Algo
    -> [(AlgData.Algo, AlgData.Algo, GHC.Base.Maybe AlgData.Algo)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (e :: AlgData.Algo) ->
                 let {
                   lvl40 :: GHC.Types.Int
                   = {__scc {main@main:Continued.___deltas} False True} {__scc {main@main:Continued.___deltas.\} False True} case GHC.List.$wlenAcc
                                                                                                                                    @ AlgData.Algo
                                                                                                                                    ({__scc {main@main:Continued.walk} True True} Continued.___deltas_go2
                                                                                                                                                                                    e)
                                                                                                                                    0# of ww2 { DEFAULT ->
                                                                                                                             GHC.Types.I#
                                                                                                                               (GHC.Prim.*#
                                                                                                                                  2#
                                                                                                                                  (GHC.Prim.-#
                                                                                                                                     ww2
                                                                                                                                     1#)) }
                 } in
                 {__scc {main@main:Continued.___deltas} True True} case {__scc {main@main:Continued.walk} True True} Continued.___deltas_go1
                                                                                                                       e of wild {
                                                                     []
                                                                     -> case GHC.List.scanl2
                                                                        ret_ty [(AlgData.Algo,
                                                                                 AlgData.Algo,
                                                                                 GHC.Base.Maybe
                                                                                   AlgData.Algo)]
                                                                        of {}
                                                                     : ds1 xs
                                                                     -> letrec {
                                                                          go7 :: [AlgData.Algo]
                                                                                 -> [(AlgData.Algo,
                                                                                      AlgData.Algo,
                                                                                      GHC.Base.Maybe
                                                                                        AlgData.Algo)]
                                                                            {- Arity: 1,
                                                                               Strictness: <S,1*U> -}
                                                                          = \ (ds :: [AlgData.Algo]) ->
                                                                            case ds of wild1 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (AlgData.Algo,
                                                                                      AlgData.Algo,
                                                                                      GHC.Base.Maybe
                                                                                        AlgData.Algo)
                                                                              : y ys
                                                                              -> case {__scc {main@main:Continued.___deltas.\} True True} GHC.List.$wlenAcc
                                                                                                                                            @ AlgData.Algo
                                                                                                                                            ({__scc {main@main:Continued.walk} True True} Continued.___deltas_go
                                                                                                                                                                                            y)
                                                                                                                                            0# of ww2 { DEFAULT ->
                                                                                 case lvl40 of wild2 { GHC.Types.I# x ->
                                                                                 case {__scc {main@main:Continued.___deltas.\} False True} GHC.Prim.tagToEnum#
                                                                                                                                             @ GHC.Types.Bool
                                                                                                                                             (GHC.Prim.>=#
                                                                                                                                                x
                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                   3#
                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                      ww2
                                                                                                                                                      1#))) of wild3 {
                                                                                   GHC.Types.False
                                                                                   -> go7 ys
                                                                                   GHC.Types.True
                                                                                   -> GHC.Types.:
                                                                                        @ (AlgData.Algo,
                                                                                           AlgData.Algo,
                                                                                           GHC.Base.Maybe
                                                                                             AlgData.Algo)
                                                                                        ({__scc {main@main:Continued.___deltas.\} True False} (e,
                                                                                                                                               y,
                                                                                                                                               {__scc {main@main:Continued.___deltas.\} False True} Continued._delta
                                                                                                                                                                                                      Continued.dif
                                                                                                                                                                                                      e
                                                                                                                                                                                                      y
                                                                                                                                                                                                      y
                                                                                                                                                                                                      Continued.___deltas1
                                                                                                                                                                                                      GHC.Types.True))
                                                                                        (go7
                                                                                           ys) } } } }
                                                                        } in
                                                                        go7 xs }) -}
3e58a3719530a6417b4b3046b1be77ad
  ___deltas1 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.___deltas} False True} {__scc {main@main:Continued.___deltas.\} False True} AlgParser.$fIsStringAlgo_$cfromString
                                                                                                                           Continued.___deltas2) -}
36552030995b357dcc8239ea48837cc1
  ___deltas2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.___deltas} False True} {__scc {main@main:Continued.___deltas.\} False True} GHC.CString.unpackCString#
                                                                                                                           "..."#) -}
7f133b0d4b8d22cb9dc4ad49b46d51ea
  ___deltas_go :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U> -}
be2bf3223f256f5a709cc7581f421586
  ___deltas_go1 :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U> -}
00dd0230fa07dc4c9304527632194827
  ___deltas_go2 :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U> -}
e54b939bd4ac74ad9c5de6c90e0e1870
  __deltas ::
    AlgData.Algo
    -> [(GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
         AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (e :: AlgData.Algo) ->
                 {__scc {main@main:Continued.__deltas} True True} Continued.__deltas_go
                                                                    (Continued.___deltas e)) -}
a0ae772c13f82658926627f36adea17e
  __deltas_go ::
    [(AlgData.Algo, AlgData.Algo, GHC.Base.Maybe AlgData.Algo)]
    -> [(GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
         AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, Strictness: <S,1*U> -}
a17a45a9cb408398557490fc5bd7a82d
  _cln :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
a5fae99201dd3e034d7b3c121407681c
  _delta ::
    (AlgData.Algo -> AlgData.Algo -> AlgData.Algo)
    -> AlgData.Algo
    -> AlgData.Algo
    -> AlgData.Algo
    -> AlgData.Algo
    -> GHC.Types.Bool
    -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 6, Strictness: <L,C(C1(U))><S,U><S,U><L,U><L,U><L,U> -}
6b960f69bac1e5df106adc2e2b77a4a8
  _deltas ::
    AlgData.Algo
    -> [(GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
         AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (e :: AlgData.Algo) ->
                 {__scc {main@main:Continued._deltas} True True} Data.OldList.sortBy
                                                                   @ (GHC.Types.Double,
                                                                      GHC.Types.Double,
                                                                      AlgData.Algo, AlgData.Algo,
                                                                      AlgData.Algo)
                                                                   Continued._deltas1
                                                                   (Continued._deltas_go1
                                                                      (GHC.List.reverse1
                                                                         @ AlgData.Algo
                                                                         ({__scc {main@main:Continued.walk} True True} Continued._deltas_go
                                                                                                                         e)
                                                                         (GHC.Types.[]
                                                                            @ AlgData.Algo)))) -}
e14751fd4d6b2101dcf6918dd3301220
  _deltas1 ::
    (GHC.Types.Double, GHC.Types.Double, AlgData.Algo, AlgData.Algo,
     AlgData.Algo)
    -> (GHC.Types.Double, GHC.Types.Double, AlgData.Algo, AlgData.Algo,
        AlgData.Algo)
    -> GHC.Types.Ordering
  {- Unfolding: ({__scc {main@main:Continued._deltas} False True} Continued._deltas2) -}
c5f01f27196c2ce9d7000cb44d58afde
  _deltas2 ::
    (GHC.Types.Double, GHC.Types.Double, AlgData.Algo, AlgData.Algo,
     AlgData.Algo)
    -> (GHC.Types.Double, GHC.Types.Double, AlgData.Algo, AlgData.Algo,
        AlgData.Algo)
    -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,A)><S,1*U(1*U(U),1*U(U),A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
                          AlgData.Algo, AlgData.Algo))
                   (w1 :: (GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
                           AlgData.Algo, AlgData.Algo)) ->
                 case w of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { (,,,,) ww7 ww8 ww9 ww10 ww11 ->
                 Continued.$wlvl ww1 ww2 ww7 ww8 } }) -}
ebd3c73d8709717841ff588c65b3787e
  _deltas_go :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U> -}
68f710558b57c30910b2c93125823cb5
  _deltas_go1 ::
    [AlgData.Algo]
    -> [(GHC.Types.Double, GHC.Types.Double, AlgData.Algo,
         AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, Strictness: <S,1*U> -}
3ca2951974cff95a3207ece7b93a9d67
  _stp ::
    GHC.Base.Maybe
      (AlgData.Algo, (AlgData.Algo, AlgData.Algo, AlgData.Algo))
    -> GHC.Base.Maybe
         (AlgData.Algo, (AlgData.Algo, AlgData.Algo, AlgData.Algo))
  {- Arity: 1, Strictness: <S,1*U> -}
ced99e45d45e2baac2ad502a4130986e
  add :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Algo) (b :: AlgData.Algo) ->
                 {__scc {main@main:Continued.add} True True} Continued.localCalc
                                                               (AlgData.Op
                                                                  AlgData.Sum
                                                                  (GHC.Types.:
                                                                     @ AlgData.Algo
                                                                     (Continued._cln a)
                                                                     (GHC.Types.:
                                                                        @ AlgData.Algo
                                                                        (Continued._cln b)
                                                                        (GHC.Types.[]
                                                                           @ AlgData.Algo))))) -}
de2a2ecbb8315cd576c66a8db0fb6ec4
  contSteps ::
    AlgData.Algo
    -> [GHC.Base.Maybe
          (AlgData.Algo, (AlgData.Algo, AlgData.Algo, AlgData.Algo))]
  {- Arity: 1, Strictness: <L,U> -}
0dd74bed6944386b300f8bd341be1081
  continued ::
    AlgData.Algo
    -> GHC.Types.Int -> AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: AlgData.Algo)
                   (w1 :: GHC.Types.Int)
                   (w2 :: AlgData.Algo) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Continued.$wcontinued w ww1 w2 }) -}
06016732fb1f4e09a273f824c1bc68c2
  cpa :: t -> t1 -> t
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t @ t1 (a :: t) (b :: t1) ->
                 {__scc {main@main:Continued.cpa} True False} a) -}
3c76bfdc0f652d3993c8b247d14b1107
  dabs :: AlgData.Algo -> Lib.Noms.Nr
  {- Arity: 1, Strictness: <S,1*U> -}
ffdf662deece6d01abfef90be0c0472f
  delta ::
    (AlgData.Algo -> AlgData.Algo -> AlgData.Algo)
    -> AlgData.Algo
    -> AlgData.Algo
    -> AlgData.Algo
    -> AlgData.Algo
    -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 5, Strictness: <L,C(C1(U))><S,U><S,U><L,U><L,U>,
     Unfolding: (\ (f :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo)
                   (a :: AlgData.Algo)
                   (b :: AlgData.Algo)
                   (l :: AlgData.Algo)
                   (e :: AlgData.Algo) ->
                 {__scc {main@main:Continued.delta} True True} case Lib.Debug.$wdInfo
                                                                      Lib.Debug.D_CONT
                                                                      (GHC.CString.unpackAppendCString#
                                                                         "delta "#
                                                                         (Continued.delta_go
                                                                            (GHC.Types.:
                                                                               @ GHC.Base.String
                                                                               (AlgShow.$fShowAlgSets_$cshow1
                                                                                  a)
                                                                               (Data.OldList.prependToAll
                                                                                  @ GHC.Base.String
                                                                                  Continued.delta2
                                                                                  (GHC.Types.:
                                                                                     @ [GHC.Types.Char]
                                                                                     (AlgShow.$fShowAlgSets_$cshow1
                                                                                        b)
                                                                                     (GHC.Types.:
                                                                                        @ [GHC.Types.Char]
                                                                                        (AlgShow.$fShowAlgSets_$cshow1
                                                                                           l)
                                                                                        (GHC.Types.:
                                                                                           @ [GHC.Types.Char]
                                                                                           (AlgShow.$fShowAlgSets_$cshow1
                                                                                              e)
                                                                                           (GHC.Types.[]
                                                                                              @ [GHC.Types.Char])))))))) of wild {
                                                                 GHC.Types.False
                                                                 -> Continued._delta
                                                                      f
                                                                      a
                                                                      b
                                                                      l
                                                                      e
                                                                      GHC.Types.True
                                                                 GHC.Types.True
                                                                 -> Continued.delta1 }) -}
b0fb6175284859f4c22342ef372f1bda
  delta1 :: GHC.Base.Maybe AlgData.Algo
  {- Strictness: x -}
96e4411bc25c256bc353717d8344d210
  delta2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.delta} False True} GHC.CString.unpackCString#
                                                                  " "#) -}
6cf8a7365ceeeba5d8d1b769fcb444ed
  delta_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fa655b120b9a20caebe1f2055241f27a
  deltas ::
    AlgData.Algo -> [(AlgData.Algo, AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (e :: AlgData.Algo) ->
                 {__scc {main@main:Continued.deltas} True True} Continued.deltas_go
                                                                  (Continued._deltas e)) -}
b0cc6d24c3265b8950ff60299a5f4c98
  deltas_go ::
    [(GHC.Types.Double, GHC.Types.Double, AlgData.Algo, AlgData.Algo,
      AlgData.Algo)]
    -> [(AlgData.Algo, AlgData.Algo, AlgData.Algo)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e3eac50540d851649022f5704982a71a
  dif :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <L,U><L,U>m6, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Algo) (w1 :: AlgData.Algo) ->
                 {__scc {main@main:Continued.dif} True True} {__scc {main@main:Continued.termCalc} True False} AlgData.Op
                                                                                                                 AlgData.Identity
                                                                                                                 (GHC.Types.:
                                                                                                                    @ AlgData.Algo
                                                                                                                    (let {
                                                                                                                       o :: [AlgData.Algo]
                                                                                                                       = GHC.Types.:
                                                                                                                           @ AlgData.Algo
                                                                                                                           w
                                                                                                                           (GHC.Types.[]
                                                                                                                              @ AlgData.Algo)
                                                                                                                     } in
                                                                                                                     let {
                                                                                                                       o1 :: [AlgData.Algo]
                                                                                                                       = GHC.Types.:
                                                                                                                           @ AlgData.Algo
                                                                                                                           w1
                                                                                                                           o
                                                                                                                     } in
                                                                                                                     let {
                                                                                                                       o2 :: AlgData.Algo
                                                                                                                       = AlgData.Op
                                                                                                                           AlgData.Sub
                                                                                                                           o1
                                                                                                                     } in
                                                                                                                     {__scc {main@main:Continued.termCalc} False True} Continued.localCalc
                                                                                                                                                                         o2)
                                                                                                                    (GHC.Types.[]
                                                                                                                       @ AlgData.Algo))) -}
1a134f07d7e1f0d54bdce9daa8079bd2
  e0 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e0} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e16) -}
7c27e107088e234f957a24ed4ea12b74
  e1 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e1} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e17) -}
38371b6fd70d6c1df77d81115c3c3f35
  e10 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e10} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                               Continued.e18) -}
891fcf56f4cec70a5a68c5c6756b4cdd
  e11 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e11} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                               Continued.e19) -}
a03a2f418ef41f21cb76c484197b54eb
  e12 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e12} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                               Continued.e20) -}
c41dca74706f0328db75850b97ceda27
  e13 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e13} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                               Continued.e21) -}
19693ff51cbe6fd53d37dac7884a7a27
  e16 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e0} False True} GHC.CString.unpackCString#
                                                               "1/(1+2/...)"#) -}
45a5044de51d3b528f5d7ab7f2d05a73
  e17 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e1} False True} GHC.CString.unpackCString#
                                                               "1+2+..."#) -}
bec26e74068dbaa858956ffead084827
  e18 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e10} False True} GHC.CString.unpackCString#
                                                                "1,(-2),3,(-4),5,..."#) -}
20c9bf39d4942ce0e31f6f2aa1ca30dc
  e19 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e11} False True} GHC.CString.unpackCString#
                                                                "{1,2,...}"#) -}
ebfbce460d816b23068adb7191fe2ca1
  e2 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e2} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e22) -}
be5585fff7a3cda5bb9fefea64965f9b
  e20 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e12} False True} GHC.CString.unpackCString#
                                                                "1,2,..."#) -}
13ac5a2dc4e7c14368c0024c3bfb80a2
  e21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e13} False True} GHC.CString.unpackCString#
                                                                "{1,2,3,...}"#) -}
9c1d856e7fabfe6efd48f20ac9982573
  e22 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e2} False True} GHC.CString.unpackCString#
                                                               "1/(1+1/(2+...))"#) -}
2017502824b5f6cbac92bda70b84574d
  e23 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e3} False True} GHC.CString.unpackCStringUtf8#
                                                               "2+1/(2\\194\\178+...)"#) -}
f4601e6bfd8ddf0a08114b68897f8336
  e24 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e4} False True} GHC.CString.unpackCStringUtf8#
                                                               "4/(1+1\\194\\178/(2+3\\194\\178/(2+5\\194\\178/...)))"#) -}
3bb707525e94fd3ed7caba34bae531c3
  e25 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e5} False True} GHC.CString.unpackCStringUtf8#
                                                               "3+1\\194\\178/(6+3\\194\\178/(6+5\\194\\178/...))"#) -}
2e554ad86171d239c483876bc6690ce3
  e26 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e6} False True} GHC.CString.unpackCString#
                                                               "1+1/(1+...)"#) -}
c476d0742cbab9ec71d990dd1795825c
  e27 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e7} False True} GHC.CString.unpackCStringUtf8#
                                                               "a+a\\194\\178+..."#) -}
e13fa5562edfb644b6acc754def89ad4
  e28 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e8} False True} GHC.CString.unpackCStringUtf8#
                                                               "a+2/(a\\194\\178+3/...)"#) -}
80a65dda618733f0cac242d8583a42c9
  e29 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.e9} False True} GHC.CString.unpackCString#
                                                               "1+2+1+3+1+4+1+5+..."#) -}
322fccecc297d601be7d6752b2a6e5d8
  e3 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e3} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e23) -}
c5db13daa81dd65609868fccf25a5738
  e4 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e4} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e24) -}
20280aa6b15136ec2bccaa839df29587
  e5 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e5} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e25) -}
290a24336fc277ba98c559fec524dc49
  e6 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e6} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e26) -}
69548d2eabad6c602f48cf8ab7844915
  e7 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e7} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e27) -}
cd9895edb0856bfd6d2607c6b3c40084
  e8 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e8} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e28) -}
7a309c96ac29633e9c714c844a8ee1f7
  e9 :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:Continued.e9} True True} AlgParser.$fIsStringAlgo_$cfromString
                                                              Continued.e29) -}
bcc5f61c3e92ec0c86635f7637a37aaf
  ee :: [AlgData.Algo]
  {- Unfolding: ({__scc {main@main:Continued.ee} True False} GHC.Types.:
                                                               @ AlgData.Algo
                                                               Continued.e0
                                                               Continued.ee1) -}
261cdf5c22e0a3970eeaabe0d1b00f89
  ee1 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e1
                   Continued.ee2) -}
05d9316a03cbead5dc415e581d6ab95f
  ee10 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e10
                   Continued.ee11) -}
d1dec7e17b366f9c2e4d1f69b4a5c2d8
  ee11 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e11
                   Continued.ee12) -}
cfbd8316122e85e60855a561b9fb83ce
  ee12 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e12
                   Continued.ee13) -}
484b98dbf88274c318cce92ba620549f
  ee13 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e13
                   (GHC.Types.[] @ AlgData.Algo)) -}
d395c0e188646f983ca7b200f42c0a09
  ee2 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e2
                   Continued.ee3) -}
6c4a873bc05e98b21ccd9ed0b47024b4
  ee3 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e3
                   Continued.ee4) -}
c10379e49a11058ca481d04fd956442c
  ee4 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e4
                   Continued.ee5) -}
95809c0167d03bef8dedd27e0987e399
  ee5 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e5
                   Continued.ee6) -}
ee7832bf889024e0968bfc7953b11ba9
  ee6 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e6
                   Continued.ee7) -}
acb63525bf647f28eb0b22f7fdc24cb7
  ee7 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e7
                   Continued.ee8) -}
691c18a4ae45d18e53ca59929ab0a0a6
  ee8 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e8
                   Continued.ee9) -}
8e72c9bb818f4857a1fc90c54ca8bae0
  ee9 :: [AlgData.Algo]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Algo
                   Continued.e9
                   Continued.ee10) -}
8ad65111f7b871e57a411b863f46516b
  len :: AlgData.Algo -> GHC.Types.Int
  {- Unfolding: ({__scc {main@main:Continued.len} True False} \ (x :: AlgData.Algo) ->
                                                              {__scc {main@main:Continued.len} False True} case x of wild {
                                                                                                             DEFAULT
                                                                                                             -> Continued.len1
                                                                                                             AlgData.Op ds1 m
                                                                                                             -> case GHC.List.$wlenAcc
                                                                                                                       @ AlgData.Algo
                                                                                                                       m
                                                                                                                       0# of ww2 { DEFAULT ->
                                                                                                                GHC.Types.I#
                                                                                                                  ww2 } }) -}
9b14028e7d84316d9f71cbe41b004e5c
  len1 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
543e5142aa68c1f1789d70562393e1d6
  list ::
    (Data.Foldable.Foldable t, GHC.Show.Show a) =>
    t a -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLC(C(C(S)))LLLLLLLLLLLLL),1*U(A,A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*U,A)><L,U>,
     Unfolding: (\ @ (t :: * -> *)
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   ($dShow :: GHC.Show.Show a)
                   (o :: t a) ->
                 {__scc {main@main:Continued.list} True True} let {
                                                                g :: a -> GHC.Base.String
                                                                = GHC.Show.show @ a $dShow
                                                              } in
                                                              Data.Foldable.foldr
                                                                @ t
                                                                $dFoldable
                                                                @ a
                                                                @ (GHC.Types.IO ())
                                                                (\ (x :: a)
                                                                   (eta :: GHC.Types.IO ())
                                                                   (eta1 :: GHC.Prim.State#
                                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                                 case GHC.IO.Handle.Text.hPutStr2
                                                                        GHC.IO.Handle.FD.stdout
                                                                        (g x)
                                                                        GHC.Types.True
                                                                        eta1 of ds1 { (#,#) ipv ipv1 ->
                                                                 eta
                                                                   `cast`
                                                                 (GHC.Types.N:IO[0] <()>_R)
                                                                   ipv })
                                                                  `cast`
                                                                (<a>_R
                                                                 ->_R <GHC.Types.IO ()>_R
                                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                                               <()>_R))
                                                                Continued.list1
                                                                  `cast`
                                                                (Sym (GHC.Types.N:IO[0] <()>_R))
                                                                o) -}
b1063c720bfa2f2a8d9a6ac5aacf75e0
  list1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
678fc753867795bbae7418ffe028b67e
  localCalc :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Continued.localCalc} True True} Lib.Debug.$w←
                                                                     @ AlgData.Algo
                                                                     AlgShow.$fShowAlgo
                                                                     Lib.Debug.D_CONT
                                                                     (GHC.Base.++
                                                                        @ GHC.Types.Char
                                                                        (AlgShow.$fShowAlgSets_$cshow1
                                                                           o)
                                                                        Continued.localCalc1)
                                                                     (case {__scc {main@main:Utils.·>} True True} Utils.proc
                                                                                                                    @ GHC.Base.Maybe
                                                                                                                    @ AlgData.Algo
                                                                                                                    GHC.Base.$fMonadMaybe
                                                                                                                    Continued.$s$fEqMaybe
                                                                                                                    GHC.Base.$fAlternativeMaybe
                                                                                                                    Calc.calc
                                                                                                                    o of wild {
                                                                        GHC.Base.Nothing -> o
                                                                        GHC.Base.Just r -> r })) -}
4651c850be642e396bf7f81db611b507
  localCalc1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:Continued.localCalc} False True} GHC.CString.unpackCString#
                                                                      " localCalc:"#) -}
ed7a6226a67c15e200f62d35b6c15699
  proj :: AlgData.Algo -> AlgData.Algo -> t -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ t (w :: AlgData.Algo) (w1 :: AlgData.Algo) (w2 :: t) ->
                 Continued.$wproj @ t w w1) -}
c52918f1964b15225e24f85d7f750a48
  sortKeys :: [GHC.Types.Ordering] -> GHC.Types.Ordering
  {- Arity: 1, Strictness: <S,1*U> -}
146cee3abf38b6f74e75c04a22e1aa22
  stepWith ::
    (AlgData.Algo, AlgData.Algo, AlgData.Algo)
    -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S(LSS),1*U(U,U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (AlgData.Algo, AlgData.Algo, AlgData.Algo)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Continued.$wstepWith ww1 ww2 ww3 }) -}
6d6bcd6b9d3290e6fb7c28e303e50a45
  stp :: AlgData.Algo -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Continued.stp} True True} case {__scc {main@main:Continued.stp.d} True True} Continued.deltas
                                                                                                                  o of wild {
                                                               [] -> GHC.Base.Nothing @ AlgData.Algo
                                                               : ds1 ds2
                                                               -> case {__scc {main@main:Continued.stp.r} True True} Continued._stp
                                                                                                                       (GHC.Base.Just
                                                                                                                          @ (AlgData.Algo,
                                                                                                                             (AlgData.Algo,
                                                                                                                              AlgData.Algo,
                                                                                                                              AlgData.Algo))
                                                                                                                          (o,
                                                                                                                           ds1)) of wild1 {
                                                                    GHC.Base.Nothing
                                                                    -> GHC.Base.Nothing
                                                                         @ AlgData.Algo
                                                                    GHC.Base.Just _m1
                                                                    -> case _m1 of wild2 { (,) ð ds ->
                                                                       {__scc {main@main:Continued.stp.\} True False} GHC.Base.Just
                                                                                                                        @ AlgData.Algo
                                                                                                                        ð } } }) -}
05dc61e71a114822de3cbba959f3cb0e
  termCalc :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <L,U>m6,
     Unfolding: InlineRule (1, True, False)
                (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Continued.termCalc} True False} AlgData.Op
                                                                     AlgData.Identity
                                                                     (GHC.Types.:
                                                                        @ AlgData.Algo
                                                                        ({__scc {main@main:Continued.termCalc} False True} Continued.localCalc
                                                                                                                             o)
                                                                        (GHC.Types.[]
                                                                           @ AlgData.Algo))) -}
c1d068e8f4039924d5d30712d7ccea7a
  walk :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (o :: AlgData.Algo) ->
                 {__scc {main@main:Continued.walk} True True} Continued.walk_go
                                                                o) -}
2c27e4e62caa3cceb8b4ae0b546b6435
  walk_go :: AlgData.Algo -> [AlgData.Algo]
  {- Arity: 1, Strictness: <L,U> -}
f002e77ab4c6c5dc8502a8f4ee69e6e5
  ws :: AlgData.Algo -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:Continued.ws} True True} case ds of wild {
                                                              DEFAULT -> wild
                                                              AlgData.Op op ds1
                                                              -> case ds1 of wild1 {
                                                                   []
                                                                   -> AlgData.Op
                                                                        op
                                                                        (GHC.Types.[]
                                                                           @ AlgData.Algo)
                                                                   : o oo
                                                                   -> let {
                                                                        $j :: GHC.Prim.Int#
                                                                              -> AlgData.Algo
                                                                          {- Arity: 1 -}
                                                                        = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                                                                          let {
                                                                            $j1 :: GHC.Prim.Void#
                                                                                   -> AlgData.Algo
                                                                              {- Arity: 1,
                                                                                 Strictness: <L,A> -}
                                                                            = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                                                              case GHC.List.$wlenAcc
                                                                                     @ AlgData.Algo
                                                                                     oo
                                                                                     0# of ww2 { DEFAULT ->
                                                                              case GHC.Prim.tagToEnum#
                                                                                     @ GHC.Types.Bool
                                                                                     (GHC.Prim.<#
                                                                                        ww2
                                                                                        ww) of wild2 {
                                                                                GHC.Types.False
                                                                                -> AlgData.Op op oo
                                                                                GHC.Types.True
                                                                                -> GHC.List.head
                                                                                     @ AlgData.Algo
                                                                                     oo } }
                                                                          } in
                                                                          case oo of wild2 {
                                                                            []
                                                                            -> case GHC.Prim.tagToEnum#
                                                                                      @ GHC.Types.Bool
                                                                                      (GHC.Prim.<#
                                                                                         0#
                                                                                         ww) of wild3 {
                                                                                 GHC.Types.False
                                                                                 -> $j1
                                                                                      GHC.Prim.void#
                                                                                 GHC.Types.True
                                                                                 -> Continued.ws1
                                                                                      op }
                                                                            : ds2 ds3
                                                                            -> $j1 GHC.Prim.void# }
                                                                      } in
                                                                      case {__scc {main@main:AlgData.quant} True True} GHC.List.elem
                                                                                                                         @ AlgData.Ops
                                                                                                                         AlgData.$fEqOps
                                                                                                                         op
                                                                                                                         AlgData.unaryOps of wild2 {
                                                                        GHC.Types.False
                                                                        -> case {__scc {main@main:AlgData.quant} False True} GHC.List.elem
                                                                                                                               @ AlgData.Ops
                                                                                                                               AlgData.$fEqOps
                                                                                                                               op
                                                                                                                               AlgData.binaryOps of wild3 {
                                                                             GHC.Types.False
                                                                             -> case {__scc {main@main:AlgData.quant} False True} GHC.List.elem
                                                                                                                                    @ AlgData.Ops
                                                                                                                                    AlgData.$fEqOps
                                                                                                                                    op
                                                                                                                                    AlgData.partialOps of wild4 {
                                                                                  GHC.Types.False
                                                                                  -> case {__scc {main@main:AlgData.quant} False True} {__scc {main@main:AlgData.==} True False} op of x1 { DEFAULT ->
                                                                                     case {__scc {main@main:AlgData.quant} False True} {__scc {main@main:AlgData.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                   @ AlgData.Ops
                                                                                                                                                                                   x1 of wild5 {
                                                                                       DEFAULT
                                                                                       -> $j 2#
                                                                                       3#
                                                                                       -> $j 0# } }
                                                                                  GHC.Types.True
                                                                                  -> $j 1# }
                                                                             GHC.Types.True
                                                                             -> $j 2# }
                                                                        GHC.Types.True
                                                                        -> $j 1# } } }) -}
ba36666a0c1e6962d2314c57c8a871ff
  ws1 :: AlgData.Ops -> AlgData.Algo
  {- Arity: 1, Strictness: <L,U>x -}
"SPEC/Continued $fEqMaybe @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             AlgData.Algo)
  GHC.Base.$fEqMaybe @ AlgData.Algo $dEq = Continued.$s$fEqMaybe
"SPEC/Continued $fEqMaybe_$c== @ Algo" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  AlgData.Algo)
  GHC.Base.$fEqMaybe_$c== @ AlgData.Algo $dEq
  = Continued.$s$fEqMaybe_$s$fEqMaybe_$c==
"SPEC/Continued $fShowMaybe @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 AlgData.Algo)
  GHC.Show.$fShowMaybe @ AlgData.Algo $dShow
  = Continued.$s$fShowMaybe
"SPEC/Continued $fShowMaybe_$cshowList @ Algo" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                            AlgData.Algo)
  GHC.Show.$fShowMaybe_$cshowList @ AlgData.Algo $dShow
  = Continued.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

