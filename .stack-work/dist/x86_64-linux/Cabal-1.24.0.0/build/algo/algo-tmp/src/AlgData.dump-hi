
==================== FINAL INTERFACE ====================
2016-12-11 23:33:32.64774 UTC

interface main@main:AlgData [hpc] 8001
  interface hash: 51a10150282fddfd0834f117522434a7
  ABI hash: 307fffe4f0712a2d16396958905f20d6
  export-list hash: 429708355c7b5468a518bfa47675e12b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5d4c6193afdf2881dce4443be0158611
  sig of: Nothing
  used TH splices: False
  where
exports:
  AlgData.arithmeticOps
  AlgData.binaryCalc
  AlgData.binaryOps
  AlgData.canComut
  AlgData.comutOps
  AlgData.distOver
  AlgData.envOps
  AlgData.equatOps
  AlgData.exponentialOps
  AlgData.exprOps
  AlgData.funcs
  AlgData.functionOps
  AlgData.geometricOps
  AlgData.inverse
  AlgData.listOps
  AlgData.logicOps
  AlgData.neutral
  AlgData.nomVal
  AlgData.note
  AlgData.opSetOps
  AlgData.ordSet
  AlgData.parallelOps
  AlgData.paramsOps
  AlgData.partialCalc
  AlgData.partialOps
  AlgData.prior
  AlgData.procOps
  AlgData.quant
  AlgData.rawSequenceOps
  AlgData.resolOps
  AlgData.resolSteps
  AlgData.sameAtom
  AlgData.sequenceOps
  AlgData.setOps
  AlgData.signalOps
  AlgData.unaryCalc
  AlgData.unaryOps
  AlgData.xformOps
  AlgData.AlgSets{AlgData.AlgSet AlgData.LSeq AlgData.RSeq AlgData.Range AlgData.SetExpr}
  AlgData.Algo{AlgData.Bool AlgData.Dim AlgData.Ellipsis AlgData.Infinit AlgData.Infinitesimal AlgData.Lit AlgData.Neighbor AlgData.Nom AlgData.Numeric AlgData.Op AlgData.Pref AlgData.Punctuation AlgData.Quant AlgData.Sets AlgData.Solver AlgData.Und AlgData.Unit neighbourExpr neighbourOp slvBooks slvDefs slvDoc slvVars}
  AlgData.Ctx
  AlgData.Dimension{AlgData.Dimension dimDerived dimKey dimName dimScales dimSymbol dimSys favScale}
  AlgData.MetricSystem{AlgData.MetricSystem metricSystemDims metricSystemName}
  AlgData.Ops{AlgData.ACos AlgData.ACosH AlgData.ASin AlgData.ASinH AlgData.ATg AlgData.ATgH AlgData.Abs AlgData.And AlgData.Contained AlgData.Contains AlgData.Cos AlgData.CosH AlgData.DerivedFunc AlgData.Disjunct AlgData.Div AlgData.Document AlgData.ElementOf AlgData.Equals AlgData.Equation AlgData.Equiv AlgData.Exp AlgData.Fact AlgData.Floor AlgData.Func AlgData.Greater AlgData.GreaterOrEqual AlgData.Identity AlgData.Implic AlgData.Index AlgData.Intersect AlgData.InvFunc AlgData.InvRelates AlgData.Less AlgData.LessOrEqual AlgData.List AlgData.Log AlgData.Mul AlgData.Neg AlgData.Not AlgData.NotElementOf AlgData.NotEqual AlgData.Or AlgData.Params AlgData.Pos AlgData.PosOrNeg AlgData.Relates AlgData.Resol AlgData.Root AlgData.Round AlgData.Sentence AlgData.Set AlgData.Sgn AlgData.Simpl AlgData.Sin AlgData.SinH AlgData.Sub AlgData.SuchThat AlgData.Sum AlgData.System AlgData.Tg AlgData.Union}
  AlgData.Prior{AlgData.Arithmetic AlgData.Documents AlgData.Element AlgData.Exponential AlgData.Function AlgData.Geometric AlgData.Lists AlgData.Logic AlgData.Process AlgData.Relational AlgData.Sentences AlgData.SetOps AlgData.Steps}
  AlgData.RangeWing{AlgData.RangeWing wingExpr wingIncl}
  AlgData.Scale{AlgData.Scale scaleBase scaleDim scaleExpr scaleName scaleSymbol scaleWeight}
  AlgData.StrictEq{AlgData.strictEq}
module dependencies: Lib.Colors Lib.Debug Lib.Noms
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  Lib.Colors 661ee66eb71335da3fd90f984f3e9e14
  exports: dd28f8f849d9531d0a7956c1d1cf94af
import  -/  Lib.Debug f2397c47469cac64d3eb5a6b4cb67ba7
  exports: e68806ff5497d096232692f266395170
import  -/  Lib.Noms 2d56e88a289ad37b00090ddb7a06fc81
  exports: 8a9b0085f320a4deb44ddea66e85019e
  Nr 16ba174e12f4b9baf02734a198b8a408
import  -/  numbers-3000.2.0.1@numbers-3000.2.0.1-GZv4pBF6nzTGjhJL1d2zUj:Data.Number.CReal 1a55b0320066e0e2ba4dc64187eb0074
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior :: GHC.Enum.Enum AlgData.Prior
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Prior
                  AlgData.$fEnumPrior_$csucc
                  AlgData.$fEnumPrior_$cpred
                  AlgData.$fEnumPrior_$ctoEnum
                  AlgData.$fEnumPrior_$cfromEnum
                  AlgData.$fEnumPrior_$cenumFrom
                  AlgData.$fEnumPrior_$cenumFromThen
                  AlgData.$fEnumPrior_$cenumFromTo
                  AlgData.$fEnumPrior_$cenumFromThenTo -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior1 :: GHC.Prim.Int# -> AlgData.Prior
  {- Arity: 1, Strictness: <L,U>x -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior2 :: AlgData.Prior
  {- Strictness: x -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior3 :: AlgData.Prior
  {- Strictness: x -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cenumFrom :: AlgData.Prior -> [AlgData.Prior]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.enumFrom} True True} let {
                                                                  x0 :: GHC.Prim.Int#
                                                                  = GHC.Prim.dataToTag#
                                                                      @ AlgData.Prior
                                                                      a
                                                                } in
                                                                case GHC.Prim.tagToEnum#
                                                                       @ GHC.Types.Bool
                                                                       (GHC.Prim.>#
                                                                          x0
                                                                          12#) of wild {
                                                                  GHC.Types.False
                                                                  -> AlgData.$fEnumPrior_go x0
                                                                  GHC.Types.True
                                                                  -> GHC.Types.[]
                                                                       @ AlgData.Prior }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cenumFromThen ::
    AlgData.Prior -> AlgData.Prior -> [AlgData.Prior]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.enumFromThen} True True} let {
                                                                      a# :: GHC.Prim.Int#
                                                                      = GHC.Prim.dataToTag#
                                                                          @ AlgData.Prior
                                                                          a
                                                                    } in
                                                                    let {
                                                                      b# :: GHC.Prim.Int#
                                                                      = GHC.Prim.dataToTag#
                                                                          @ AlgData.Prior
                                                                          b
                                                                    } in
                                                                    let {
                                                                      $j :: GHC.Prim.Int#
                                                                            -> [AlgData.Prior]
                                                                        {- Arity: 1,
                                                                           Strictness: <S,U> -}
                                                                      = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                        case GHC.Prim.tagToEnum#
                                                                               @ GHC.Types.Bool
                                                                               (GHC.Prim.>=#
                                                                                  b#
                                                                                  a#) of wild {
                                                                          GHC.Types.False
                                                                          -> GHC.Enum.efdtIntDnFB
                                                                               @ [AlgData.Prior]
                                                                               AlgData.$fEnumPrior_c1
                                                                               (GHC.Types.[]
                                                                                  @ AlgData.Prior)
                                                                               a#
                                                                               b#
                                                                               y
                                                                          GHC.Types.True
                                                                          -> GHC.Enum.efdtIntUpFB
                                                                               @ [AlgData.Prior]
                                                                               AlgData.$fEnumPrior_c1
                                                                               (GHC.Types.[]
                                                                                  @ AlgData.Prior)
                                                                               a#
                                                                               b#
                                                                               y }
                                                                    } in
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.>#
                                                                              a#
                                                                              b#) of wild {
                                                                      GHC.Types.False -> $j 12#
                                                                      GHC.Types.True -> $j 0# }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cenumFromThenTo ::
    AlgData.Prior -> AlgData.Prior -> AlgData.Prior -> [AlgData.Prior]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: AlgData.Prior)
                   (x2 :: AlgData.Prior)
                   (y :: AlgData.Prior) ->
                 let {
                   x4 :: GHC.Prim.Int#
                   = {__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                       @ AlgData.Prior
                                                                       x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int#
                   = {__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                       @ AlgData.Prior
                                                                       x2
                 } in
                 {__scc {main@main:AlgData.fromEnum} True False} {__scc {main@main:AlgData.fromEnum} True False} {__scc {main@main:AlgData.fromEnum} True False} case GHC.Prim.tagToEnum#
                                                                                                                                                                        @ GHC.Types.Bool
                                                                                                                                                                        (GHC.Prim.>=#
                                                                                                                                                                           x5
                                                                                                                                                                           x4) of wild {
                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                   -> GHC.Enum.efdtIntDnFB
                                                                                                                                                                        @ [AlgData.Prior]
                                                                                                                                                                        AlgData.$fEnumPrior_c
                                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                                           @ AlgData.Prior)
                                                                                                                                                                        x4
                                                                                                                                                                        x5
                                                                                                                                                                        ({__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                           @ AlgData.Prior
                                                                                                                                                                                                                           y)
                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                   -> GHC.Enum.efdtIntUpFB
                                                                                                                                                                        @ [AlgData.Prior]
                                                                                                                                                                        AlgData.$fEnumPrior_c
                                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                                           @ AlgData.Prior)
                                                                                                                                                                        x4
                                                                                                                                                                        x5
                                                                                                                                                                        ({__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                           @ AlgData.Prior
                                                                                                                                                                                                                           y) }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cenumFromTo ::
    AlgData.Prior -> AlgData.Prior -> [AlgData.Prior]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: AlgData.Prior) (y :: AlgData.Prior) ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = {__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                       @ AlgData.Prior
                                                                       x
                 } in
                 let {
                   y1 :: GHC.Prim.Int#
                   = {__scc {main@main:AlgData.fromEnum} False True} GHC.Prim.dataToTag#
                                                                       @ AlgData.Prior
                                                                       y
                 } in
                 {__scc {main@main:AlgData.fromEnum} True False} {__scc {main@main:AlgData.fromEnum} True False} case GHC.Prim.tagToEnum#
                                                                                                                        @ GHC.Types.Bool
                                                                                                                        (GHC.Prim.>#
                                                                                                                           x0
                                                                                                                           y1) of wild {
                                                                                                                   GHC.Types.False
                                                                                                                   -> letrec {
                                                                                                                        go4 :: GHC.Prim.Int#
                                                                                                                               -> [AlgData.Prior]
                                                                                                                          {- Arity: 1,
                                                                                                                             Strictness: <L,U> -}
                                                                                                                        = \ (x1 :: GHC.Prim.Int#) ->
                                                                                                                          GHC.Types.:
                                                                                                                            @ AlgData.Prior
                                                                                                                            ({__scc {main@main:AlgData.toEnum} True True} case GHC.Prim.tagToEnum#
                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                 (GHC.Prim.>=#
                                                                                                                                                                                    x1
                                                                                                                                                                                    0#) of wild1 {
                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                            -> AlgData.$fEnumPrior1
                                                                                                                                                                                 x1
                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                            -> case GHC.Prim.tagToEnum#
                                                                                                                                                                                      @ GHC.Types.Bool
                                                                                                                                                                                      (GHC.Prim.<=#
                                                                                                                                                                                         x1
                                                                                                                                                                                         12#) of wild2 {
                                                                                                                                                                                 GHC.Types.False
                                                                                                                                                                                 -> AlgData.$fEnumPrior1
                                                                                                                                                                                      x1
                                                                                                                                                                                 GHC.Types.True
                                                                                                                                                                                 -> GHC.Prim.tagToEnum#
                                                                                                                                                                                      @ AlgData.Prior
                                                                                                                                                                                      x1 } })
                                                                                                                            (case GHC.Prim.tagToEnum#
                                                                                                                                    @ GHC.Types.Bool
                                                                                                                                    (GHC.Prim.==#
                                                                                                                                       x1
                                                                                                                                       y1) of wild1 {
                                                                                                                               GHC.Types.False
                                                                                                                               -> go4
                                                                                                                                    (GHC.Prim.+#
                                                                                                                                       x1
                                                                                                                                       1#)
                                                                                                                               GHC.Types.True
                                                                                                                               -> GHC.Types.[]
                                                                                                                                    @ AlgData.Prior })
                                                                                                                      } in
                                                                                                                      go4
                                                                                                                        x0
                                                                                                                   GHC.Types.True
                                                                                                                   -> GHC.Types.[]
                                                                                                                        @ AlgData.Prior }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cfromEnum :: AlgData.Prior -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.fromEnum} True True} case a of x1 { DEFAULT ->
                                                                GHC.Types.I#
                                                                  (GHC.Prim.dataToTag#
                                                                     @ AlgData.Prior
                                                                     x1) }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$cpred :: AlgData.Prior -> AlgData.Prior
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.pred} True True} case a of x1 { DEFAULT ->
                                                            case GHC.Prim.dataToTag#
                                                                   @ AlgData.Prior
                                                                   x1 of wild {
                                                              DEFAULT
                                                              -> GHC.Prim.tagToEnum#
                                                                   @ AlgData.Prior
                                                                   (GHC.Prim.+# wild -1#)
                                                              0# -> AlgData.$fEnumPrior2 } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$csucc :: AlgData.Prior -> AlgData.Prior
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.succ} True True} case a of x1 { DEFAULT ->
                                                            case GHC.Prim.dataToTag#
                                                                   @ AlgData.Prior
                                                                   x1 of wild {
                                                              DEFAULT
                                                              -> GHC.Prim.tagToEnum#
                                                                   @ AlgData.Prior
                                                                   (GHC.Prim.+# wild 1#)
                                                              12# -> AlgData.$fEnumPrior3 } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_$ctoEnum :: GHC.Types.Int -> AlgData.Prior
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> AlgData.$w$ctoEnum ww1 }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_c ::
    GHC.Types.Int -> [AlgData.Prior] -> [AlgData.Prior]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [AlgData.Prior]) ->
                 GHC.Types.: @ AlgData.Prior (AlgData.$fEnumPrior_$ctoEnum x) ys) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_c1 ::
    GHC.Types.Int -> [AlgData.Prior] -> [AlgData.Prior]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [AlgData.Prior]) ->
                 GHC.Types.:
                   @ AlgData.Prior
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ AlgData.Prior a })
                   ys) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEnumPrior_go :: GHC.Prim.Int# -> [AlgData.Prior]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
4d637072ad901205bf793a262f526c33
  $fEqAlgSets :: GHC.Classes.Eq AlgData.AlgSets
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.AlgSets
                  AlgData.$fEqAlgSets_$c==
                  AlgData.$fEqAlgSets_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqAlgSets_$c/= ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 GHC.Classes.not (AlgData.$fEqAlgSets_$c== x y)) -}
4d637072ad901205bf793a262f526c33
  $fEqAlgSets_$c== ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: AlgData.AlgSets) (ds1 :: AlgData.AlgSets) ->
                 {__scc {main@main:AlgData.==} True True} case ds of wild {
                                                            DEFAULT -> GHC.Types.False
                                                            AlgData.AlgSet a ds2 ds3 ds4
                                                            -> case ds1 of wild1 {
                                                                 DEFAULT -> GHC.Types.False
                                                                 AlgData.AlgSet b ds5 ds6 ds7
                                                                 -> GHC.Base.eqString a b }
                                                            AlgData.Range l1 r1
                                                            -> case ds1 of wild1 {
                                                                 DEFAULT -> GHC.Types.False
                                                                 AlgData.Range l2 r2
                                                                 -> case l1 of ww { AlgData.RangeWing ww1 ww2 ->
                                                                    case l2 of ww3 { AlgData.RangeWing ww4 ww5 ->
                                                                    {__scc {main@main:AlgData.==} True False} case ww1 of wild2 {
                                                                                                                GHC.Types.False
                                                                                                                -> case ww4 of wild3 {
                                                                                                                     GHC.Types.False
                                                                                                                     -> case {__scc {main@main:AlgData.==} False True} AlgData.$fEqAlgSets_$c==2
                                                                                                                                                                         ww2
                                                                                                                                                                         ww5 of wild4 {
                                                                                                                          GHC.Types.False
                                                                                                                          -> GHC.Types.False
                                                                                                                          GHC.Types.True
                                                                                                                          -> AlgData.$fEqAlgSets_$c==1
                                                                                                                               r1
                                                                                                                               r2 }
                                                                                                                     GHC.Types.True
                                                                                                                     -> GHC.Types.False }
                                                                                                                GHC.Types.True
                                                                                                                -> case ww4 of wild3 {
                                                                                                                     GHC.Types.False
                                                                                                                     -> GHC.Types.False
                                                                                                                     GHC.Types.True
                                                                                                                     -> case {__scc {main@main:AlgData.==} False True} AlgData.$fEqAlgSets_$c==2
                                                                                                                                                                         ww2
                                                                                                                                                                         ww5 of wild4 {
                                                                                                                          GHC.Types.False
                                                                                                                          -> GHC.Types.False
                                                                                                                          GHC.Types.True
                                                                                                                          -> AlgData.$fEqAlgSets_$c==1
                                                                                                                               r1
                                                                                                                               r2 } } } } } } }) -}
4d637072ad901205bf793a262f526c33
  $fEqAlgSets_$c==1 ::
    AlgData.RangeWing -> AlgData.RangeWing -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.RangeWing) (w1 :: AlgData.RangeWing) ->
                 case w of ww { AlgData.RangeWing ww1 ww2 ->
                 case w1 of ww3 { AlgData.RangeWing ww4 ww5 ->
                 AlgData.$w$c== ww1 ww2 ww4 ww5 } }) -}
4d637072ad901205bf793a262f526c33
  $fEqAlgSets_$c==2 :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U> -}
4d637072ad901205bf793a262f526c33
  $fEqAlgo :: GHC.Classes.Eq AlgData.Algo
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Algo AlgData.$fEqAlgSets_$c==2 AlgData.$fEqAlgo_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqAlgo_$c/= :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 GHC.Classes.not (AlgData.$fEqAlgSets_$c==2 x y)) -}
4d637072ad901205bf793a262f526c33
  $fEqDimension :: GHC.Classes.Eq AlgData.Dimension
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Dimension
                  AlgData.$fEqDimension_$c==
                  AlgData.$fEqDimension_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqDimension_$c/= ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 GHC.Classes.not (AlgData.$fEqDimension_$c== x y)) -}
4d637072ad901205bf793a262f526c33
  $fEqDimension_$c== ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LLLLLL),1*U(1*U(1*U,A),1*U,A,A,A,A,A)><S(S(SL)LLLLLL),1*U(1*U(1*U,A),1*U,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Dimension) (w1 :: AlgData.Dimension) ->
                 case w of ww { AlgData.Dimension ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { AlgData.MetricSystem ww9 ww10 ->
                 case w1 of ww11 { AlgData.Dimension ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                 case ww12 of ww19 { AlgData.MetricSystem ww20 ww21 ->
                 AlgData.$w$c==1 ww9 ww2 ww20 ww13 } } } }) -}
4d637072ad901205bf793a262f526c33
  $fEqMetricSystem :: GHC.Classes.Eq AlgData.MetricSystem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.MetricSystem
                  AlgData.$fEqMetricSystem_$c==
                  AlgData.$fEqMetricSystem_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqMetricSystem_$c/= ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 GHC.Classes.not (AlgData.$fEqMetricSystem_$c== x y)) -}
4d637072ad901205bf793a262f526c33
  $fEqMetricSystem_$c== ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: AlgData.MetricSystem) (ds1 :: AlgData.MetricSystem) ->
                 {__scc {main@main:AlgData.==} True True} case ds of wild { AlgData.MetricSystem a ds2 ->
                                                          case ds1 of wild1 { AlgData.MetricSystem b ds3 ->
                                                          GHC.Base.eqString a b } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fEqOps :: GHC.Classes.Eq AlgData.Ops
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Ops AlgData.$fEqOps_$c== AlgData.$fEqOps_$c/= -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fEqOps_$c/= :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData./=} True True} {__scc {main@main:AlgData.==} True False} case a of x1 { DEFAULT ->
                                                                                                    case b of x2 { DEFAULT ->
                                                                                                    case {__scc {main@main:AlgData.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                     @ GHC.Types.Bool
                                                                                                                                                     (GHC.Prim.==#
                                                                                                                                                        (GHC.Prim.dataToTag#
                                                                                                                                                           @ AlgData.Ops
                                                                                                                                                           x1)
                                                                                                                                                        (GHC.Prim.dataToTag#
                                                                                                                                                           @ AlgData.Ops
                                                                                                                                                           x2)) of wild {
                                                                                                      GHC.Types.False
                                                                                                      -> GHC.Types.True
                                                                                                      GHC.Types.True
                                                                                                      -> GHC.Types.False } } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fEqOps_$c== :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.==} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.==#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x2)) } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEqPrior :: GHC.Classes.Eq AlgData.Prior
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Prior AlgData.$fEqPrior_$c== AlgData.$fEqPrior_$c/= -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEqPrior_$c/= :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData./=} True True} {__scc {main@main:AlgData.==} True False} case a of x1 { DEFAULT ->
                                                                                                    case b of x2 { DEFAULT ->
                                                                                                    case {__scc {main@main:AlgData.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                     @ GHC.Types.Bool
                                                                                                                                                     (GHC.Prim.==#
                                                                                                                                                        (GHC.Prim.dataToTag#
                                                                                                                                                           @ AlgData.Prior
                                                                                                                                                           x1)
                                                                                                                                                        (GHC.Prim.dataToTag#
                                                                                                                                                           @ AlgData.Prior
                                                                                                                                                           x2)) of wild {
                                                                                                      GHC.Types.False
                                                                                                      -> GHC.Types.True
                                                                                                      GHC.Types.True
                                                                                                      -> GHC.Types.False } } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fEqPrior_$c== :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.==} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.==#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x2)) } }) -}
4d637072ad901205bf793a262f526c33
  $fEqRangeWing :: GHC.Classes.Eq AlgData.RangeWing
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.RangeWing
                  AlgData.$fEqAlgSets_$c==1
                  AlgData.$fEqRangeWing_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqRangeWing_$c/= ::
    AlgData.RangeWing -> AlgData.RangeWing -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.RangeWing) (b :: AlgData.RangeWing) ->
                 {__scc {main@main:AlgData./=} True True} case AlgData.$fEqAlgSets_$c==1
                                                                 a
                                                                 b of wild {
                                                            GHC.Types.False -> GHC.Types.True
                                                            GHC.Types.True -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fEqScale :: GHC.Classes.Eq AlgData.Scale
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Scale AlgData.$fEqScale_$c== AlgData.$fEqScale_$c/= -}
4d637072ad901205bf793a262f526c33
  $fEqScale_$c/= :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 GHC.Classes.not (AlgData.$fEqScale_$c== x y)) -}
4d637072ad901205bf793a262f526c33
  $fEqScale_$c== :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(SL)LLLLLL)LLLLL),1*U(1*U(1*U(1*U,A),1*U,A,A,A,A,A),A,A,U,A,A)><S(S(S(SL)LLLLLL)LLLLL),1*U(1*U(1*U(1*U,A),1*U,A,A,A,A,A),A,A,U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Scale) (w1 :: AlgData.Scale) ->
                 case w of ww { AlgData.Scale ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { AlgData.Dimension ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case ww8 of ww15 { AlgData.MetricSystem ww16 ww17 ->
                 case w1 of ww18 { AlgData.Scale ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case ww19 of ww25 { AlgData.Dimension ww26 ww27 ww28 ww29 ww30 ww31 ww32 ->
                 case ww26 of ww33 { AlgData.MetricSystem ww34 ww35 ->
                 AlgData.$w$c==2 ww16 ww9 ww4 ww34 ww27 ww22 } } } } } }) -}
4d637072ad901205bf793a262f526c33
  $fMonoidAlgo :: GHC.Base.Monoid AlgData.Algo
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Algo
                  AlgData.$fMonoidAlgo_$cmempty
                  AlgData.$fMonoidAlgo_$cmappend
                  AlgData.$fMonoidAlgo_$cmconcat -}
4d637072ad901205bf793a262f526c33
  $fMonoidAlgo_$cmappend ::
    AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: AlgData.Algo) (ds1 :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.mappend} True True} case ds of wild {
                                                                 DEFAULT
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT
                                                                      -> let {
                                                                           fail :: GHC.Prim.Void#
                                                                                   -> AlgData.Algo
                                                                             {- Arity: 1,
                                                                                Strictness: <L,A> -}
                                                                           = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                                                                             case wild1 of wild2 {
                                                                               DEFAULT
                                                                               -> case wild of wild3 {
                                                                                    DEFAULT
                                                                                    -> AlgData.Op
                                                                                         AlgData.List
                                                                                         (GHC.Types.:
                                                                                            @ AlgData.Algo
                                                                                            wild3
                                                                                            (GHC.Types.:
                                                                                               @ AlgData.Algo
                                                                                               wild2
                                                                                               (GHC.Types.[]
                                                                                                  @ AlgData.Algo)))
                                                                                    AlgData.Op op m
                                                                                    -> AlgData.Op
                                                                                         op
                                                                                         (GHC.Base.++
                                                                                            @ AlgData.Algo
                                                                                            m
                                                                                            (GHC.Types.:
                                                                                               @ AlgData.Algo
                                                                                               wild2
                                                                                               (GHC.Types.[]
                                                                                                  @ AlgData.Algo))) }
                                                                               AlgData.Op op m
                                                                               -> AlgData.Op
                                                                                    op
                                                                                    (GHC.Types.:
                                                                                       @ AlgData.Algo
                                                                                       wild
                                                                                       m) }
                                                                         } in
                                                                         case wild of wild2 {
                                                                           DEFAULT
                                                                           -> fail GHC.Prim.void#
                                                                           AlgData.Op op1 m1
                                                                           -> case wild1 of wild3 {
                                                                                DEFAULT
                                                                                -> fail
                                                                                     GHC.Prim.void#
                                                                                AlgData.Op op2 m2
                                                                                -> {__scc {main@main:AlgData.==} True False} case {__scc {main@main:AlgData.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                              @ GHC.Types.Bool
                                                                                                                                                                              (GHC.Prim.==#
                                                                                                                                                                                 (GHC.Prim.dataToTag#
                                                                                                                                                                                    @ AlgData.Ops
                                                                                                                                                                                    op1)
                                                                                                                                                                                 (GHC.Prim.dataToTag#
                                                                                                                                                                                    @ AlgData.Ops
                                                                                                                                                                                    op2)) of wild4 {
                                                                                                                               GHC.Types.False
                                                                                                                               -> {__scc {main@main:AlgData.==} True False} case {__scc {main@main:AlgData.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                             @ AlgData.Ops
                                                                                                                                                                                                                             op2 of wild5 {
                                                                                                                                                                              DEFAULT
                                                                                                                                                                              -> AlgData.Op
                                                                                                                                                                                   op1
                                                                                                                                                                                   (GHC.Base.++
                                                                                                                                                                                      @ AlgData.Algo
                                                                                                                                                                                      m1
                                                                                                                                                                                      (GHC.Types.:
                                                                                                                                                                                         @ AlgData.Algo
                                                                                                                                                                                         wild3
                                                                                                                                                                                         (GHC.Types.[]
                                                                                                                                                                                            @ AlgData.Algo)))
                                                                                                                                                                              4#
                                                                                                                                                                              -> AlgData.Op
                                                                                                                                                                                   op1
                                                                                                                                                                                   (GHC.Base.++
                                                                                                                                                                                      @ AlgData.Algo
                                                                                                                                                                                      m1
                                                                                                                                                                                      m2) }
                                                                                                                               GHC.Types.True
                                                                                                                               -> AlgData.Op
                                                                                                                                    op1
                                                                                                                                    (GHC.Base.++
                                                                                                                                       @ AlgData.Algo
                                                                                                                                       m1
                                                                                                                                       m2) } } }
                                                                      AlgData.Und -> wild }
                                                                 AlgData.Und -> ds1 }) -}
4d637072ad901205bf793a262f526c33
  $fMonoidAlgo_$cmconcat :: [AlgData.Algo] -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [AlgData.Algo]) ->
                 AlgData.$fMonoidAlgo_go eta) -}
4d637072ad901205bf793a262f526c33
  $fMonoidAlgo_$cmempty :: AlgData.Algo
  {- Unfolding: ({__scc {main@main:AlgData.mempty} True False} AlgData.Und) -}
4d637072ad901205bf793a262f526c33
  $fMonoidAlgo_go :: [AlgData.Algo] -> AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U> -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets :: GHC.Classes.Ord AlgData.AlgSets
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.AlgSets
                  AlgData.$fEqAlgSets
                  AlgData.$fOrdAlgSets_$ccompare
                  AlgData.$fOrdAlgSets_$c<
                  AlgData.$fOrdAlgSets_$c<=
                  AlgData.$fOrdAlgSets_$c>
                  AlgData.$fOrdAlgSets_$c>=
                  AlgData.$fOrdAlgSets_$cmax
                  AlgData.$fOrdAlgSets_$cmin -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$c< ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$c<= ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$c> ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$c>= ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$ccompare ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Ordering
  {- Unfolding: ({__scc {main@main:AlgData.compare} True True} AlgData.ordSet) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$cmax ::
    AlgData.AlgSets -> AlgData.AlgSets -> AlgData.AlgSets
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgSets_$cmin ::
    AlgData.AlgSets -> AlgData.AlgSets -> AlgData.AlgSets
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.AlgSets) (y :: AlgData.AlgSets) ->
                 case AlgData.$fOrdAlgSets_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo :: GHC.Classes.Ord AlgData.Algo
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Algo
                  AlgData.$fEqAlgo
                  AlgData.$fOrdAlgo_$ccompare
                  AlgData.$fOrdAlgo_$c<
                  AlgData.$fOrdAlgo_$c<=
                  AlgData.$fOrdAlgo_$c>
                  AlgData.$fOrdAlgo_$c>=
                  AlgData.$fOrdAlgo_$cmax
                  AlgData.$fOrdAlgo_$cmin -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$c< :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$c<= :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$c> :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$c>= :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$ccompare ::
    AlgData.Algo -> AlgData.Algo -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$cmax :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
4d637072ad901205bf793a262f526c33
  $fOrdAlgo_$cmin :: AlgData.Algo -> AlgData.Algo -> AlgData.Algo
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Algo) (y :: AlgData.Algo) ->
                 case AlgData.$fOrdAlgo_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension :: GHC.Classes.Ord AlgData.Dimension
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Dimension
                  AlgData.$fEqDimension
                  AlgData.$fOrdDimension_$ccompare
                  AlgData.$fOrdDimension_$c<
                  AlgData.$fOrdDimension_$c<=
                  AlgData.$fOrdDimension_$c>
                  AlgData.$fOrdDimension_$c>=
                  AlgData.$fOrdDimension_$cmax
                  AlgData.$fOrdDimension_$cmin -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$c< ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)><S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$c<= ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)><S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$c> ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)><S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$c>= ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)><S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$ccompare ::
    AlgData.Dimension -> AlgData.Dimension -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)><S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Dimension) (b :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                 ({__scc {main@main:AlgData.dimName} True True} case a of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                ds1 })
                                                                 ({__scc {main@main:AlgData.dimName} True True} case b of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                ds1 })) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$cmax ::
    AlgData.Dimension -> AlgData.Dimension -> AlgData.Dimension
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)><S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
4d637072ad901205bf793a262f526c33
  $fOrdDimension_$cmin ::
    AlgData.Dimension -> AlgData.Dimension -> AlgData.Dimension
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLL),U(U,U,U,U,U,U,U)><S(LSLLLLL),U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Dimension) (y :: AlgData.Dimension) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.dimName} True True} case x of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 })
                                                                      ({__scc {main@main:AlgData.dimName} True True} case y of wild { AlgData.Dimension ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                                                                     ds1 }) of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem :: GHC.Classes.Ord AlgData.MetricSystem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.MetricSystem
                  AlgData.$fEqMetricSystem
                  AlgData.$fOrdMetricSystem_$ccompare
                  AlgData.$fOrdMetricSystem_$c<
                  AlgData.$fOrdMetricSystem_$c<=
                  AlgData.$fOrdMetricSystem_$c>
                  AlgData.$fOrdMetricSystem_$c>=
                  AlgData.$fOrdMetricSystem_$cmax
                  AlgData.$fOrdMetricSystem_$cmin -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$c< ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$c<= ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$c> ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$c>= ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$ccompare ::
    AlgData.MetricSystem -> AlgData.MetricSystem -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.MetricSystem) (b :: AlgData.MetricSystem) ->
                 {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                 ({__scc {main@main:AlgData.metricSystemName} True True} case a of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                         ds })
                                                                 ({__scc {main@main:AlgData.metricSystemName} True True} case b of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                         ds })) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$cmax ::
    AlgData.MetricSystem
    -> AlgData.MetricSystem -> AlgData.MetricSystem
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
4d637072ad901205bf793a262f526c33
  $fOrdMetricSystem_$cmin ::
    AlgData.MetricSystem
    -> AlgData.MetricSystem -> AlgData.MetricSystem
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.MetricSystem) (y :: AlgData.MetricSystem) ->
                 case {__scc {main@main:AlgData.compare} True True} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case x of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds })
                                                                      ({__scc {main@main:AlgData.metricSystemName} True True} case y of wild { AlgData.MetricSystem ds ds1 ->
                                                                                                                              ds }) of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps :: GHC.Classes.Ord AlgData.Ops
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Ops
                  AlgData.$fEqOps
                  AlgData.$fOrdOps_$ccompare
                  AlgData.$fOrdOps_$c<
                  AlgData.$fOrdOps_$c<=
                  AlgData.$fOrdOps_$c>
                  AlgData.$fOrdOps_$c>=
                  AlgData.$fOrdOps_$cmax
                  AlgData.$fOrdOps_$cmin -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$c< :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.<} True True} case a of x1 { DEFAULT ->
                                                         case b of x2 { DEFAULT ->
                                                         GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<#
                                                              (GHC.Prim.dataToTag# @ AlgData.Ops x1)
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Ops
                                                                 x2)) } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$c<= :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.<=} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x2)) } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$c> :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.>} True True} case a of x1 { DEFAULT ->
                                                         case b of x2 { DEFAULT ->
                                                         GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.>#
                                                              (GHC.Prim.dataToTag# @ AlgData.Ops x1)
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Ops
                                                                 x2)) } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$c>= :: AlgData.Ops -> AlgData.Ops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.>=} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Ops
                                                                  x2)) } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$ccompare ::
    AlgData.Ops -> AlgData.Ops -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Ops) (b :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.compare} True True} case a of x1 { DEFAULT ->
                                                               case b of x2 { DEFAULT ->
                                                               let {
                                                                 b# :: GHC.Prim.Int#
                                                                 = GHC.Prim.dataToTag#
                                                                     @ AlgData.Ops
                                                                     x2
                                                               } in
                                                               let {
                                                                 a# :: GHC.Prim.Int#
                                                                 = GHC.Prim.dataToTag#
                                                                     @ AlgData.Ops
                                                                     x1
                                                               } in
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<# a# b#) of wild {
                                                                 GHC.Types.False
                                                                 -> case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.==#
                                                                              a#
                                                                              b#) of wild1 {
                                                                      GHC.Types.False
                                                                      -> GHC.Types.GT
                                                                      GHC.Types.True
                                                                      -> GHC.Types.EQ }
                                                                 GHC.Types.True
                                                                 -> GHC.Types.LT } } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$cmax :: AlgData.Ops -> AlgData.Ops -> AlgData.Ops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Ops) (y :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.<=} True False} case x of x1 { DEFAULT ->
                                                           case y of x2 { DEFAULT ->
                                                           case {__scc {main@main:AlgData.<=} False True} GHC.Prim.tagToEnum#
                                                                                                            @ GHC.Types.Bool
                                                                                                            (GHC.Prim.<=#
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Ops
                                                                                                                  x1)
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Ops
                                                                                                                  x2)) of wild {
                                                             GHC.Types.False -> x1
                                                             GHC.Types.True -> x2 } } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fOrdOps_$cmin :: AlgData.Ops -> AlgData.Ops -> AlgData.Ops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Ops) (y :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.<=} True False} case x of x1 { DEFAULT ->
                                                           case y of x2 { DEFAULT ->
                                                           case {__scc {main@main:AlgData.<=} False True} GHC.Prim.tagToEnum#
                                                                                                            @ GHC.Types.Bool
                                                                                                            (GHC.Prim.<=#
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Ops
                                                                                                                  x1)
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Ops
                                                                                                                  x2)) of wild {
                                                             GHC.Types.False -> x2
                                                             GHC.Types.True -> x1 } } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior :: GHC.Classes.Ord AlgData.Prior
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Prior
                  AlgData.$fEqPrior
                  AlgData.$fOrdPrior_$ccompare
                  AlgData.$fOrdPrior_$c<
                  AlgData.$fOrdPrior_$c<=
                  AlgData.$fOrdPrior_$c>
                  AlgData.$fOrdPrior_$c>=
                  AlgData.$fOrdPrior_$cmax
                  AlgData.$fOrdPrior_$cmin -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$c< :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.<} True True} case a of x1 { DEFAULT ->
                                                         case b of x2 { DEFAULT ->
                                                         GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<#
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Prior
                                                                 x1)
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Prior
                                                                 x2)) } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$c<= :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.<=} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.<=#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x2)) } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$c> :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.>} True True} case a of x1 { DEFAULT ->
                                                         case b of x2 { DEFAULT ->
                                                         GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.>#
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Prior
                                                                 x1)
                                                              (GHC.Prim.dataToTag#
                                                                 @ AlgData.Prior
                                                                 x2)) } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$c>= :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.>=} True True} case a of x1 { DEFAULT ->
                                                          case b of x2 { DEFAULT ->
                                                          GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.>=#
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x1)
                                                               (GHC.Prim.dataToTag#
                                                                  @ AlgData.Prior
                                                                  x2)) } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$ccompare ::
    AlgData.Prior -> AlgData.Prior -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AlgData.Prior) (b :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.compare} True True} case a of x1 { DEFAULT ->
                                                               case b of x2 { DEFAULT ->
                                                               let {
                                                                 b# :: GHC.Prim.Int#
                                                                 = GHC.Prim.dataToTag#
                                                                     @ AlgData.Prior
                                                                     x2
                                                               } in
                                                               let {
                                                                 a# :: GHC.Prim.Int#
                                                                 = GHC.Prim.dataToTag#
                                                                     @ AlgData.Prior
                                                                     x1
                                                               } in
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.<# a# b#) of wild {
                                                                 GHC.Types.False
                                                                 -> case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.==#
                                                                              a#
                                                                              b#) of wild1 {
                                                                      GHC.Types.False
                                                                      -> GHC.Types.GT
                                                                      GHC.Types.True
                                                                      -> GHC.Types.EQ }
                                                                 GHC.Types.True
                                                                 -> GHC.Types.LT } } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$cmax :: AlgData.Prior -> AlgData.Prior -> AlgData.Prior
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Prior) (y :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.<=} True False} case x of x1 { DEFAULT ->
                                                           case y of x2 { DEFAULT ->
                                                           case {__scc {main@main:AlgData.<=} False True} GHC.Prim.tagToEnum#
                                                                                                            @ GHC.Types.Bool
                                                                                                            (GHC.Prim.<=#
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Prior
                                                                                                                  x1)
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Prior
                                                                                                                  x2)) of wild {
                                                             GHC.Types.False -> x1
                                                             GHC.Types.True -> x2 } } }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fOrdPrior_$cmin :: AlgData.Prior -> AlgData.Prior -> AlgData.Prior
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Prior) (y :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.<=} True False} case x of x1 { DEFAULT ->
                                                           case y of x2 { DEFAULT ->
                                                           case {__scc {main@main:AlgData.<=} False True} GHC.Prim.tagToEnum#
                                                                                                            @ GHC.Types.Bool
                                                                                                            (GHC.Prim.<=#
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Prior
                                                                                                                  x1)
                                                                                                               (GHC.Prim.dataToTag#
                                                                                                                  @ AlgData.Prior
                                                                                                                  x2)) of wild {
                                                             GHC.Types.False -> x2
                                                             GHC.Types.True -> x1 } } }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale :: GHC.Classes.Ord AlgData.Scale
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Scale
                  AlgData.$fEqScale
                  AlgData.$fOrdScale_$ccompare
                  AlgData.$fOrdScale_$c<
                  AlgData.$fOrdScale_$c<=
                  AlgData.$fOrdScale_$c>
                  AlgData.$fOrdScale_$c>=
                  AlgData.$fOrdScale_$cmax
                  AlgData.$fOrdScale_$cmin -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$c< :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)><S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$c<= :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)><S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$c> :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)><S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$c>= :: AlgData.Scale -> AlgData.Scale -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)><S(SLLLLL),U(U(U,U,U,U,U,U,U),A,U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$ccompare ::
    AlgData.Scale -> AlgData.Scale -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),A,1*U,A,A,A)><S(SLLLLL),U(U(U,U,U,U,U,U,U),A,1*U,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.Scale) (w1 :: AlgData.Scale) ->
                 case w of ww { AlgData.Scale ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { AlgData.Dimension ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case w1 of ww15 { AlgData.Scale ww16 ww17 ww18 ww19 ww20 ww21 ->
                 case ww16 of ww22 { AlgData.Dimension ww23 ww24 ww25 ww26 ww27 ww28 ww29 ->
                 {__scc {main@main:AlgData.compare} True True} {__scc {main@main:AlgData.scaleDim} True False} {__scc {main@main:AlgData.scaleDim} True False} case {__scc {main@main:AlgData.compare} True True} {__scc {main@main:AlgData.dimName} True False} {__scc {main@main:AlgData.dimName} True False} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                                                                                                                                                                                                                  ww9
                                                                                                                                                                                                                                                                                                                  ww24 of wild {
                                                                                                                                                                 DEFAULT
                                                                                                                                                                 -> {__scc {main@main:AlgData.scaleDim} True False} {__scc {main@main:AlgData.scaleDim} True False} {__scc {main@main:AlgData.compare} True True} {__scc {main@main:AlgData.dimName} True False} {__scc {main@main:AlgData.dimName} True False} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                                                                                                                                                                                                                                                                                                                  ww9
                                                                                                                                                                                                                                                                                                                                                                                                                  ww24
                                                                                                                                                                 GHC.Types.EQ
                                                                                                                                                                 -> {__scc {main@main:AlgData.scaleName} True False} {__scc {main@main:AlgData.scaleName} True False} GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                                                                                                                                                                        ww3
                                                                                                                                                                                                                                                                        ww18 } } } } }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$cmax :: AlgData.Scale -> AlgData.Scale -> AlgData.Scale
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),U,U,U,U,U)><S(SLLLLL),U(U(U,U,U,U,U,U,U),U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
4d637072ad901205bf793a262f526c33
  $fOrdScale_$cmin :: AlgData.Scale -> AlgData.Scale -> AlgData.Scale
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),U(U(U,U,U,U,U,U,U),U,U,U,U,U)><S(SLLLLL),U(U(U,U,U,U,U,U,U),U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: AlgData.Scale) (y :: AlgData.Scale) ->
                 case AlgData.$fOrdScale_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fShowOps :: GHC.Show.Show AlgData.Ops
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Ops
                  AlgData.$fShowOps_$cshowsPrec
                  AlgData.$fShowOps_$cshow
                  AlgData.$fShowOps_$cshowList -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fShowOps1 :: AlgData.Ops -> GHC.Show.ShowS
  {- Unfolding: ({__scc {main@main:AlgData.showList} False True} AlgData.$w$cshowsPrec) -}
db43966cca22b8371724dbafe6b55379
  $fShowOps10 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps11) -}
08d3c1218328c12b9cb253e6bd90c0fc
  $fShowOps100 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps101) -}
dc513a24a79373901df5f9a671abb135
  $fShowOps101 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sum"#) -}
b06580f2b692510745fd6e900a5ffc67
  $fShowOps102 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps103) -}
4ad889d569ac153a3dc5057d0c7ed4b5
  $fShowOps103 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "PosOrNeg"#) -}
0e577c3de943435f34a28e1e9015cbbd
  $fShowOps104 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps105) -}
5dd8717806f25228e902778d318b9e59
  $fShowOps105 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Pos"#) -}
8eb7f59adc8ade0517485f9ba1c2d26c
  $fShowOps106 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps107) -}
bc2541543ade0114905059ff6a66326a
  $fShowOps107 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Neg"#) -}
da091053f2c3a2216b15b46e28b1b293
  $fShowOps108 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps109) -}
166f5db6c1d94ecb2218c818c633a4ef
  $fShowOps109 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "And"#) -}
0d09a8210eb78bffb789c34f53239386
  $fShowOps11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Equiv"#) -}
e493d2e1445198e4f28e983791c52058
  $fShowOps110 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps111) -}
43c57150e1159b0a1abf5795f74d45f5
  $fShowOps111 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Or"#) -}
4dc6f7a258eb88ccebd0596948f07f44
  $fShowOps112 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps113) -}
f2fa3d79e02773f0a949287cf5e339f2
  $fShowOps113 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Not"#) -}
7ed47ea299e33dd4352dcac7ca3e3577
  $fShowOps114 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps115) -}
759cbc947f799c734f9b9b797d881345
  $fShowOps115 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "List"#) -}
b145b0b98bc9fb62b7195ded9b41b03a
  $fShowOps116 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps117) -}
1b851416b2f2dd7b3e192a0ef47c6786
  $fShowOps117 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Set"#) -}
f35fc4ace3cb4b69634dfd5307da71a8
  $fShowOps118 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps119) -}
49d8d2922d6e46494868f25926821647
  $fShowOps119 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "SuchThat"#) -}
42c6202e10109366e282c57c544782ee
  $fShowOps12 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps13) -}
d33cea117fc9419e59232cd4b1ee9157
  $fShowOps120 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps121) -}
12162098a0352f77a4cb39085eee49ba
  $fShowOps121 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sentence"#) -}
35b3ead5d6d5f00bc21687acb2db427e
  $fShowOps122 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps123) -}
c6df65b48694aa60befdc7a431bc3975
  $fShowOps123 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Identity"#) -}
305bcff3e8ecdde0216fef4915560e2f
  $fShowOps13 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "InvRelates"#) -}
c582e90cb6b89b3d1c26dc05bc416270
  $fShowOps14 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps15) -}
b62fdd9c3ad820041f23ffe7967594e4
  $fShowOps15 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Relates"#) -}
61af46ba2f7ac205ce7633edb14e0949
  $fShowOps16 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps17) -}
2ca9ff8caad704f2484d6f57406682ca
  $fShowOps17 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "NotEqual"#) -}
6945fcd1979b4aace734f0db2e76bad0
  $fShowOps18 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps19) -}
037e3a53643a5ebe155a3cc1a85a2fa4
  $fShowOps19 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "LessOrEqual"#) -}
c7b9e0293e478caa6becab0095cf28e3
  $fShowOps2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps3) -}
be41948e7d2d7017d176d7c2ad985b76
  $fShowOps20 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps21) -}
c944f6616aac8fdfb98960dd370799c9
  $fShowOps21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "GreaterOrEqual"#) -}
f190aafc2776e92788f8fccfa2cedad3
  $fShowOps22 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps23) -}
8d6e43ef436c3f074d626fc7252352a4
  $fShowOps23 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Less"#) -}
77d97968f7de17a3d16a4871ad67892e
  $fShowOps24 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps25) -}
bb144bfec5d505d47778858caeba5691
  $fShowOps25 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Greater"#) -}
2fbfe8dae5f8279d00795f45677c6b36
  $fShowOps26 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps27) -}
54217b276cbcfc27fc41396d36603ef5
  $fShowOps27 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Equals"#) -}
6fe7177a695a153e2247982e426a3d9f
  $fShowOps28 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps29) -}
f61d9298f6b5c54df0c429d2abdc9845
  $fShowOps29 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "NotElementOf"#) -}
0bb29009d3867408e303a87a48ecaa1a
  $fShowOps3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Params"#) -}
599afaead8b443d074d0b896abdc1940
  $fShowOps30 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps31) -}
7685493458241782aa2315fd9eb4b585
  $fShowOps31 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ElementOf"#) -}
45d5ca8c7c68044bbb808fbc73573d4a
  $fShowOps32 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps33) -}
ca3556caa97cf8d39983ece80c979326
  $fShowOps33 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Resol"#) -}
4aa1e8d0371ccdeb26c7d4201f664c21
  $fShowOps34 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps35) -}
fc08109023342b1eeb0e86512641559c
  $fShowOps35 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Simpl"#) -}
bffbd0fdcd165042e2555692903486fa
  $fShowOps36 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps37) -}
cc57a7a387ccc1748fd9dd25273b3728
  $fShowOps37 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Equation"#) -}
caa373731183517f673abf81c6cdaa64
  $fShowOps38 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps39) -}
d6ab7934bfeabd21dd7d326696fd6f44
  $fShowOps39 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Disjunct"#) -}
d79a708b53397cc57011e17b2fb697c5
  $fShowOps4 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps5) -}
ab4cded08b2cfef1e5758fc59cfa13be
  $fShowOps40 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps41) -}
2c20c9271c76eaee58ba1d77f436893f
  $fShowOps41 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Intersect"#) -}
5c6c3addb5ba6d9e7c4e62e351dabb56
  $fShowOps42 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps43) -}
1654462a48b894d64d697774e8c5da4c
  $fShowOps43 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Union"#) -}
8593aef3365fed8b7e76938ee7f81a01
  $fShowOps44 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps45) -}
0e8434538962286d96f232518bbe94a0
  $fShowOps45 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Contained"#) -}
9dc0d8a864b92235c33478b7f6f96cc0
  $fShowOps46 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps47) -}
6f0ecbd9bc09c63e7d49925840201f41
  $fShowOps47 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Contains"#) -}
2bea2d72a8e766a6cf6d5d7fba8731f6
  $fShowOps48 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps49) -}
5286b16048b2649b646de516aea32f95
  $fShowOps49 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Index"#) -}
93cb76da5fcdc283e56388b76e579995
  $fShowOps5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Document"#) -}
31810513fef4b6233b11426e198633fe
  $fShowOps50 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps51) -}
4a87731dfcb08a5a4a29fa4987db4b03
  $fShowOps51 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "DerivedFunc"#) -}
41abd13e537533a1c9b62a5faeda5a93
  $fShowOps52 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps53) -}
a16c3acf9cb79a5e17f290597cffc7c7
  $fShowOps53 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "InvFunc"#) -}
6cce37a2d5e5a1ceca341b059c6934a9
  $fShowOps54 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps55) -}
59027c0b12cf20526d62e29c4c55b3f9
  $fShowOps55 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Func"#) -}
3dd44d317debd5648f202962181f9afe
  $fShowOps56 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps57) -}
940658c42552ab751978d56655e39139
  $fShowOps57 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ACosH"#) -}
ba1189eb885a1672d2a0a39554835f57
  $fShowOps58 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps59) -}
0a50866998b8e5d48722622e4330f543
  $fShowOps59 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ATgH"#) -}
d738aae1363b497a21e3f07a09c432b6
  $fShowOps6 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps7) -}
06d68b57a311711c89c9d554c69eb710
  $fShowOps60 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps61) -}
a89e1b6f85ad99de372ee435ddfbafa2
  $fShowOps61 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ASinH"#) -}
34de5d7636e71d4f2a62e7c6dd29b29f
  $fShowOps62 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps63) -}
3cea06a36c5729c3b484aef781f6b391
  $fShowOps63 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "CosH"#) -}
a9efc924134b08d10776201fd0c723f0
  $fShowOps64 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps65) -}
5066a0d10b7a5c2f60178cae019097ae
  $fShowOps65 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "SinH"#) -}
4ddefecf8c3ff08decb0bca8376640fd
  $fShowOps66 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps67) -}
2fc820dee8b7fe8bcdcc33c945019753
  $fShowOps67 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ATg"#) -}
25ca90ae13c64d0477d180dc6cc9be2c
  $fShowOps68 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps69) -}
c43fe6c2504dca2eade22cc2ac028245
  $fShowOps69 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Tg"#) -}
fc6816d0025749a718b56008a7d3bd5c
  $fShowOps7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "System"#) -}
4939f9b74872cfaec6eb1cff76dca924
  $fShowOps70 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps71) -}
fb3ae2f179d6e7197e7061d095119e7c
  $fShowOps71 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ACos"#) -}
06c5f230864acb46e21f8f666805cba0
  $fShowOps72 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps73) -}
d8a0fcd5486785c219458946567f2690
  $fShowOps73 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "ASin"#) -}
7534ea9686970c25d555d256babca9dd
  $fShowOps74 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps75) -}
217281443d1db1ad57c15f1cc4d4e13d
  $fShowOps75 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Cos"#) -}
53f8b1449551f3b5590d567e8736d8f5
  $fShowOps76 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps77) -}
f7d538f73884deedf13a08fc932fa18c
  $fShowOps77 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sin"#) -}
bb532815c9deb16b6a5aeb92e1c5f66c
  $fShowOps78 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps79) -}
fb9f0d462f3ea84fa36212db9b43f327
  $fShowOps79 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Round"#) -}
4d107494a848bc9eabd8e911250be58b
  $fShowOps8 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps9) -}
b5d5ac9e1cbfed83df2ffe9ea60169dc
  $fShowOps80 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps81) -}
53d9b9bd1c15e3e9c7aed86351853756
  $fShowOps81 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Floor"#) -}
2cd055e1f8edec258aa5305548664e14
  $fShowOps82 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps83) -}
d1ffa8296e0362fc5cb2d19b913e46d0
  $fShowOps83 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Abs"#) -}
bac1c6bd5864e734f3332189cd83b4c4
  $fShowOps84 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps85) -}
839cc9b85d8e1716beac1ba68e3035be
  $fShowOps85 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sgn"#) -}
cb1a89af815bed2b5735d046f6901971
  $fShowOps86 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps87) -}
870b954a55220de2d769c4571fc3c0f7
  $fShowOps87 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Fact"#) -}
6b5fc3824f35e82ad8b67f7937d5d7bc
  $fShowOps88 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps89) -}
044b289318f2f670cfb99e826890778e
  $fShowOps89 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Log"#) -}
222ba3aed9b9f183b83241dc1bf3ca17
  $fShowOps9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Implic"#) -}
4ee97033fe03c054c4ab2f84e2d8b0aa
  $fShowOps90 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps91) -}
c0f77afb1f81ae260cf8d5552b631ac7
  $fShowOps91 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Root"#) -}
1f1751fdaafa77c0f6b255ff27269892
  $fShowOps92 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps93) -}
20e511c83a89228e5bb3635fa9257f4d
  $fShowOps93 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Exp"#) -}
8c77c6c9481aee718eefbd18c024db9e
  $fShowOps94 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps95) -}
7c9d119da4389bafecd6b33128c53774
  $fShowOps95 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Div"#) -}
1624831a98f226ba5c0156425f08a24e
  $fShowOps96 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps97) -}
562a23bd7422442f2f192a3cc5b6e9c7
  $fShowOps97 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Mul"#) -}
8f7ffbefa27e561b6ed9ba7d07a993c0
  $fShowOps98 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowOps99) -}
d7ce2323fdc3740b0633a5a7be564a19
  $fShowOps99 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sub"#) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fShowOps_$cshow :: AlgData.Ops -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: AlgData.Ops) ->
                 ({__scc {main@main:AlgData.showsPrec} True True} case x of wild {
                                                                    AlgData.Identity
                                                                    -> AlgData.$fShowOps122
                                                                    AlgData.Sentence
                                                                    -> AlgData.$fShowOps120
                                                                    AlgData.SuchThat
                                                                    -> AlgData.$fShowOps118
                                                                    AlgData.Set
                                                                    -> AlgData.$fShowOps116
                                                                    AlgData.List
                                                                    -> AlgData.$fShowOps114
                                                                    AlgData.Not
                                                                    -> AlgData.$fShowOps112
                                                                    AlgData.Or
                                                                    -> AlgData.$fShowOps110
                                                                    AlgData.And
                                                                    -> AlgData.$fShowOps108
                                                                    AlgData.Neg
                                                                    -> AlgData.$fShowOps106
                                                                    AlgData.Pos
                                                                    -> AlgData.$fShowOps104
                                                                    AlgData.PosOrNeg
                                                                    -> AlgData.$fShowOps102
                                                                    AlgData.Sum
                                                                    -> AlgData.$fShowOps100
                                                                    AlgData.Sub
                                                                    -> AlgData.$fShowOps98
                                                                    AlgData.Mul
                                                                    -> AlgData.$fShowOps96
                                                                    AlgData.Div
                                                                    -> AlgData.$fShowOps94
                                                                    AlgData.Exp
                                                                    -> AlgData.$fShowOps92
                                                                    AlgData.Root
                                                                    -> AlgData.$fShowOps90
                                                                    AlgData.Log
                                                                    -> AlgData.$fShowOps88
                                                                    AlgData.Fact
                                                                    -> AlgData.$fShowOps86
                                                                    AlgData.Sgn
                                                                    -> AlgData.$fShowOps84
                                                                    AlgData.Abs
                                                                    -> AlgData.$fShowOps82
                                                                    AlgData.Floor
                                                                    -> AlgData.$fShowOps80
                                                                    AlgData.Round
                                                                    -> AlgData.$fShowOps78
                                                                    AlgData.Sin
                                                                    -> AlgData.$fShowOps76
                                                                    AlgData.Cos
                                                                    -> AlgData.$fShowOps74
                                                                    AlgData.ASin
                                                                    -> AlgData.$fShowOps72
                                                                    AlgData.ACos
                                                                    -> AlgData.$fShowOps70
                                                                    AlgData.Tg
                                                                    -> AlgData.$fShowOps68
                                                                    AlgData.ATg
                                                                    -> AlgData.$fShowOps66
                                                                    AlgData.SinH
                                                                    -> AlgData.$fShowOps64
                                                                    AlgData.CosH
                                                                    -> AlgData.$fShowOps62
                                                                    AlgData.ASinH
                                                                    -> AlgData.$fShowOps60
                                                                    AlgData.ATgH
                                                                    -> AlgData.$fShowOps58
                                                                    AlgData.ACosH
                                                                    -> AlgData.$fShowOps56
                                                                    AlgData.Func
                                                                    -> AlgData.$fShowOps54
                                                                    AlgData.InvFunc
                                                                    -> AlgData.$fShowOps52
                                                                    AlgData.DerivedFunc
                                                                    -> AlgData.$fShowOps50
                                                                    AlgData.Index
                                                                    -> AlgData.$fShowOps48
                                                                    AlgData.Contains
                                                                    -> AlgData.$fShowOps46
                                                                    AlgData.Contained
                                                                    -> AlgData.$fShowOps44
                                                                    AlgData.Union
                                                                    -> AlgData.$fShowOps42
                                                                    AlgData.Intersect
                                                                    -> AlgData.$fShowOps40
                                                                    AlgData.Disjunct
                                                                    -> AlgData.$fShowOps38
                                                                    AlgData.Equation
                                                                    -> AlgData.$fShowOps36
                                                                    AlgData.Simpl
                                                                    -> AlgData.$fShowOps34
                                                                    AlgData.Resol
                                                                    -> AlgData.$fShowOps32
                                                                    AlgData.ElementOf
                                                                    -> AlgData.$fShowOps30
                                                                    AlgData.NotElementOf
                                                                    -> AlgData.$fShowOps28
                                                                    AlgData.Equals
                                                                    -> AlgData.$fShowOps26
                                                                    AlgData.Greater
                                                                    -> AlgData.$fShowOps24
                                                                    AlgData.Less
                                                                    -> AlgData.$fShowOps22
                                                                    AlgData.GreaterOrEqual
                                                                    -> AlgData.$fShowOps20
                                                                    AlgData.LessOrEqual
                                                                    -> AlgData.$fShowOps18
                                                                    AlgData.NotEqual
                                                                    -> AlgData.$fShowOps16
                                                                    AlgData.Relates
                                                                    -> AlgData.$fShowOps14
                                                                    AlgData.InvRelates
                                                                    -> AlgData.$fShowOps12
                                                                    AlgData.Equiv
                                                                    -> AlgData.$fShowOps10
                                                                    AlgData.Implic
                                                                    -> AlgData.$fShowOps8
                                                                    AlgData.System
                                                                    -> AlgData.$fShowOps6
                                                                    AlgData.Document
                                                                    -> AlgData.$fShowOps4
                                                                    AlgData.Params
                                                                    -> AlgData.$fShowOps2 })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fShowOps_$cshowList :: [AlgData.Ops] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {main@main:AlgData.showList} True True} GHC.Show.showList__
                                                                  @ AlgData.Ops
                                                                  AlgData.$fShowOps1) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $fShowOps_$cshowsPrec ::
    GHC.Types.Int -> AlgData.Ops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: AlgData.Ops) ->
                 AlgData.$w$cshowsPrec w1) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fShowPrior :: GHC.Show.Show AlgData.Prior
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AlgData.Prior
                  AlgData.$fShowPrior_$cshowsPrec
                  AlgData.$fShowPrior_$cshow
                  AlgData.$fShowPrior_$cshowList -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fShowPrior1 :: AlgData.Prior -> GHC.Show.ShowS
  {- Unfolding: ({__scc {main@main:AlgData.showList} False True} AlgData.$w$cshowsPrec1) -}
3c73b0af33d529018efb1bf56db1d7ff
  $fShowPrior10 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior11) -}
a0d060ed9f584046c91f3a527809240b
  $fShowPrior11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Exponential"#) -}
71628bc3398ad8517567099092681a6e
  $fShowPrior12 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior13) -}
8fa0f78a05e8ea20b75b05b89a25e4c5
  $fShowPrior13 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Geometric"#) -}
cca239a23d01908bf90ccb6009d14a06
  $fShowPrior14 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior15) -}
3ef7a292c776bd70c086a8ef5e2031cd
  $fShowPrior15 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Arithmetic"#) -}
c16ff4c1d9ce13c897fdde2d7c3025a0
  $fShowPrior16 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior17) -}
9b650d6b3a80febbaa9e8dc4ef7bd03d
  $fShowPrior17 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Logic"#) -}
6496119ef5a1202db97b4212fd363232
  $fShowPrior18 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior19) -}
31e4397071d10a71a2c541b1ab303ed2
  $fShowPrior19 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "SetOps"#) -}
4b436ff204d550d12c7b5e610869bd50
  $fShowPrior2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior3) -}
8485413bc6414d96839f9d8e0d3752a0
  $fShowPrior20 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior21) -}
722504f3f0acf554e391639cef3e494f
  $fShowPrior21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Steps"#) -}
49193214e88d519e16b1b16126c43f94
  $fShowPrior22 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior23) -}
2f72ead27d05779e8d485c6bd104c9b4
  $fShowPrior23 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Process"#) -}
f8f2915b3f5ce04de34128d802ef3a10
  $fShowPrior24 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior25) -}
101e7300b3273a0158767fbfbc7f45ad
  $fShowPrior25 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Sentences"#) -}
29965a4d41fcaa214725ca4b19de114c
  $fShowPrior26 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior27) -}
6a47dd1f148ede1cfce9b0046d589626
  $fShowPrior27 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Documents"#) -}
3a50bda0003c35e837c347866d24f7fb
  $fShowPrior3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Element"#) -}
42a67355855689df6ec743faa302b1c9
  $fShowPrior4 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior5) -}
db3c6170c3ba11c6aecd8181ca340bb9
  $fShowPrior5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Lists"#) -}
052c930931b240e7d2baff1dbf44f292
  $fShowPrior6 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior7) -}
2c01473f96b35c0504185f4082e35e04
  $fShowPrior7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Function"#) -}
03bf3910f721f229250ad93b7e130158
  $fShowPrior8 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char AlgData.$fShowPrior9) -}
e0581bfba984631cb1c9edab85b9847f
  $fShowPrior9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main@main:AlgData.showsPrec} False True} GHC.CString.unpackCString#
                                                                    "Relational"#) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fShowPrior_$cshow :: AlgData.Prior -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: AlgData.Prior) ->
                 ({__scc {main@main:AlgData.showsPrec} True True} case x of wild {
                                                                    AlgData.Documents
                                                                    -> AlgData.$fShowPrior26
                                                                    AlgData.Sentences
                                                                    -> AlgData.$fShowPrior24
                                                                    AlgData.Process
                                                                    -> AlgData.$fShowPrior22
                                                                    AlgData.Steps
                                                                    -> AlgData.$fShowPrior20
                                                                    AlgData.SetOps
                                                                    -> AlgData.$fShowPrior18
                                                                    AlgData.Logic
                                                                    -> AlgData.$fShowPrior16
                                                                    AlgData.Arithmetic
                                                                    -> AlgData.$fShowPrior14
                                                                    AlgData.Geometric
                                                                    -> AlgData.$fShowPrior12
                                                                    AlgData.Exponential
                                                                    -> AlgData.$fShowPrior10
                                                                    AlgData.Relational
                                                                    -> AlgData.$fShowPrior8
                                                                    AlgData.Function
                                                                    -> AlgData.$fShowPrior6
                                                                    AlgData.Lists
                                                                    -> AlgData.$fShowPrior4
                                                                    AlgData.Element
                                                                    -> AlgData.$fShowPrior2 })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fShowPrior_$cshowList :: [AlgData.Prior] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {main@main:AlgData.showList} True True} GHC.Show.showList__
                                                                  @ AlgData.Prior
                                                                  AlgData.$fShowPrior1) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $fShowPrior_$cshowsPrec ::
    GHC.Types.Int -> AlgData.Prior -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: AlgData.Prior) ->
                 AlgData.$w$cshowsPrec1 w1) -}
c9ef8d5dc738ebccedf2b40c787b6307
  $fStrictEqAlgSets :: AlgData.StrictEq AlgData.AlgSets
  DFunId
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                AlgData.$fStrictEqAlgSets_$cstrictEq
                  `cast`
                (Sym (AlgData.N:StrictEq[0] <AlgData.AlgSets>_N)) -}
6349de57eada03a1cd3acd0947b7f52d
  $fStrictEqAlgSets_$cstrictEq ::
    AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: AlgData.AlgSets) (ds1 :: AlgData.AlgSets) ->
                 {__scc {main@main:AlgData.strictEq} True True} case ds of wild {
                                                                  DEFAULT -> GHC.Types.False
                                                                  AlgData.AlgSet a ds2 ds3 ds4
                                                                  -> case ds1 of wild1 {
                                                                       DEFAULT -> GHC.Types.False
                                                                       AlgData.AlgSet b ds5 ds6 ds7
                                                                       -> GHC.Base.eqString a b }
                                                                  AlgData.Range l1 r1
                                                                  -> case ds1 of wild1 {
                                                                       DEFAULT -> GHC.Types.False
                                                                       AlgData.Range l2 r2
                                                                       -> case l1 of ww { AlgData.RangeWing ww1 ww2 ->
                                                                          case l2 of ww3 { AlgData.RangeWing ww4 ww5 ->
                                                                          case AlgData.$w$cstrictEq
                                                                                 ww1
                                                                                 ww2
                                                                                 ww4
                                                                                 ww5 of wild2 {
                                                                            GHC.Types.False
                                                                            -> GHC.Types.False
                                                                            GHC.Types.True
                                                                            -> AlgData.$fStrictEqAlgSets_$cstrictEq1
                                                                                 r1
                                                                                 r2 } } } } }) -}
1aca6a99f305c74e2f67cc4ccb9d0a3e
  $fStrictEqAlgSets_$cstrictEq1 ::
    AlgData.RangeWing -> AlgData.RangeWing -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AlgData.RangeWing) (w1 :: AlgData.RangeWing) ->
                 case w of ww { AlgData.RangeWing ww1 ww2 ->
                 case w1 of ww3 { AlgData.RangeWing ww4 ww5 ->
                 AlgData.$w$cstrictEq ww1 ww2 ww4 ww5 } }) -}
c9ef8d5dc738ebccedf2b40c787b6307
  $fStrictEqAlgo :: AlgData.StrictEq AlgData.Algo
  DFunId
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                AlgData.$fStrictEqAlgo_$cstrictEq
                  `cast`
                (Sym (AlgData.N:StrictEq[0] <AlgData.Algo>_N)) -}
93c71330845e040a3d9f132b4bb7873a
  $fStrictEqAlgo_$cstrictEq ::
    AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
c9ef8d5dc738ebccedf2b40c787b6307
  $fStrictEqRangeWing :: AlgData.StrictEq AlgData.RangeWing
  DFunId
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                AlgData.$fStrictEqAlgSets_$cstrictEq1
                  `cast`
                (Sym (AlgData.N:StrictEq[0] <AlgData.RangeWing>_N)) -}
e5fc172d29d9de5e9e0195d3ebf8ca53
  $tc'ACos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18422364265242959231##
                   16582024376976716684##
                   AlgData.$trModule
                   AlgData.$tc'ACos1) -}
2898ada779db69364913a57a85a1bbbe
  $tc'ACos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ACos"#) -}
d0733dde767283b0e379bbd39f627421
  $tc'ACosH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8075707383422779033##
                   111169540618613083##
                   AlgData.$trModule
                   AlgData.$tc'ACosH1) -}
9fdec60a4a8652e2380e077eec076d7e
  $tc'ACosH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ACosH"#) -}
d6809a2c61d7d43844fcdebb6f77ea27
  $tc'ASin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10722160691718314709##
                   18224347317226477501##
                   AlgData.$trModule
                   AlgData.$tc'ASin1) -}
f4b3d371b495719c7bd3d58ad6adda06
  $tc'ASin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ASin"#) -}
c27c8f96ee0a71c9d365e4a3ea3c618a
  $tc'ASinH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13283911021390589041##
                   10641200262284898277##
                   AlgData.$trModule
                   AlgData.$tc'ASinH1) -}
363e9ff94de3f0d3c0f3b877d04cad13
  $tc'ASinH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ASinH"#) -}
8728b9334273e6842cba508d4462d920
  $tc'ATg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16283543684053713361##
                   13346615940037387840##
                   AlgData.$trModule
                   AlgData.$tc'ATg1) -}
a17ac6613e9fe3a7376724ab74f1a217
  $tc'ATg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ATg"#) -}
9292a97c4522c4f630cfa16f8a724965
  $tc'ATgH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10016613035921064370##
                   14115732040100502142##
                   AlgData.$trModule
                   AlgData.$tc'ATgH1) -}
91084a6558ec5ee183e7c1ef750ca2b0
  $tc'ATgH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ATgH"#) -}
4b53d554f62b15cd5438d41a2cc9a4e4
  $tc'Abs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1061059813418087167##
                   7316408959482177008##
                   AlgData.$trModule
                   AlgData.$tc'Abs1) -}
b9010e3ff8daf5d0cc6117ea71d7199a
  $tc'Abs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Abs"#) -}
dbb9717ff0f352542dae398453c81d5b
  $tc'AlgSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16020876121842511119##
                   6276946209781481460##
                   AlgData.$trModule
                   AlgData.$tc'AlgSet1) -}
d6cb420cd71611be4841071811dc8c3f
  $tc'AlgSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AlgSet"#) -}
34493b670b167085e728ef1414e9e8eb
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3763471546624851926##
                   16255138146944566746##
                   AlgData.$trModule
                   AlgData.$tc'And1) -}
21dfea0775dae1f752cf2ac2082c41da
  $tc'And1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'And"#) -}
7901cc29e1c0af9a5996d09e9d28271a
  $tc'Arithmetic :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5926516756483151135##
                   2904005353908582713##
                   AlgData.$trModule
                   AlgData.$tc'Arithmetic1) -}
0afeb09cedbb894935965034b9a00dc2
  $tc'Arithmetic1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Arithmetic"#) -}
e8d0a19604dff5a5ff27b84cdb5dfc4e
  $tc'Bool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16778326539137836637##
                   4823210888783055419##
                   AlgData.$trModule
                   AlgData.$tc'Bool1) -}
2d8f399f0cbc094af484ed31d81afb00
  $tc'Bool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bool"#) -}
63c324aac75e74aaee7112ac4bba9f3a
  $tc'C:StrictEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7955833660428552876##
                   9488448381679997493##
                   AlgData.$trModule
                   AlgData.$tc'C:StrictEq1) -}
43de7d335c695530146c2cae154709af
  $tc'C:StrictEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:StrictEq"#) -}
a6e04fe9d8455d2ba5059f50d22958ab
  $tc'Contained :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   766221278245357939##
                   7367075729696675978##
                   AlgData.$trModule
                   AlgData.$tc'Contained1) -}
2447c0fb4a7b56b370002ed5d2d8caa8
  $tc'Contained1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Contained"#) -}
6c5f2af543d06252fe47fccf7b77d504
  $tc'Contains :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13192001106716527752##
                   11948261242368189190##
                   AlgData.$trModule
                   AlgData.$tc'Contains1) -}
94f0ba2be5a3e2ca33280b3c18155aec
  $tc'Contains1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Contains"#) -}
a32a4556899c18381b711b29f9fd00c6
  $tc'Cos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15880974315588968116##
                   2162186859707912698##
                   AlgData.$trModule
                   AlgData.$tc'Cos1) -}
89c8691d843dcec61250ed143c4eb1b0
  $tc'Cos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cos"#) -}
745aa2f456cd23a76b6922f1a895a747
  $tc'CosH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17472996368650683150##
                   13766477045020263266##
                   AlgData.$trModule
                   AlgData.$tc'CosH1) -}
b0f5e587c863b64fc56d700e4cf81c9d
  $tc'CosH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CosH"#) -}
815f3cd49ee2c5636082cd46aefee580
  $tc'DerivedFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12722897939192840489##
                   8111046456344727626##
                   AlgData.$trModule
                   AlgData.$tc'DerivedFunc1) -}
106636b5101321e791995fcb1d28436a
  $tc'DerivedFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DerivedFunc"#) -}
7ccdf434bf976667acfbabb0fdbe3cd8
  $tc'Dim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14835575466440669143##
                   13098870793091381416##
                   AlgData.$trModule
                   AlgData.$tc'Dim1) -}
95d926d6b5eedc426e8659e9d0f16c75
  $tc'Dim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Dim"#) -}
141ee6c00b5ec4ee25e4aa03e1691b19
  $tc'Dimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11393749819776772567##
                   3203882596427337205##
                   AlgData.$trModule
                   AlgData.$tc'Dimension1) -}
d1f5f1eccfa9f8ec92207e2b60d5fbae
  $tc'Dimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Dimension"#) -}
012a9c30ef878641c9dc80a2a3028051
  $tc'Disjunct :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11958809413547382337##
                   13366924277941632321##
                   AlgData.$trModule
                   AlgData.$tc'Disjunct1) -}
b722b72c83dd14b834582e9f76cc66d1
  $tc'Disjunct1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Disjunct"#) -}
0c907c3d738dcd7816837bfb59712523
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2145933905193823056##
                   8579730847034200090##
                   AlgData.$trModule
                   AlgData.$tc'Div1) -}
b82b1f182b93c7a8b09c4c56cbc8eef2
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Div"#) -}
493dc0e745e235edee563adf69bad534
  $tc'Document :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17636140332173009718##
                   5071594727955063422##
                   AlgData.$trModule
                   AlgData.$tc'Document1) -}
6a3a4c8d076800435b49b7f72d087af3
  $tc'Document1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Document"#) -}
ba495eddade1fdefb54f67c6062e4290
  $tc'Documents :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6508356441593214502##
                   1883306881026174630##
                   AlgData.$trModule
                   AlgData.$tc'Documents1) -}
91d1a372c3a61e563f5e461937b822d6
  $tc'Documents1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Documents"#) -}
136dc53c6fc6ae1f73c637959475ef52
  $tc'Element :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4673928412269583391##
                   12079355382254401761##
                   AlgData.$trModule
                   AlgData.$tc'Element1) -}
231bbd9e634f51910e08c740d289d0fa
  $tc'Element1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Element"#) -}
5e4ee4d53e6089fa1946d7761ffc9a02
  $tc'ElementOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4601511034193558698##
                   7470551176348255260##
                   AlgData.$trModule
                   AlgData.$tc'ElementOf1) -}
ba682cf1fcebad246b65097c36e7f687
  $tc'ElementOf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ElementOf"#) -}
3e0c0531b4a6dc81c303f6499f68be60
  $tc'Ellipsis :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3778996191739193203##
                   5401910855175333677##
                   AlgData.$trModule
                   AlgData.$tc'Ellipsis1) -}
27938008a16a24bce7758737b0d31b7b
  $tc'Ellipsis1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ellipsis"#) -}
764fb64aa06fff4243b64825735bf283
  $tc'Equals :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   56673718299288835##
                   15024728526028219943##
                   AlgData.$trModule
                   AlgData.$tc'Equals1) -}
c17cc950a04623115b3efeeafdb422ed
  $tc'Equals1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Equals"#) -}
5b98eb15e53c4377b42d2237f39e9a81
  $tc'Equation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10117833475953739947##
                   16229168587907038255##
                   AlgData.$trModule
                   AlgData.$tc'Equation1) -}
6b3e853bc6174b33f1a3bc315894d2e6
  $tc'Equation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Equation"#) -}
3e491bfddb1e1a08525ea1d345dadff3
  $tc'Equiv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2749146117170258675##
                   9235864195056994802##
                   AlgData.$trModule
                   AlgData.$tc'Equiv1) -}
439e8169c89c456cb0c737f2816ec11e
  $tc'Equiv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Equiv"#) -}
090faf197a601866a1e25ce25c816dd8
  $tc'Exp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7323867535457447442##
                   18412271482743944074##
                   AlgData.$trModule
                   AlgData.$tc'Exp1) -}
c50ddcdbb702de38c45761b8f1974354
  $tc'Exp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Exp"#) -}
35934cdaab4aa1cd494a12b46422f416
  $tc'Exponential :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11386037561918755870##
                   10281760386996540241##
                   AlgData.$trModule
                   AlgData.$tc'Exponential1) -}
5c1197f743e9f2c95b19787a74315c9d
  $tc'Exponential1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Exponential"#) -}
6c2fa62717214b0d7b33a789b86950c3
  $tc'Fact :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   994737583435773326##
                   833302874217511592##
                   AlgData.$trModule
                   AlgData.$tc'Fact1) -}
9b55ca0bd429a5a70f403311ac2c4cd6
  $tc'Fact1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fact"#) -}
cd487f537f57a09895ba912789930992
  $tc'Floor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17485168613342655797##
                   9215250293894519119##
                   AlgData.$trModule
                   AlgData.$tc'Floor1) -}
4080306715e49b806c3dd2879b143add
  $tc'Floor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Floor"#) -}
c78912654e72d9c0827a7f8f14055930
  $tc'Func :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4820689008530343730##
                   1288006034080333726##
                   AlgData.$trModule
                   AlgData.$tc'Func1) -}
015a399e7b8ff57ec4093d1ef498f091
  $tc'Func1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Func"#) -}
cbc3d3588c5b4c25acaaafa45203718e
  $tc'Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17351197501080579025##
                   1832763247356633843##
                   AlgData.$trModule
                   AlgData.$tc'Function1) -}
6b3f5c35f643d6943245f26890885b3a
  $tc'Function1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Function"#) -}
be7822a69fa156840682f6f177e29eef
  $tc'Geometric :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15316175525594516026##
                   9486598622824114071##
                   AlgData.$trModule
                   AlgData.$tc'Geometric1) -}
da67031d166fd4a49561c2d8eb141063
  $tc'Geometric1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Geometric"#) -}
658d1c4526246d9893fe9e6c7fb69187
  $tc'Greater :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12904133752202391176##
                   9458255534134052330##
                   AlgData.$trModule
                   AlgData.$tc'Greater1) -}
0ee3668367799726875365fb8b362e7c
  $tc'Greater1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Greater"#) -}
fe353811d2a1ae99e5f94cda498d755a
  $tc'GreaterOrEqual :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1381651911338367094##
                   13429339102493203227##
                   AlgData.$trModule
                   AlgData.$tc'GreaterOrEqual1) -}
c80926799135b4643dbaee17f345ab01
  $tc'GreaterOrEqual1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GreaterOrEqual"#) -}
5c5960131c78b7690c28d1ca6b8f32a4
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4360066488422820774##
                   6883539014836574565##
                   AlgData.$trModule
                   AlgData.$tc'Identity1) -}
f42547574ec825936ef9ea262aab25a1
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
d5aa4f1e057f7061ce57f1c37ef6e5f7
  $tc'Implic :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12093713380974764157##
                   13198319885413165491##
                   AlgData.$trModule
                   AlgData.$tc'Implic1) -}
a4b180daaf512769d5aa2edbb1b5f834
  $tc'Implic1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Implic"#) -}
12431f48fd056e09a6e8a14c53b155c8
  $tc'Index :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5635941148425957754##
                   9617087522868376991##
                   AlgData.$trModule
                   AlgData.$tc'Index1) -}
d3e747dbf49af5d7d19adf8e8b8f0591
  $tc'Index1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Index"#) -}
a7c00c132a905809763c8647493d16b1
  $tc'Infinit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17177785158120568469##
                   2969768592673405050##
                   AlgData.$trModule
                   AlgData.$tc'Infinit1) -}
a2ad1c132ded5d0ebe871cf9c5fda0bb
  $tc'Infinit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Infinit"#) -}
a432836125eec26d82422c6bf948dd0e
  $tc'Infinitesimal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11318235221006918906##
                   16537940282389414649##
                   AlgData.$trModule
                   AlgData.$tc'Infinitesimal1) -}
864f8f28d2ce2cb1e3e7e2ba581be69f
  $tc'Infinitesimal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Infinitesimal"#) -}
0552610cfef6163636749a4c2ddfc182
  $tc'Intersect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3958411275465841018##
                   6824465862887766253##
                   AlgData.$trModule
                   AlgData.$tc'Intersect1) -}
76ed971395691a081cbf64478c17a860
  $tc'Intersect1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Intersect"#) -}
502ab2c07936fd41d591ebd2fd81c52c
  $tc'InvFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15967386577774730240##
                   13690733077339388794##
                   AlgData.$trModule
                   AlgData.$tc'InvFunc1) -}
f1830eb767e2bebcf7dcd68c3574d132
  $tc'InvFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InvFunc"#) -}
b1aae350047da80099422e0ecfd8888c
  $tc'InvRelates :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16612162299288153023##
                   2675970583954395149##
                   AlgData.$trModule
                   AlgData.$tc'InvRelates1) -}
848fa0e5ddaf09f0ae9ec7ad54c68367
  $tc'InvRelates1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InvRelates"#) -}
f6efe3236017f94b852207e5d8047931
  $tc'LSeq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8573131845927612836##
                   10025668783844347510##
                   AlgData.$trModule
                   AlgData.$tc'LSeq1) -}
7236c352c8b67d6b3069fe07dd5d7a85
  $tc'LSeq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LSeq"#) -}
792b7629ed8383f7b8ec118fb28b970c
  $tc'Less :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10837844951898648038##
                   4498821322494032281##
                   AlgData.$trModule
                   AlgData.$tc'Less1) -}
d7ad25c5ea171166135ebabbc64a141d
  $tc'Less1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Less"#) -}
c96982e075528b8d2619950b170cd95d
  $tc'LessOrEqual :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   722132111082934725##
                   17843075515432272380##
                   AlgData.$trModule
                   AlgData.$tc'LessOrEqual1) -}
b0872984f50d9712888f811ce15ccf30
  $tc'LessOrEqual1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LessOrEqual"#) -}
abe61e4aff43f6f1251f35b6c76b0a94
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8324332632573462837##
                   2434476968914888258##
                   AlgData.$trModule
                   AlgData.$tc'List1) -}
e3ced185bcb864c8843b3be217945eb1
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'List"#) -}
c2ef40d536e17a4325dbcb56a05c14e2
  $tc'Lists :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   813730850698330452##
                   18239935768207092601##
                   AlgData.$trModule
                   AlgData.$tc'Lists1) -}
06ce1e1c85d330f5031d79ce7d41235e
  $tc'Lists1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lists"#) -}
ca073c1bfdfe7508d0125e1287916522
  $tc'Lit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17043636499683246982##
                   10132201733710355899##
                   AlgData.$trModule
                   AlgData.$tc'Lit1) -}
bf77271fa18d34d40dd10f6d03304f3e
  $tc'Lit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lit"#) -}
5ccb14a4fecfe5f6bae1772adb9dfe3e
  $tc'Log :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15683773924018034540##
                   1859181765074384710##
                   AlgData.$trModule
                   AlgData.$tc'Log1) -}
ddb7cfc62a6b7a166e81770a34b59d98
  $tc'Log1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Log"#) -}
3322fa50afb6fc16476d26d9a92fa474
  $tc'Logic :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10034316705435683554##
                   1999447892625614944##
                   AlgData.$trModule
                   AlgData.$tc'Logic1) -}
ef47042f0c89e91dc72713c5edea1098
  $tc'Logic1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Logic"#) -}
d8f6c686fcf93158ebaee81b9319b057
  $tc'MetricSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4625855340581942536##
                   15771839331709091608##
                   AlgData.$trModule
                   AlgData.$tc'MetricSystem1) -}
08bf901ecae19a267b7ed16d3b759019
  $tc'MetricSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MetricSystem"#) -}
071b0c69b40e43804257626592152eab
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   538823299816405123##
                   15438460290807318015##
                   AlgData.$trModule
                   AlgData.$tc'Mul1) -}
111a513ff243d6cd3a3e0761158d4e17
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mul"#) -}
3267aa1c81db89e00898b3e323850467
  $tc'Neg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2073933033555978417##
                   5954782747911564899##
                   AlgData.$trModule
                   AlgData.$tc'Neg1) -}
676fa7e8a6f01a0715ed3d48adb7b90d
  $tc'Neg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Neg"#) -}
545d96713630a86094e949015d5a8318
  $tc'Neighbor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   249834616729757713##
                   5165938817677094134##
                   AlgData.$trModule
                   AlgData.$tc'Neighbor1) -}
98409c710e23db9e0bcd520a2036a525
  $tc'Neighbor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Neighbor"#) -}
dc95523846d22db8b0289f0dea33321e
  $tc'Nom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5835060286088746139##
                   2101400205424260059##
                   AlgData.$trModule
                   AlgData.$tc'Nom1) -}
36a7fc6db338a18d85306073373db9cd
  $tc'Nom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nom"#) -}
9b896aa627fb66099751091560baaf70
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9188079434749133144##
                   3479691214579555911##
                   AlgData.$trModule
                   AlgData.$tc'Not1) -}
68aaf1bf82b698318f57aa09adcc1807
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
003a7d0c37a5122c4e061273fa1229f8
  $tc'NotElementOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17813195924133459747##
                   5056385150567506044##
                   AlgData.$trModule
                   AlgData.$tc'NotElementOf1) -}
4b40b2bff74720b046cea6c91a5adf43
  $tc'NotElementOf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NotElementOf"#) -}
5763e70ba1f30aeff8087935c55514f8
  $tc'NotEqual :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7748928358569556074##
                   14502405182952890531##
                   AlgData.$trModule
                   AlgData.$tc'NotEqual1) -}
3fb98409bef4318a9db4873cef79fdbd
  $tc'NotEqual1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NotEqual"#) -}
f42358a3a8a3c510f76c615bea30b475
  $tc'Numeric :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17738830977786989612##
                   8387696111464237261##
                   AlgData.$trModule
                   AlgData.$tc'Numeric1) -}
0dadc8c6f1f7f88e5cc8ba4c0576cd18
  $tc'Numeric1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Numeric"#) -}
80970d4dfc2ae6acbe5e60d6cd5d7fd7
  $tc'Op :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17614653327261231034##
                   10777246278562541893##
                   AlgData.$trModule
                   AlgData.$tc'Op1) -}
9d99539ebaae3054760427004a1c8f15
  $tc'Op1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Op"#) -}
961fa198a8ff79a4d63b207ad386de3a
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1060671774319858433##
                   4361915072405942707##
                   AlgData.$trModule
                   AlgData.$tc'Or1) -}
5e1d774d524b94ddc5cae4a565866892
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Or"#) -}
8609f04e8511ff1c47ea20cbe48a6f5e
  $tc'Params :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9150498981467939767##
                   15310768281421623393##
                   AlgData.$trModule
                   AlgData.$tc'Params1) -}
e38b22f33cc3d6d0fcec974505c4f8f6
  $tc'Params1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Params"#) -}
7a10164d29cb547e83e06ead51ead9cd
  $tc'Pos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2658312358791553294##
                   15791890021191929331##
                   AlgData.$trModule
                   AlgData.$tc'Pos1) -}
6f2acf7f236604476c2e9f509da49fba
  $tc'Pos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pos"#) -}
0a516779f8e00fa1477aadf3931e5c0c
  $tc'PosOrNeg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12618372681903033340##
                   3405845045046799253##
                   AlgData.$trModule
                   AlgData.$tc'PosOrNeg1) -}
e9f2876a92abf8c2de52ed5233ff1841
  $tc'PosOrNeg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PosOrNeg"#) -}
a584aa45149fe53b4cf558e7b0089fca
  $tc'Pref :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7283912990050941593##
                   13254018169992961631##
                   AlgData.$trModule
                   AlgData.$tc'Pref1) -}
32b19bee0a278d2cd271706c2611f4c8
  $tc'Pref1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pref"#) -}
d577fbc51e07b03a5ea7692e7a2bdb6b
  $tc'Process :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6401236753360846274##
                   1994759349034058560##
                   AlgData.$trModule
                   AlgData.$tc'Process1) -}
2da72b2924708fd1ad7bf6bede3f32a5
  $tc'Process1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Process"#) -}
14742c7902fc6bb10a056966f2ef202c
  $tc'Punctuation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4002992070486352686##
                   13589577898489392130##
                   AlgData.$trModule
                   AlgData.$tc'Punctuation1) -}
a2a6da0e458fb60dd39f6551a66ac2d3
  $tc'Punctuation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Punctuation"#) -}
1c8da7229cd11b22db917618a699590e
  $tc'Quant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3471993865286030948##
                   16712970283487746817##
                   AlgData.$trModule
                   AlgData.$tc'Quant1) -}
ea4ce0e07de100967da59d523fe6873c
  $tc'Quant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Quant"#) -}
8f571aa23d58704f4573ec36477b79cd
  $tc'RSeq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   551357659279730004##
                   1555625186151520848##
                   AlgData.$trModule
                   AlgData.$tc'RSeq1) -}
1e1666324bfe748ca9fd6e15f66db7aa
  $tc'RSeq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RSeq"#) -}
73df5502b0e0dedcf9e805c7b47266f4
  $tc'Range :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10204773162246705036##
                   8277844726040635796##
                   AlgData.$trModule
                   AlgData.$tc'Range1) -}
9b56bb64d9d3a38bb46db93fa56df976
  $tc'Range1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Range"#) -}
a6537bcddd5cb41aac2089579f1e5d64
  $tc'RangeWing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10950510520141789870##
                   8759847715571771994##
                   AlgData.$trModule
                   AlgData.$tc'RangeWing1) -}
45871e4e88788102e967bccc710d0384
  $tc'RangeWing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RangeWing"#) -}
ef7a9045901e2010a6baaeac88a90c72
  $tc'Relates :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15060614472910226016##
                   15886815833535106802##
                   AlgData.$trModule
                   AlgData.$tc'Relates1) -}
abf1f9a146d3d774d7e221ac2923bf7b
  $tc'Relates1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Relates"#) -}
9a79dc4d223e06bbf116e64252b1823f
  $tc'Relational :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12546312737474555125##
                   7065940701946015555##
                   AlgData.$trModule
                   AlgData.$tc'Relational1) -}
076fd60f114320da8b05f1f0fae009cb
  $tc'Relational1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Relational"#) -}
c8ae3e02f41bbac0425dd370fc5266b4
  $tc'Resol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17263922643328955844##
                   14764247308191633150##
                   AlgData.$trModule
                   AlgData.$tc'Resol1) -}
a71e69682b58b65cc46a5ce85a12210e
  $tc'Resol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Resol"#) -}
f87606e0d9e497ee7b1a990c543d25f8
  $tc'Root :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3216817481385563210##
                   16981253045437749062##
                   AlgData.$trModule
                   AlgData.$tc'Root1) -}
dfd66fd457f0bf43db9dec0b55d41702
  $tc'Root1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Root"#) -}
388155ca68b294218a54c70345d3c1bd
  $tc'Round :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9520969514678463982##
                   5955178687068918384##
                   AlgData.$trModule
                   AlgData.$tc'Round1) -}
56538b94b07d2f29e3e355b36ea02c34
  $tc'Round1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Round"#) -}
0fb424345e1c7e40fdb5fef7ae4033cc
  $tc'Scale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14777437115160232510##
                   5404861555383181110##
                   AlgData.$trModule
                   AlgData.$tc'Scale1) -}
7116bb0a0e4006cdb53337d28bb1a6c2
  $tc'Scale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scale"#) -}
b4a620be1525d1ff5b45545b0a4d727c
  $tc'Sentence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9522601242387726630##
                   2090329799746387746##
                   AlgData.$trModule
                   AlgData.$tc'Sentence1) -}
172ab07d5fd069f8799990e9b0cae8ac
  $tc'Sentence1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sentence"#) -}
b8623f796d25c78ac24cfbdf8fc9e5aa
  $tc'Sentences :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2591166609996612289##
                   9707771659003095670##
                   AlgData.$trModule
                   AlgData.$tc'Sentences1) -}
e0211cc377d77c1a6b12d8ab60e3a9b5
  $tc'Sentences1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sentences"#) -}
fd7e774f17dc5714b46cc2f8e3f99b65
  $tc'Set :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12708579185708948013##
                   4690811360447983005##
                   AlgData.$trModule
                   AlgData.$tc'Set1) -}
1bcdd2d31d39f58b7ec1f3aaf7a9ac3b
  $tc'Set1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Set"#) -}
7dc8e02c904f3e1ced3499e01ad1b79c
  $tc'SetExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15179281943183124085##
                   12408959828345553240##
                   AlgData.$trModule
                   AlgData.$tc'SetExpr1) -}
5c301b7c9ae79378b5e11fda7336fc05
  $tc'SetExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SetExpr"#) -}
6ff45ea4c57cd3fb6819ea012984c042
  $tc'SetOps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2262046418591138442##
                   5172574878352887741##
                   AlgData.$trModule
                   AlgData.$tc'SetOps1) -}
aa28f8ab9a754c1fffd811a8465c8631
  $tc'SetOps1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SetOps"#) -}
bfdc70cc6df90a20607418081788fe89
  $tc'Sets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2756752392186389871##
                   8255214248303095910##
                   AlgData.$trModule
                   AlgData.$tc'Sets1) -}
ee4e59ceab544e600e692f887dab2776
  $tc'Sets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sets"#) -}
d1293aef1f15457d48254296057b73dc
  $tc'Sgn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10496975067509152696##
                   10839524880895834116##
                   AlgData.$trModule
                   AlgData.$tc'Sgn1) -}
0eaa3ad07c0ada587f5e978273898f77
  $tc'Sgn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sgn"#) -}
8858fa698a6b20794ddc37afe177e3f1
  $tc'Simpl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12286197588421176410##
                   15054124148173698420##
                   AlgData.$trModule
                   AlgData.$tc'Simpl1) -}
8ef8474468011c7d34fb4538f053ca23
  $tc'Simpl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Simpl"#) -}
82522753baa38c95f6f9465339868c76
  $tc'Sin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1375103120655897861##
                   14286031127898581209##
                   AlgData.$trModule
                   AlgData.$tc'Sin1) -}
70bdfa141571df98f2e7c6ca04f66870
  $tc'Sin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sin"#) -}
c6b14b001a8681333c65de04c50a9efe
  $tc'SinH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16682725061734711645##
                   1791480400080697936##
                   AlgData.$trModule
                   AlgData.$tc'SinH1) -}
dcb74ac29cbc57f0c03818a036780005
  $tc'SinH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SinH"#) -}
c35ec5c33cdb2adf702f6a7f213b03da
  $tc'Solver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8548289781493290496##
                   13474947050684303251##
                   AlgData.$trModule
                   AlgData.$tc'Solver1) -}
fa70070599fb93f0fff34fa46b4a7ff4
  $tc'Solver1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Solver"#) -}
e300da59d302788faa560249e0e5213e
  $tc'Steps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16426805659983054169##
                   12467886966459398626##
                   AlgData.$trModule
                   AlgData.$tc'Steps1) -}
8501a8dad4888d82d8d44f37c2e7f83a
  $tc'Steps1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Steps"#) -}
4c71bdd3d941910cb8a9bf7d4f357e2b
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12832114270975044928##
                   1994707912319743792##
                   AlgData.$trModule
                   AlgData.$tc'Sub1) -}
fff7cde33937771727a7506ca63c39c9
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sub"#) -}
7398fac4ee3c7f2b3d2612da0163427b
  $tc'SuchThat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3286970239975262629##
                   17734992698551295136##
                   AlgData.$trModule
                   AlgData.$tc'SuchThat1) -}
8609dc5242a9b27f18f5eb95e2e6e154
  $tc'SuchThat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SuchThat"#) -}
24122435af8c64e0145029d2b35273ab
  $tc'Sum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15816662526620963966##
                   14461610141091956251##
                   AlgData.$trModule
                   AlgData.$tc'Sum1) -}
716a943f7f08c553ce65e86767f53193
  $tc'Sum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sum"#) -}
edf3e244282e293883e695947c373575
  $tc'System :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6861526969388629274##
                   11272841813585821646##
                   AlgData.$trModule
                   AlgData.$tc'System1) -}
f36b9f85ca7d9f0fa2519e5ed94a2e9d
  $tc'System1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'System"#) -}
b054c260aa16c1b66324e2517bfa139e
  $tc'Tg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7450554125854811083##
                   7534826717337878353##
                   AlgData.$trModule
                   AlgData.$tc'Tg1) -}
dd7abd7e043a23b79dd2ccff2679e38a
  $tc'Tg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tg"#) -}
cc2da99fc06857ab21b87a0f7edd0550
  $tc'Und :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5245907233375456924##
                   4405392310571230387##
                   AlgData.$trModule
                   AlgData.$tc'Und1) -}
3e9dd2913ded3c82cb285155687f9069
  $tc'Und1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Und"#) -}
1dcb9eafb8321d330e8f1937f59959a2
  $tc'Union :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13816171707144844115##
                   3454963904310129524##
                   AlgData.$trModule
                   AlgData.$tc'Union1) -}
bcf691ce7d2fc13e8c102a7ad5427ae8
  $tc'Union1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Union"#) -}
4308014f85390b208dfbe9748b2f3771
  $tc'Unit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8911620988449085438##
                   7655744779023563625##
                   AlgData.$trModule
                   AlgData.$tc'Unit1) -}
1ad3ed6175143eca68a3c02c36100453
  $tc'Unit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unit"#) -}
2ea8a17c24d75bcaf0262ac62354ab53
  $tcAlgSets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10423762524346809393##
                   13166812294239859793##
                   AlgData.$trModule
                   AlgData.$tcAlgSets1) -}
a9d355ed3c82306451f397f559fe7230
  $tcAlgSets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AlgSets"#) -}
ade145cbaed1cebcef6a6570e4798f4e
  $tcAlgo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8461291503209727856##
                   13608936398485813142##
                   AlgData.$trModule
                   AlgData.$tcAlgo1) -}
c412b286c4dd05ae4ffe0b1d8b6e1299
  $tcAlgo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Algo"#) -}
73868fd7bf816e4f35894a818d0328fd
  $tcDimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16667834655726920574##
                   11687252019769086201##
                   AlgData.$trModule
                   AlgData.$tcDimension1) -}
4be9392e71ff69b153d17c044406c374
  $tcDimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Dimension"#) -}
3cbce197ebed60e7fac483aa3b4c9a96
  $tcMetricSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7969785267573481680##
                   581266511058841424##
                   AlgData.$trModule
                   AlgData.$tcMetricSystem1) -}
b966d2c9e428d6d195cf729e5338ce0a
  $tcMetricSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MetricSystem"#) -}
1c0b851b4494ae8584a9c5eec5c16331
  $tcOps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9128109158094274805##
                   1700275676675949096##
                   AlgData.$trModule
                   AlgData.$tcOps1) -}
52cc4e394ec52266df7387767471f84a
  $tcOps1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ops"#) -}
104bffe0f02a06165dcaf3236a78818b
  $tcPrior :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15558200670499624581##
                   16722420518579154166##
                   AlgData.$trModule
                   AlgData.$tcPrior1) -}
5460630428f63a9233a638fed661e96b
  $tcPrior1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prior"#) -}
29649f8327314de4a858dc7845cc32cd
  $tcRangeWing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12314665067723510882##
                   1907013779144000303##
                   AlgData.$trModule
                   AlgData.$tcRangeWing1) -}
bda8c33a6bfaf0fade8311e33b447433
  $tcRangeWing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RangeWing"#) -}
9827ee1daf3aebf2a8d781f68289a629
  $tcScale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13282117949958316696##
                   2374845766554592803##
                   AlgData.$trModule
                   AlgData.$tcScale1) -}
b8153ce2e18211601ad6d57806b4bb08
  $tcScale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scale"#) -}
c6d6158009a0461aa0e5b4c501b0ad19
  $tcStrictEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3935772559157335597##
                   10464982219939361596##
                   AlgData.$trModule
                   AlgData.$tcStrictEq1) -}
aa8e2422918722854d463a02cb59b9d2
  $tcStrictEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StrictEq"#) -}
bc0b2583dbc0fe300d16bf2731d9487d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AlgData.$trModule2
                   AlgData.$trModule1) -}
06182f8842dac63ed026f504ad415929
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AlgData"#) -}
cdc10bf9fce215e20fd56dafc23984ba
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4d637072ad901205bf793a262f526c33
  $w$c== ::
    GHC.Types.Bool
    -> AlgData.Algo -> GHC.Types.Bool -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: AlgData.Algo)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.==} True True} case ww of wild {
                                                            GHC.Types.False
                                                            -> case ww2 of wild1 {
                                                                 GHC.Types.False
                                                                 -> AlgData.$fEqAlgSets_$c==2
                                                                      ww1
                                                                      ww3
                                                                 GHC.Types.True -> GHC.Types.False }
                                                            GHC.Types.True
                                                            -> case ww2 of wild1 {
                                                                 GHC.Types.False -> GHC.Types.False
                                                                 GHC.Types.True
                                                                 -> AlgData.$fEqAlgSets_$c==2
                                                                      ww1
                                                                      ww3 } }) -}
12dd53c17bc9762559b2ac05d598bc49
  $w$c==1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String) ->
                 {__scc {main@main:AlgData.==} True True} {__scc {main@main:AlgData.==} True False} case {__scc {main@main:AlgData.==} False True} GHC.Base.eqString
                                                                                                                                                     ww
                                                                                                                                                     ww2 of wild {
                                                                                                      GHC.Types.False
                                                                                                      -> GHC.Types.False
                                                                                                      GHC.Types.True
                                                                                                      -> GHC.Base.eqString
                                                                                                           ww1
                                                                                                           ww3 }) -}
4d637072ad901205bf793a262f526c33
  $w$c==2 ::
    GHC.Base.String
    -> GHC.Base.String
    -> AlgData.Algo
    -> GHC.Base.String
    -> GHC.Base.String
    -> AlgData.Algo
    -> GHC.Types.Bool
  {- Arity: 6, Strictness: <S,1*U><L,1*U><L,U><S,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: AlgData.Algo)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.==} True True} case {__scc {main@main:AlgData.==} True True} {__scc {main@main:AlgData.==} True False} {__scc {main@main:AlgData.==} False True} GHC.Base.eqString
                                                                                                                                                                                              ww
                                                                                                                                                                                              ww3 of wild {
                                                            GHC.Types.False -> GHC.Types.False
                                                            GHC.Types.True
                                                            -> case {__scc {main@main:AlgData.==} False True} GHC.Base.eqString
                                                                                                                ww1
                                                                                                                ww4 of wild1 {
                                                                 GHC.Types.False -> GHC.Types.False
                                                                 GHC.Types.True
                                                                 -> AlgData.$fEqAlgSets_$c==2
                                                                      ww2
                                                                      ww5 } }) -}
4d4ded7a73ed5a4c8b83cf0bae613d27
  $w$cshowsPrec :: AlgData.Ops -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.showsPrec} True True} case w of wild {
                                                                   AlgData.Identity
                                                                   -> AlgData.$fShowOps122
                                                                   AlgData.Sentence
                                                                   -> AlgData.$fShowOps120
                                                                   AlgData.SuchThat
                                                                   -> AlgData.$fShowOps118
                                                                   AlgData.Set
                                                                   -> AlgData.$fShowOps116
                                                                   AlgData.List
                                                                   -> AlgData.$fShowOps114
                                                                   AlgData.Not
                                                                   -> AlgData.$fShowOps112
                                                                   AlgData.Or
                                                                   -> AlgData.$fShowOps110
                                                                   AlgData.And
                                                                   -> AlgData.$fShowOps108
                                                                   AlgData.Neg
                                                                   -> AlgData.$fShowOps106
                                                                   AlgData.Pos
                                                                   -> AlgData.$fShowOps104
                                                                   AlgData.PosOrNeg
                                                                   -> AlgData.$fShowOps102
                                                                   AlgData.Sum
                                                                   -> AlgData.$fShowOps100
                                                                   AlgData.Sub
                                                                   -> AlgData.$fShowOps98
                                                                   AlgData.Mul
                                                                   -> AlgData.$fShowOps96
                                                                   AlgData.Div
                                                                   -> AlgData.$fShowOps94
                                                                   AlgData.Exp
                                                                   -> AlgData.$fShowOps92
                                                                   AlgData.Root
                                                                   -> AlgData.$fShowOps90
                                                                   AlgData.Log
                                                                   -> AlgData.$fShowOps88
                                                                   AlgData.Fact
                                                                   -> AlgData.$fShowOps86
                                                                   AlgData.Sgn
                                                                   -> AlgData.$fShowOps84
                                                                   AlgData.Abs
                                                                   -> AlgData.$fShowOps82
                                                                   AlgData.Floor
                                                                   -> AlgData.$fShowOps80
                                                                   AlgData.Round
                                                                   -> AlgData.$fShowOps78
                                                                   AlgData.Sin
                                                                   -> AlgData.$fShowOps76
                                                                   AlgData.Cos
                                                                   -> AlgData.$fShowOps74
                                                                   AlgData.ASin
                                                                   -> AlgData.$fShowOps72
                                                                   AlgData.ACos
                                                                   -> AlgData.$fShowOps70
                                                                   AlgData.Tg -> AlgData.$fShowOps68
                                                                   AlgData.ATg
                                                                   -> AlgData.$fShowOps66
                                                                   AlgData.SinH
                                                                   -> AlgData.$fShowOps64
                                                                   AlgData.CosH
                                                                   -> AlgData.$fShowOps62
                                                                   AlgData.ASinH
                                                                   -> AlgData.$fShowOps60
                                                                   AlgData.ATgH
                                                                   -> AlgData.$fShowOps58
                                                                   AlgData.ACosH
                                                                   -> AlgData.$fShowOps56
                                                                   AlgData.Func
                                                                   -> AlgData.$fShowOps54
                                                                   AlgData.InvFunc
                                                                   -> AlgData.$fShowOps52
                                                                   AlgData.DerivedFunc
                                                                   -> AlgData.$fShowOps50
                                                                   AlgData.Index
                                                                   -> AlgData.$fShowOps48
                                                                   AlgData.Contains
                                                                   -> AlgData.$fShowOps46
                                                                   AlgData.Contained
                                                                   -> AlgData.$fShowOps44
                                                                   AlgData.Union
                                                                   -> AlgData.$fShowOps42
                                                                   AlgData.Intersect
                                                                   -> AlgData.$fShowOps40
                                                                   AlgData.Disjunct
                                                                   -> AlgData.$fShowOps38
                                                                   AlgData.Equation
                                                                   -> AlgData.$fShowOps36
                                                                   AlgData.Simpl
                                                                   -> AlgData.$fShowOps34
                                                                   AlgData.Resol
                                                                   -> AlgData.$fShowOps32
                                                                   AlgData.ElementOf
                                                                   -> AlgData.$fShowOps30
                                                                   AlgData.NotElementOf
                                                                   -> AlgData.$fShowOps28
                                                                   AlgData.Equals
                                                                   -> AlgData.$fShowOps26
                                                                   AlgData.Greater
                                                                   -> AlgData.$fShowOps24
                                                                   AlgData.Less
                                                                   -> AlgData.$fShowOps22
                                                                   AlgData.GreaterOrEqual
                                                                   -> AlgData.$fShowOps20
                                                                   AlgData.LessOrEqual
                                                                   -> AlgData.$fShowOps18
                                                                   AlgData.NotEqual
                                                                   -> AlgData.$fShowOps16
                                                                   AlgData.Relates
                                                                   -> AlgData.$fShowOps14
                                                                   AlgData.InvRelates
                                                                   -> AlgData.$fShowOps12
                                                                   AlgData.Equiv
                                                                   -> AlgData.$fShowOps10
                                                                   AlgData.Implic
                                                                   -> AlgData.$fShowOps8
                                                                   AlgData.System
                                                                   -> AlgData.$fShowOps6
                                                                   AlgData.Document
                                                                   -> AlgData.$fShowOps4
                                                                   AlgData.Params
                                                                   -> AlgData.$fShowOps2 }) -}
d33e6c9e98204b7af1fea0a6e2adb262
  $w$cshowsPrec1 :: AlgData.Prior -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: AlgData.Prior) ->
                 {__scc {main@main:AlgData.showsPrec} True True} case w of wild {
                                                                   AlgData.Documents
                                                                   -> AlgData.$fShowPrior26
                                                                   AlgData.Sentences
                                                                   -> AlgData.$fShowPrior24
                                                                   AlgData.Process
                                                                   -> AlgData.$fShowPrior22
                                                                   AlgData.Steps
                                                                   -> AlgData.$fShowPrior20
                                                                   AlgData.SetOps
                                                                   -> AlgData.$fShowPrior18
                                                                   AlgData.Logic
                                                                   -> AlgData.$fShowPrior16
                                                                   AlgData.Arithmetic
                                                                   -> AlgData.$fShowPrior14
                                                                   AlgData.Geometric
                                                                   -> AlgData.$fShowPrior12
                                                                   AlgData.Exponential
                                                                   -> AlgData.$fShowPrior10
                                                                   AlgData.Relational
                                                                   -> AlgData.$fShowPrior8
                                                                   AlgData.Function
                                                                   -> AlgData.$fShowPrior6
                                                                   AlgData.Lists
                                                                   -> AlgData.$fShowPrior4
                                                                   AlgData.Element
                                                                   -> AlgData.$fShowPrior2 }) -}
a7508e1d19d3f4e2e63ce842cc7ff103
  $w$cstrictEq ::
    GHC.Types.Bool
    -> AlgData.Algo -> GHC.Types.Bool -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>,
     Inline: [0] -}
d33e6c9e98204b7af1fea0a6e2adb262
  $w$ctoEnum :: GHC.Prim.Int# -> AlgData.Prior
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {main@main:AlgData.toEnum} True True} case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.>=# ww 0#) of wild {
                                                                GHC.Types.False
                                                                -> AlgData.$fEnumPrior1 ww
                                                                GHC.Types.True
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.<=#
                                                                             ww
                                                                             12#) of wild1 {
                                                                     GHC.Types.False
                                                                     -> AlgData.$fEnumPrior1 ww
                                                                     GHC.Types.True
                                                                     -> GHC.Prim.tagToEnum#
                                                                          @ AlgData.Prior
                                                                          ww } }) -}
94d88cd44e04bc7a305d57f78bb86c3c
  $wquant :: GHC.Num.Num t => AlgData.Ops -> (# t, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ t (w :: GHC.Num.Num t) (w1 :: AlgData.Ops) ->
                 case {__scc {main@main:AlgData.quant} True True} GHC.List.elem
                                                                    @ AlgData.Ops
                                                                    AlgData.$fEqOps
                                                                    w1
                                                                    AlgData.unaryOps of wild {
                   GHC.Types.False
                   -> case {__scc {main@main:AlgData.quant} False True} GHC.List.elem
                                                                          @ AlgData.Ops
                                                                          AlgData.$fEqOps
                                                                          w1
                                                                          AlgData.binaryOps of wild1 {
                        GHC.Types.False
                        -> case {__scc {main@main:AlgData.quant} False True} GHC.List.elem
                                                                               @ AlgData.Ops
                                                                               AlgData.$fEqOps
                                                                               w1
                                                                               AlgData.partialOps of wild2 {
                             GHC.Types.False
                             -> case {__scc {main@main:AlgData.quant} False True} {__scc {main@main:AlgData.==} True False} w1 of x1 { DEFAULT ->
                                case {__scc {main@main:AlgData.quant} False True} {__scc {main@main:AlgData.==} False True} GHC.Prim.dataToTag#
                                                                                                                              @ AlgData.Ops
                                                                                                                              x1 of wild3 {
                                  DEFAULT
                                  -> (# {__scc {main@main:AlgData.quant} False True} GHC.Num.fromInteger
                                                                                       @ t
                                                                                       w
                                                                                       AlgData.quant3,
                                        GHC.Base.maxInt #)
                                  3#
                                  -> (# {__scc {main@main:AlgData.quant} False True} GHC.Num.fromInteger
                                                                                       @ t
                                                                                       w
                                                                                       AlgData.neutral10,
                                        GHC.Base.maxInt #) } }
                             GHC.Types.True
                             -> (# {__scc {main@main:AlgData.quant} False True} GHC.Num.fromInteger
                                                                                  @ t
                                                                                  w
                                                                                  AlgData.neutral5,
                                   AlgData.quant2 #) }
                        GHC.Types.True
                        -> (# {__scc {main@main:AlgData.quant} False True} GHC.Num.fromInteger
                                                                             @ t
                                                                             w
                                                                             AlgData.quant3,
                              AlgData.quant2 #) }
                   GHC.Types.True
                   -> (# {__scc {main@main:AlgData.quant} False True} GHC.Num.fromInteger
                                                                        @ t
                                                                        w
                                                                        AlgData.neutral5,
                         AlgData.quant1 #) }) -}
4d637072ad901205bf793a262f526c33
  data AlgSets
    = AlgSet GHC.Base.String
             (AlgData.AlgSets -> GHC.Base.String)
             (AlgData.Algo -> GHC.Base.Maybe AlgData.Algo)
             (AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Ordering)
    | SetExpr AlgData.Algo AlgData.Algo
    | Range AlgData.RangeWing AlgData.RangeWing
    | RSeq AlgData.Algo
    | LSeq AlgData.Algo
4d637072ad901205bf793a262f526c33
  data Algo
    = Und
    | Bool GHC.Types.Bool
    | Nom Lib.Noms.Nr
    | Lit GHC.Base.String
    | Punctuation GHC.Base.String
    | Op AlgData.Ops [AlgData.Algo]
    | Sets AlgData.AlgSets
    | Ellipsis
    | Pref
    | Numeric GHC.Base.String
    | Unit AlgData.Scale
    | Quant (AlgData.Algo, AlgData.Scale)
    | Dim AlgData.Dimension
    | Infinit
    | Infinitesimal
    | Neighbor {neighbourOp :: AlgData.Ops,
                neighbourExpr :: AlgData.Algo}
    | Solver {slvDefs :: AlgData.Ctx,
              slvVars :: AlgData.Ctx,
              slvBooks :: AlgData.Algo,
              slvDoc :: AlgData.Algo}
4d637072ad901205bf793a262f526c33
  type Ctx = Data.Map.Base.Map AlgData.Algo AlgData.Algo
4d637072ad901205bf793a262f526c33
  data Dimension
    = Dimension {dimSys :: AlgData.MetricSystem,
                 dimName :: GHC.Base.String,
                 dimKey :: GHC.Base.String,
                 dimSymbol :: AlgData.Algo,
                 dimDerived :: AlgData.Algo,
                 dimScales :: [AlgData.Scale],
                 favScale :: AlgData.Scale}
    RecFlag: Recursive
4d637072ad901205bf793a262f526c33
  data MetricSystem
    = MetricSystem {metricSystemName :: GHC.Base.String,
                    metricSystemDims :: [AlgData.Dimension]}
4d4ded7a73ed5a4c8b83cf0bae613d27
  data Ops
    = Identity
    | Sentence
    | SuchThat
    | Set
    | List
    | Not
    | Or
    | And
    | Neg
    | Pos
    | PosOrNeg
    | Sum
    | Sub
    | Mul
    | Div
    | Exp
    | Root
    | Log
    | Fact
    | Sgn
    | Abs
    | Floor
    | Round
    | Sin
    | Cos
    | ASin
    | ACos
    | Tg
    | ATg
    | SinH
    | CosH
    | ASinH
    | ATgH
    | ACosH
    | Func
    | InvFunc
    | DerivedFunc
    | Index
    | Contains
    | Contained
    | Union
    | Intersect
    | Disjunct
    | Equation
    | Simpl
    | Resol
    | ElementOf
    | NotElementOf
    | Equals
    | Greater
    | Less
    | GreaterOrEqual
    | LessOrEqual
    | NotEqual
    | Relates
    | InvRelates
    | Equiv
    | Implic
    | System
    | Document
    | Params
d33e6c9e98204b7af1fea0a6e2adb262
  data Prior
    = Documents
    | Sentences
    | Process
    | Steps
    | SetOps
    | Logic
    | Arithmetic
    | Geometric
    | Exponential
    | Relational
    | Function
    | Lists
    | Element
4d637072ad901205bf793a262f526c33
  data RangeWing
    = RangeWing {wingIncl :: GHC.Types.Bool, wingExpr :: AlgData.Algo}
4d637072ad901205bf793a262f526c33
  data Scale
    = Scale {scaleDim :: AlgData.Dimension,
             scaleSymbol :: GHC.Base.String,
             scaleName :: GHC.Base.String,
             scaleWeight :: AlgData.Algo,
             scaleExpr :: AlgData.Algo,
             scaleBase :: AlgData.Scale}
    RecFlag: Recursive
c9ef8d5dc738ebccedf2b40c787b6307
  class StrictEq o where
    strictEq :: o -> o -> GHC.Types.Bool
    {-# MINIMAL strictEq #-}
5e5c0442dd8bc0a468f2bf0ba42670e0
  arithmeticOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.arithmeticOps} True False} GHC.Types.:
                                                                        @ AlgData.Ops
                                                                        AlgData.Sub
                                                                        AlgData.arithmeticOps1) -}
a8545e2e9a400b55b726558a38b8622e
  arithmeticOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sum
                   AlgData.arithmeticOps2) -}
1f1ba2b7d5b8bbaa7b33b317c1b9cd00
  arithmeticOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Neg
                   AlgData.arithmeticOps3) -}
3295891f92d763cb38bebf3d49870e0a
  arithmeticOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   AlgData.arithmeticOps4) -}
beedb33d3d91c1a9e7d89f56ec950831
  arithmeticOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.PosOrNeg
                   (GHC.Types.[] @ AlgData.Ops)) -}
92964b6dbbec6e37fdfbc1d81f37306a
  binaryCalc :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.binaryCalc} True False} GHC.Types.:
                                                                     @ AlgData.Ops
                                                                     AlgData.Or
                                                                     AlgData.binaryCalc1) -}
e3de6f2da14a9aca5f3bad7c168994ab
  binaryCalc1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.And
                   AlgData.binaryCalc2) -}
098cc6728e3f74e518fae18c3dd2bed6
  binaryCalc2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sum
                   AlgData.binaryCalc3) -}
82ef452dce7d73539a41b3b4037bdc35
  binaryCalc3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sub
                   AlgData.binaryCalc4) -}
79b6e173e1869805e60bd9dabde35eab
  binaryCalc4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Mul
                   AlgData.binaryCalc5) -}
50ecc576c499ebb84b9d19df2c868b76
  binaryCalc5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Div
                   AlgData.binaryCalc6) -}
05418a2ad63f944a76123aef923ebb30
  binaryCalc6 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Exp
                   AlgData.binaryCalc7) -}
e6ee5bc0dc1d65af64240ff091203d69
  binaryCalc7 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Root
                   AlgData.binaryCalc8) -}
63750199e71a7cf1b743d63bcc56339c
  binaryCalc8 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Log
                   (GHC.Types.[] @ AlgData.Ops)) -}
0edc81a21cf6e0ff68e6eca64cf08dc2
  binaryOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.binaryOps} True False} GHC.Types.:
                                                                    @ AlgData.Ops
                                                                    AlgData.SuchThat
                                                                    (GHC.Types.[] @ AlgData.Ops)) -}
9336e5ce1b06bb33ba2abdaf4a0173cb
  canComut :: AlgData.Ops -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (op :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.canComut} True True} GHC.List.elem
                                                                  @ AlgData.Ops
                                                                  AlgData.$fEqOps
                                                                  op
                                                                  AlgData.comutOps) -}
ba136953bd44cadc08d025b1fc7cd0fe
  comutOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.comutOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Set
                                                                   AlgData.comutOps1) -}
26b2c0466e35f2a2087e6a51fd7a81b3
  comutOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Or
                   AlgData.comutOps2) -}
51dd4a523fd5f2c3a64623228be0b1b8
  comutOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.And
                   AlgData.comutOps3) -}
e14cad15297b576a703e6e75fc9f92ba
  comutOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sum
                   AlgData.comutOps4) -}
fa36abdd1ba47ad3f25aa715ab911066
  comutOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Mul
                   (GHC.Types.[] @ AlgData.Ops)) -}
6d2dd96b270859aede4447a9308fff94
  dimDerived :: AlgData.Dimension -> AlgData.Algo
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimDerived} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                                  ds5 }) -}
54c97a0060bf8436d6b8f48b35bdc198
  dimKey :: AlgData.Dimension -> GHC.Base.String
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimKey} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                              ds3 }) -}
87eccce088442db9082885cd526cefd1
  dimName :: AlgData.Dimension -> GHC.Base.String
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimName} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                               ds2 }) -}
b2d33ad34bd44c4a8b17398b7a0664fd
  dimScales :: AlgData.Dimension -> [AlgData.Scale]
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimScales} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                                 ds6 }) -}
5243ae07517e4637406549029df013c0
  dimSymbol :: AlgData.Dimension -> AlgData.Algo
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimSymbol} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                                 ds4 }) -}
d3fc849c615373ed407377df2ed9651f
  dimSys :: AlgData.Dimension -> AlgData.MetricSystem
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.dimSys} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                              ds1 }) -}
f85e0fcc72ac3a02b5e921eef8d6f34c
  distOver :: AlgData.Prior -> AlgData.Prior -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: AlgData.Prior) (ds1 :: AlgData.Prior) ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Types.Bool {- Arity: 1 -}
                   = \ (ds2 :: GHC.Prim.Void#)[OneShot] -> GHC.Types.False
                 } in
                 case ds of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   AlgData.Arithmetic
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        AlgData.Logic -> GHC.Types.True
                        AlgData.Lists -> GHC.Types.True }
                   AlgData.Geometric
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        AlgData.Arithmetic -> GHC.Types.True
                        AlgData.Lists -> GHC.Types.True }
                   AlgData.Exponential
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        AlgData.Geometric -> GHC.Types.True
                        AlgData.Lists -> GHC.Types.True } }) -}
52a8b98c311db02eab7f0afa3c359e00
  envOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.envOps} True False} GHC.Types.:
                                                                 @ AlgData.Ops
                                                                 AlgData.List
                                                                 AlgData.envOps1) -}
f4971aa6f810ebb26a3c7f56597a9f28
  envOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Set
                   AlgData.envOps2) -}
4140d05ec67dcb09a763e90c3f59cc0a
  envOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Func
                   AlgData.envOps3) -}
5d010b60c9c8deddc934b30e4a352660
  envOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.InvFunc
                   AlgData.envOps4) -}
68c17f64f26e7328f54a71cb00366a09
  envOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.DerivedFunc
                   (GHC.Types.[] @ AlgData.Ops)) -}
24149df67c5148a043074cf3bc329ffd
  equatOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.equatOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Equals
                                                                   AlgData.equatOps1) -}
0172f0dc4a4ba0bd5aef7f302f531064
  equatOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Greater
                   AlgData.equatOps2) -}
944079aca528d8fe456c1b3e00ca4405
  equatOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Less
                   AlgData.equatOps3) -}
54841b98cabdbaf232e3fe3304f103cc
  equatOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.GreaterOrEqual
                   AlgData.equatOps4) -}
66b35b327269dde5df22786c48c1437f
  equatOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.LessOrEqual
                   AlgData.equatOps5) -}
0d808e1316703306333ae224cc79cd27
  equatOps5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.NotEqual
                   AlgData.equatOps6) -}
08c4ee813ab8f5a6e60c288547bdba40
  equatOps6 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Relates
                   AlgData.equatOps7) -}
1b39bf93e3b00aef9387eac997cb917b
  equatOps7 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.ElementOf
                   AlgData.equatOps8) -}
e00dab167cc6ca03b1f6958f4fbaa543
  equatOps8 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.NotElementOf
                   (GHC.Types.[] @ AlgData.Ops)) -}
6f584e052f00a22ae52f3702359c3a5f
  exponentialOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.exponentialOps} True False} GHC.Types.:
                                                                         @ AlgData.Ops
                                                                         AlgData.Exp
                                                                         AlgData.exponentialOps1) -}
6949d72014085f049b37fabda680772a
  exponentialOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Root
                   AlgData.exponentialOps2) -}
0eb4b8f0faa8395bc5fe206849313d8f
  exponentialOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Log
                   AlgData.exponentialOps3) -}
81c6dd954726a0353a6b90814963fa85
  exponentialOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Fact
                   (GHC.Types.[] @ AlgData.Ops)) -}
df5f2cd5059e49f6f212562d25cb4d78
  exprOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.exprOps} True False} GHC.Types.:
                                                                  @ AlgData.Ops
                                                                  AlgData.List
                                                                  AlgData.exprOps1) -}
24def1a47f8b6f9f82957d70972b6977
  exprOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Set
                   AlgData.exprOps2) -}
3734b138dcb8f4546d69fc62a2d00b3d
  exprOps10 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Div
                   AlgData.exprOps11) -}
e2286001de772512f0d46feaf384314e
  exprOps11 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Exp
                   AlgData.exprOps12) -}
18e009a5b3b4d95c8b8a26655215f961
  exprOps12 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Root
                   AlgData.exprOps13) -}
9f540151064756e709ded1c3cf404493
  exprOps13 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Log
                   AlgData.exprOps14) -}
c964d180ed34dd6a1339f20ef314b800
  exprOps14 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Fact
                   AlgData.envOps2) -}
30ffa4886d9ca173314abca1a57fc936
  exprOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Not
                   AlgData.exprOps3) -}
e93a9723414a0e373690355906101c0e
  exprOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Or
                   AlgData.exprOps4) -}
0ab40b82b24609378a813ecc4e5747a7
  exprOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.And
                   AlgData.exprOps5) -}
d39c10f9a1aa5adfb50a38acef55f2af
  exprOps5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Neg
                   AlgData.exprOps6) -}
9e3c46143dfc68f3d5c341b86d708679
  exprOps6 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   AlgData.exprOps7) -}
333b001092aa7257503964df493d5b42
  exprOps7 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sum
                   AlgData.exprOps8) -}
b6e06873dd935958535fa37f830564ed
  exprOps8 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sub
                   AlgData.exprOps9) -}
12c79d2d00c92caeaecc1c3886ec3c86
  exprOps9 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Mul
                   AlgData.exprOps10) -}
d561f9250851fe1fad29098714de1288
  favScale :: AlgData.Dimension -> AlgData.Scale
  RecSel Left AlgData.Dimension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Dimension) ->
                 {__scc {main@main:AlgData.favScale} True True} case ds of wild { AlgData.Dimension ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                                                ds7 }) -}
d0bbc984e1afd4172ef48c2390ca2bf0
  funcs :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.funcs} True False} GHC.Types.:
                                                                @ AlgData.Ops
                                                                AlgData.Func
                                                                AlgData.envOps3) -}
0f60f8cf1e38ca75e8505b096bff8edb
  functionOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.functionOps} True False} GHC.Types.:
                                                                      @ AlgData.Ops
                                                                      AlgData.Func
                                                                      AlgData.functionOps1) -}
83acc09bab3f64de8cced4ae2e859dc7
  functionOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Neg
                   AlgData.functionOps2) -}
ec7745865b7d98e77a979c4ee9c6aac0
  functionOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   (GHC.Types.[] @ AlgData.Ops)) -}
2d20944ad8e12a43524e2fbef0cf6f2e
  geometricOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.geometricOps} True False} GHC.Types.:
                                                                       @ AlgData.Ops
                                                                       AlgData.Mul
                                                                       AlgData.geometricOps1) -}
1604b78515e3d4bba13c116d9e72db0b
  geometricOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Div
                   (GHC.Types.[] @ AlgData.Ops)) -}
b0b6d117b76fb60e22c041fcc08475fa
  inverse :: AlgData.Ops -> AlgData.Ops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.inverse} True True} case ds of wild {
                                                                 DEFAULT -> AlgData.Identity
                                                                 AlgData.Neg -> AlgData.Neg
                                                                 AlgData.Sum -> AlgData.Sub
                                                                 AlgData.Sub -> AlgData.Sum
                                                                 AlgData.Mul -> AlgData.Div
                                                                 AlgData.Div -> AlgData.Mul
                                                                 AlgData.Exp -> AlgData.Root
                                                                 AlgData.Func -> AlgData.InvFunc
                                                                 AlgData.InvFunc -> AlgData.Func
                                                                 AlgData.Equals -> AlgData.Equals
                                                                 AlgData.Greater -> AlgData.Less
                                                                 AlgData.Less -> AlgData.Greater
                                                                 AlgData.GreaterOrEqual
                                                                 -> AlgData.LessOrEqual
                                                                 AlgData.LessOrEqual
                                                                 -> AlgData.GreaterOrEqual
                                                                 AlgData.Equiv -> AlgData.Equiv
                                                                 AlgData.System
                                                                 -> AlgData.System }) -}
f1b36a1a3f88552d50f5576037241b7c
  listOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.listOps} True False} GHC.Types.:
                                                                  @ AlgData.Ops
                                                                  AlgData.Set
                                                                  AlgData.listOps1) -}
6a5671cd7eac44145e508ecd360a6d87
  listOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Or
                   AlgData.listOps2) -}
a18c07c4e7ef5cebf0655160147f6dec
  listOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.And
                   AlgData.listOps3) -}
e2b46698893fbbba71ae01120515777c
  listOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sum
                   AlgData.listOps4) -}
060e0d4ee847029c6f5c89b3d6465d30
  listOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sub
                   AlgData.listOps5) -}
6cab33ffe850b02cffe8dd5ec9d42d8b
  listOps5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Mul
                   AlgData.geometricOps1) -}
4b3a784d6a53216a44782ed61826c751
  logicOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.logicOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.And
                                                                   AlgData.logicOps1) -}
ccfcd79047523850d3e860e04195a9c5
  logicOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Or
                   AlgData.logicOps2) -}
f9ebca4ab9e7d8fa5883ac2962d431a5
  logicOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Not
                   (GHC.Types.[] @ AlgData.Ops)) -}
32dea3904569e6c87c326a6f853c1e14
  metricSystemDims :: AlgData.MetricSystem -> [AlgData.Dimension]
  RecSel Left AlgData.MetricSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.MetricSystem) ->
                 {__scc {main@main:AlgData.metricSystemDims} True True} case ds of wild { AlgData.MetricSystem ds1 ds2 ->
                                                                        ds2 }) -}
62045474b42d59ee1ba1d84643680749
  metricSystemName :: AlgData.MetricSystem -> GHC.Base.String
  RecSel Left AlgData.MetricSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.MetricSystem) ->
                 {__scc {main@main:AlgData.metricSystemName} True True} case ds of wild { AlgData.MetricSystem ds1 ds2 ->
                                                                        ds1 }) -}
31d5fa9207ea604a10cdc071e1e32fda
  neighbourExpr :: AlgData.Algo -> AlgData.Algo
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.neighbourExpr} True True} case ds of wild {
                                                                       DEFAULT
                                                                       -> AlgData.neighbourExpr1
                                                                       AlgData.Neighbor ds1 ds2
                                                                       -> ds2 }) -}
326ca8760bd0ccb119ddfff323439ec3
  neighbourExpr1 :: AlgData.Algo
  {- Strictness: x -}
313bfc630c57a91b636814c68ac60e1a
  neighbourOp :: AlgData.Algo -> AlgData.Ops
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.neighbourOp} True True} case ds of wild {
                                                                     DEFAULT -> AlgData.neighbourOp1
                                                                     AlgData.Neighbor ds1 ds2
                                                                     -> ds1 }) -}
e2461d49f0934adaff0e8ce080170675
  neighbourOp1 :: AlgData.Ops
  {- Strictness: x -}
8e35b78447bb2a8a3af74ba5718fb481
  neutral :: AlgData.Ops -> GHC.Base.Maybe AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.neutral} True True} case ds of wild {
                                                                 DEFAULT
                                                                 -> GHC.Base.Nothing @ AlgData.Algo
                                                                 AlgData.Sum -> AlgData.neutral6
                                                                 AlgData.Mul -> AlgData.neutral1
                                                                 AlgData.Root
                                                                 -> AlgData.neutral1 }) -}
335991cf79a358db2866bda6cfcde953
  neutral1 :: GHC.Base.Maybe AlgData.Algo
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ AlgData.Algo AlgData.neutral2) -}
7689415bc6c5e3149d4c2c7838b5b248
  neutral10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
425430d691e8c96cb35b74c1c4b516cf
  neutral2 :: AlgData.Algo
  {- Strictness: m3, Unfolding: (AlgData.Nom AlgData.neutral3) -}
1825454d8d30971f230af004ef987896
  neutral3 :: Lib.Noms.Nr
  {- Unfolding: ({__scc {main@main:AlgData.neutral} False True} {__scc {main@main:Lib.Noms.fromInteger} True False} Lib.Noms.NrRatio
                                                                                                                      AlgData.neutral4) -}
2c933015ed960620ed0c36cdbb8e33c0
  neutral4 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   AlgData.neutral5
                   GHC.Real.$fEnumRatio1) -}
324738cd190adaa99a4efd719bb45b1d
  neutral5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
b7bc0c690e55334f7cc12a8cb642c402
  neutral6 :: GHC.Base.Maybe AlgData.Algo
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ AlgData.Algo AlgData.neutral7) -}
50a25f111741586f4c3016c2511e63b4
  neutral7 :: AlgData.Algo
  {- Strictness: m3, Unfolding: (AlgData.Nom AlgData.neutral8) -}
618fdb03e74ba08018b2613fbd27342c
  neutral8 :: Lib.Noms.Nr
  {- Unfolding: ({__scc {main@main:AlgData.neutral} False True} {__scc {main@main:Lib.Noms.fromInteger} True False} Lib.Noms.NrRatio
                                                                                                                      AlgData.neutral9) -}
7518ce3209321a88f4a1c8b8ad9f962a
  neutral9 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   AlgData.neutral10
                   GHC.Real.$fEnumRatio1) -}
90d5e78cf680ce0c9347bff4c8738fa2
  nomVal :: AlgData.Algo -> Lib.Noms.Nr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.nomVal} True True} case ds of wild {
                                                                DEFAULT -> AlgData.nomVal1
                                                                AlgData.Nom x -> x }) -}
fe8005fc116dd7fcd00cf8165c04e35b
  nomVal1 :: Lib.Noms.Nr
  {- Strictness: x -}
343111d4608beb69879789a3cf08bfbe
  note :: a -> b -> (a, b)
  {- Unfolding: ({__scc {main@main:AlgData.note} True False} GHC.Tuple.(,)) -}
3c6a26a16e9bbbb06a868c3a6e7889c2
  opSetOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.opSetOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Union
                                                                   AlgData.opSetOps1) -}
576ce7ac079c091e0a32b7fefe49a805
  opSetOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Intersect
                   AlgData.opSetOps2) -}
d5172ea46f4dc0c68af7532f13858268
  opSetOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Contained
                   AlgData.opSetOps3) -}
c13cd4f50a0ac15b82cd15652c24f4c0
  opSetOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Contains
                   (GHC.Types.[] @ AlgData.Ops)) -}
4d637072ad901205bf793a262f526c33
  ordSet :: AlgData.AlgSets -> AlgData.AlgSets -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: AlgData.AlgSets) (ds1 :: AlgData.AlgSets) ->
                 {__scc {main@main:AlgData.ordSet} True True} case ds of wild {
                                                                DEFAULT -> AlgData.ordSet1
                                                                AlgData.AlgSet ds2 ds3 ds4 ds5
                                                                -> case ds2 of wild1 {
                                                                     [] -> AlgData.ordSet1
                                                                     : ds6 ds7
                                                                     -> case ds6 of wild2 { GHC.Types.C# ds8 ->
                                                                        case ds8 of ds9 {
                                                                          DEFAULT -> AlgData.ordSet1
                                                                          'N'#
                                                                          -> case ds7 of wild3 {
                                                                               []
                                                                               -> case ds1 of wild4 {
                                                                                    DEFAULT
                                                                                    -> AlgData.ordSet1
                                                                                    AlgData.AlgSet ds10 ds11 ds12 ds13
                                                                                    -> case ds10 of wild5 {
                                                                                         []
                                                                                         -> AlgData.ordSet1
                                                                                         : ds14 ds15
                                                                                         -> case ds14 of wild6 { GHC.Types.C# ds16 ->
                                                                                            case ds16 of ds17 {
                                                                                              DEFAULT
                                                                                              -> AlgData.ordSet1
                                                                                              'N'#
                                                                                              -> case ds15 of wild7 {
                                                                                                   []
                                                                                                   -> GHC.Types.EQ
                                                                                                   : ipv ipv1
                                                                                                   -> AlgData.ordSet1 }
                                                                                              'R'#
                                                                                              -> case ds15 of wild7 {
                                                                                                   []
                                                                                                   -> GHC.Types.LT
                                                                                                   : ipv ipv1
                                                                                                   -> AlgData.ordSet1 } } } } }
                                                                               : ipv ipv1
                                                                               -> AlgData.ordSet1 }
                                                                          'R'#
                                                                          -> case ds7 of wild3 {
                                                                               []
                                                                               -> case ds1 of wild4 {
                                                                                    DEFAULT
                                                                                    -> AlgData.ordSet1
                                                                                    AlgData.AlgSet ds10 ds11 ds12 ds13
                                                                                    -> case ds10 of wild5 {
                                                                                         []
                                                                                         -> AlgData.ordSet1
                                                                                         : ds14 ds15
                                                                                         -> case ds14 of wild6 { GHC.Types.C# ds16 ->
                                                                                            case ds16 of ds17 {
                                                                                              DEFAULT
                                                                                              -> AlgData.ordSet1
                                                                                              'N'#
                                                                                              -> case ds15 of wild7 {
                                                                                                   []
                                                                                                   -> GHC.Types.GT
                                                                                                   : ipv ipv1
                                                                                                   -> AlgData.ordSet1 }
                                                                                              'R'#
                                                                                              -> case ds15 of wild7 {
                                                                                                   []
                                                                                                   -> GHC.Types.EQ
                                                                                                   : ipv ipv1
                                                                                                   -> AlgData.ordSet1 } } } } }
                                                                               : ipv ipv1
                                                                               -> AlgData.ordSet1 } } } } }) -}
37cdb2cdda0c8f87ac61dece790c01aa
  ordSet1 :: GHC.Types.Ordering
  {- Strictness: x -}
c97e6d64c3814beedd910a1fd92173a9
  parallelOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.parallelOps} True False} GHC.Types.:
                                                                      @ AlgData.Ops
                                                                      AlgData.Document
                                                                      AlgData.parallelOps1) -}
ed3a6e4cce089ef7ed2265825835fe1b
  parallelOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.System
                   (GHC.Types.[] @ AlgData.Ops)) -}
4ae810f709963c777d05267a8cc039b6
  paramsOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.paramsOps} True False} GHC.Types.:
                                                                    @ AlgData.Ops
                                                                    AlgData.Root
                                                                    AlgData.paramsOps1) -}
c36eaf3ce7245e71e1ce086b63db1912
  paramsOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Log
                   AlgData.paramsOps2) -}
1d24280d3f7105b22e60ea4d0f262b14
  paramsOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Set
                   AlgData.paramsOps3) -}
c1341c60e0ef53e7e623d6a5630a2514
  paramsOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Func
                   AlgData.paramsOps4) -}
266feb6282871ddce41343686f3dd748
  paramsOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.InvFunc
                   AlgData.paramsOps5) -}
e6b5a89ad101de00f4d2a0187f7451b3
  paramsOps5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.DerivedFunc
                   AlgData.paramsOps6) -}
4c7bb518321a72b0a8af81b9deaca738
  paramsOps6 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Sentence
                   (GHC.Types.[] @ AlgData.Ops)) -}
ddb33f73698bf15123c59568e5def0ee
  partialCalc :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.partialCalc} True False} GHC.Types.:
                                                                      @ AlgData.Ops
                                                                      AlgData.Root
                                                                      AlgData.binaryCalc8) -}
b904032b39caaff82b4d08ac79a671f0
  partialOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.partialOps} True False} GHC.Types.:
                                                                     @ AlgData.Ops
                                                                     AlgData.Root
                                                                     AlgData.partialOps1) -}
226ae15233da0bbc3993286f8d22aef1
  partialOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Log
                   AlgData.partialOps2) -}
a840f30970c377eb12dbdeeab912c5aa
  partialOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Equals
                   AlgData.partialOps3) -}
27f357037c0b9bfb7ba30d215f9f1d1b
  partialOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Greater
                   AlgData.partialOps4) -}
1f3907cd23c0d858fbe60f123271141b
  partialOps4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Less
                   AlgData.partialOps5) -}
fb26e4f75f11101603889d1942843073
  partialOps5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.GreaterOrEqual
                   AlgData.partialOps6) -}
7e0149c088f6a55d56a261db235cf449
  partialOps6 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.LessOrEqual
                   AlgData.partialOps7) -}
3463de4d628faefbc05b23f708b10d9f
  partialOps7 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Equiv
                   AlgData.partialOps8) -}
86ea7516ac53efe0c0f611521b0f9798
  partialOps8 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Implic
                   (GHC.Types.[] @ AlgData.Ops)) -}
2a8a7c59b2ca4821612561d2d4131eae
  prior :: AlgData.Ops -> AlgData.Prior
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (op :: AlgData.Ops) ->
                 {__scc {main@main:AlgData.prior} True True} {__scc {main@main:AlgData.==} True False} case {__scc {main@main:AlgData.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                        @ AlgData.Ops
                                                                                                                                                        op of wild {
                                                                                                         DEFAULT
                                                                                                         -> {__scc {main@main:AlgData.==} True False} case wild of wild1 {
                                                                                                                                                        DEFAULT
                                                                                                                                                        -> {__scc {main@main:AlgData.==} True False} case wild1 of wild2 {
                                                                                                                                                                                                       DEFAULT
                                                                                                                                                                                                       -> case GHC.List.elem
                                                                                                                                                                                                                 @ AlgData.Ops
                                                                                                                                                                                                                 AlgData.$fEqOps
                                                                                                                                                                                                                 op
                                                                                                                                                                                                                 AlgData.setOps of wild3 {
                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                            -> {__scc {main@main:AlgData.==} True False} case wild2 of wild4 {
                                                                                                                                                                                                                                                           DEFAULT
                                                                                                                                                                                                                                                           -> case GHC.List.elem
                                                                                                                                                                                                                                                                     @ AlgData.Ops
                                                                                                                                                                                                                                                                     AlgData.$fEqOps
                                                                                                                                                                                                                                                                     op
                                                                                                                                                                                                                                                                     AlgData.equatOps of wild5 {
                                                                                                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                                                                                                -> case GHC.List.elem
                                                                                                                                                                                                                                                                          @ AlgData.Ops
                                                                                                                                                                                                                                                                          AlgData.$fEqOps
                                                                                                                                                                                                                                                                          op
                                                                                                                                                                                                                                                                          AlgData.procOps of wild6 {
                                                                                                                                                                                                                                                                     GHC.Types.False
                                                                                                                                                                                                                                                                     -> case GHC.List.elem
                                                                                                                                                                                                                                                                               @ AlgData.Ops
                                                                                                                                                                                                                                                                               AlgData.$fEqOps
                                                                                                                                                                                                                                                                               op
                                                                                                                                                                                                                                                                               AlgData.resolOps of wild7 {
                                                                                                                                                                                                                                                                          GHC.Types.False
                                                                                                                                                                                                                                                                          -> case GHC.List.elem
                                                                                                                                                                                                                                                                                    @ AlgData.Ops
                                                                                                                                                                                                                                                                                    AlgData.$fEqOps
                                                                                                                                                                                                                                                                                    op
                                                                                                                                                                                                                                                                                    AlgData.resolSteps of wild8 {
                                                                                                                                                                                                                                                                               GHC.Types.False
                                                                                                                                                                                                                                                                               -> case GHC.List.elem
                                                                                                                                                                                                                                                                                         @ AlgData.Ops
                                                                                                                                                                                                                                                                                         AlgData.$fEqOps
                                                                                                                                                                                                                                                                                         op
                                                                                                                                                                                                                                                                                         AlgData.opSetOps of wild9 {
                                                                                                                                                                                                                                                                                    GHC.Types.False
                                                                                                                                                                                                                                                                                    -> case GHC.List.elem
                                                                                                                                                                                                                                                                                              @ AlgData.Ops
                                                                                                                                                                                                                                                                                              AlgData.$fEqOps
                                                                                                                                                                                                                                                                                              op
                                                                                                                                                                                                                                                                                              AlgData.logicOps of wild10 {
                                                                                                                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                                                                                                                         -> case GHC.List.elem
                                                                                                                                                                                                                                                                                                   @ AlgData.Ops
                                                                                                                                                                                                                                                                                                   AlgData.$fEqOps
                                                                                                                                                                                                                                                                                                   op
                                                                                                                                                                                                                                                                                                   AlgData.arithmeticOps of wild11 {
                                                                                                                                                                                                                                                                                              GHC.Types.False
                                                                                                                                                                                                                                                                                              -> case GHC.List.elem
                                                                                                                                                                                                                                                                                                        @ AlgData.Ops
                                                                                                                                                                                                                                                                                                        AlgData.$fEqOps
                                                                                                                                                                                                                                                                                                        op
                                                                                                                                                                                                                                                                                                        AlgData.geometricOps of wild12 {
                                                                                                                                                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                                                                                                                                                   -> case GHC.List.elem
                                                                                                                                                                                                                                                                                                             @ AlgData.Ops
                                                                                                                                                                                                                                                                                                             AlgData.$fEqOps
                                                                                                                                                                                                                                                                                                             op
                                                                                                                                                                                                                                                                                                             AlgData.exponentialOps of wild13 {
                                                                                                                                                                                                                                                                                                        GHC.Types.False
                                                                                                                                                                                                                                                                                                        -> AlgData.Function
                                                                                                                                                                                                                                                                                                        GHC.Types.True
                                                                                                                                                                                                                                                                                                        -> AlgData.Exponential }
                                                                                                                                                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                                                                                                                                                   -> AlgData.Geometric }
                                                                                                                                                                                                                                                                                              GHC.Types.True
                                                                                                                                                                                                                                                                                              -> AlgData.Arithmetic }
                                                                                                                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                                                                                                                         -> AlgData.Logic }
                                                                                                                                                                                                                                                                                    GHC.Types.True
                                                                                                                                                                                                                                                                                    -> AlgData.SetOps }
                                                                                                                                                                                                                                                                               GHC.Types.True
                                                                                                                                                                                                                                                                               -> AlgData.Steps }
                                                                                                                                                                                                                                                                          GHC.Types.True
                                                                                                                                                                                                                                                                          -> AlgData.Process }
                                                                                                                                                                                                                                                                     GHC.Types.True
                                                                                                                                                                                                                                                                     -> AlgData.Process }
                                                                                                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                                                                                                -> AlgData.Relational }
                                                                                                                                                                                                                                                           43#
                                                                                                                                                                                                                                                           -> AlgData.Relational }
                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                            -> AlgData.Lists }
                                                                                                                                                                                                       1#
                                                                                                                                                                                                       -> AlgData.Sentences }
                                                                                                                                                        59#
                                                                                                                                                        -> AlgData.Documents }
                                                                                                         2#
                                                                                                         -> AlgData.SetOps }) -}
b4ac39b5abb56e512a3603715d37d592
  procOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.procOps} True False} GHC.Types.:
                                                                  @ AlgData.Ops
                                                                  AlgData.Resol
                                                                  AlgData.procOps1) -}
5a4296e02a21c30877f9470125de3c1b
  procOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Simpl
                   (GHC.Types.[] @ AlgData.Ops)) -}
1163b138515e147b4525b85db997c469
  quant :: GHC.Num.Num t => AlgData.Ops -> (t, GHC.Types.Int)
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ t (w :: GHC.Num.Num t) (w1 :: AlgData.Ops) ->
                 case AlgData.$wquant @ t w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7b0764ebdcb6e5a5ac297204f15355c5
  quant1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
660997e825974e59922ad0c53e6ca7d8
  quant2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
ecff2650e38287130d45bc08a6d8979d
  quant3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
91e520cdda65e7048db18f9eb4d72149
  rawSequenceOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.rawSequenceOps} True False} GHC.Types.:
                                                                         @ AlgData.Ops
                                                                         AlgData.List
                                                                         AlgData.rawSequenceOps1) -}
cc08d1f85ecd8ac5e6ae6a0ac28f788f
  rawSequenceOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Set
                   (GHC.Types.[] @ AlgData.Ops)) -}
49f9ad76dde5565786296bd40c13af37
  resolOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.resolOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Equation
                                                                   AlgData.resolOps1) -}
6808e51177d85f64655397855974efc1
  resolOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.System
                   AlgData.resolOps2) -}
590a0370abd6ef36173d51e2aee71c89
  resolOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Document
                   (GHC.Types.[] @ AlgData.Ops)) -}
e6d89533f628878f7da1e0f17dbec795
  resolSteps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.resolSteps} True False} GHC.Types.:
                                                                     @ AlgData.Ops
                                                                     AlgData.Equiv
                                                                     AlgData.partialOps8) -}
98cc1f4678d0bdba91f1ec627bd82eec
  sameAtom :: AlgData.Algo -> AlgData.Algo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
9f649b5d97c6da146e48902bdf382e6f
  scaleBase :: AlgData.Scale -> AlgData.Scale
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleBase} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                 ds6 }) -}
09f6591080cce11f4a98728f8bc0412e
  scaleDim :: AlgData.Scale -> AlgData.Dimension
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U,U,U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleDim} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                ds1 }) -}
2b80398345810f365558b990aae20224
  scaleExpr :: AlgData.Scale -> AlgData.Algo
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleExpr} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                 ds5 }) -}
65d22b7f536d365dd3df1c0c16503501
  scaleName :: AlgData.Scale -> GHC.Base.String
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleName} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                 ds3 }) -}
cf5bb527dd1b6dc8734eaa84cfe9d76d
  scaleSymbol :: AlgData.Scale -> GHC.Base.String
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleSymbol} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                   ds2 }) -}
6e6fb05f0b2d1e79ff96f48aa7b72d16
  scaleWeight :: AlgData.Scale -> AlgData.Algo
  RecSel Left AlgData.Scale
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Scale) ->
                 {__scc {main@main:AlgData.scaleWeight} True True} case ds of wild { AlgData.Scale ds1 ds2 ds3 ds4 ds5 ds6 ->
                                                                   ds4 }) -}
7877d2ca5cd2c4890e145e52b3b5641b
  sequenceOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.sequenceOps} True True} GHC.Base.++
                                                                     @ AlgData.Ops
                                                                     AlgData.setOps
                                                                     AlgData.logicOps) -}
c4716f8eececd0a5dc3b926b064ff9f6
  setOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.setOps} True False} GHC.Types.:
                                                                 @ AlgData.Ops
                                                                 AlgData.List
                                                                 AlgData.setOps1) -}
8abcb4e62296a45cb7fef4d7f722fce3
  setOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Set
                   AlgData.setOps2) -}
34a868f845cdbc272122de6629fb63c6
  setOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Params
                   (GHC.Types.[] @ AlgData.Ops)) -}
231ba5fad8cfa8cf1e8dc4995e49c6e8
  signalOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.signalOps} True False} GHC.Types.:
                                                                    @ AlgData.Ops
                                                                    AlgData.Neg
                                                                    AlgData.arithmeticOps3) -}
b81343380e729ef300a849bb1be231d6
  slvBooks :: AlgData.Algo -> AlgData.Algo
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.slvBooks} True True} case ds of wild {
                                                                  DEFAULT -> AlgData.slvBooks1
                                                                  AlgData.Solver ds1 ds2 ds3 ds4
                                                                  -> ds3 }) -}
59e68e1e09ad72244f85c2ef167ad554
  slvBooks1 :: AlgData.Algo
  {- Strictness: x -}
92dfe82196b7a1130020774596f0667a
  slvDefs :: AlgData.Algo -> AlgData.Ctx
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.slvDefs} True True} case ds of wild {
                                                                 DEFAULT -> AlgData.slvDefs1
                                                                 AlgData.Solver ds1 ds2 ds3 ds4
                                                                 -> ds1 }) -}
4362f5b07596dd30070d5f57f8e32715
  slvDefs1 :: AlgData.Ctx
  {- Strictness: x -}
e2186a6c48d389b1778ff1d632cf7d91
  slvDoc :: AlgData.Algo -> AlgData.Algo
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.slvDoc} True True} case ds of wild {
                                                                DEFAULT -> AlgData.slvDoc1
                                                                AlgData.Solver ds1 ds2 ds3 ds4
                                                                -> ds4 }) -}
90899237bc943af656be1617c3b77abc
  slvDoc1 :: AlgData.Algo
  {- Strictness: x -}
1ce7b55c266adc690b1cc7e5ddbb384b
  slvVars :: AlgData.Algo -> AlgData.Ctx
  RecSel Left AlgData.Algo
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.Algo) ->
                 {__scc {main@main:AlgData.slvVars} True True} case ds of wild {
                                                                 DEFAULT -> AlgData.slvVars1
                                                                 AlgData.Solver ds1 ds2 ds3 ds4
                                                                 -> ds2 }) -}
786558659e8f6ee2970f27e11ea92624
  slvVars1 :: AlgData.Ctx
  {- Strictness: x -}
1a2b74be8f670883a20fdbf773a50322
  unaryCalc :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.unaryCalc} True False} GHC.Types.:
                                                                    @ AlgData.Ops
                                                                    AlgData.Not
                                                                    AlgData.unaryCalc1) -}
288da3d82d5841f3ca0013a141213d05
  unaryCalc1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Neg
                   AlgData.unaryCalc2) -}
c3b8a53529c075f6310e7d4a84bd6156
  unaryCalc2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   AlgData.unaryCalc3) -}
fc8dafef5fe89bfa614471705ca6770e
  unaryCalc3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Fact
                   AlgData.unaryCalc4) -}
6a50f231b0b7034776ae91eed8ae720f
  unaryCalc4 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Floor
                   AlgData.unaryCalc5) -}
133fbfdf945e9ce0ea40bdc9be730ee0
  unaryCalc5 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Round
                   (GHC.Types.[] @ AlgData.Ops)) -}
1adac6b7a00acdddad26174ff53b288e
  unaryOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.unaryOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Not
                                                                   AlgData.unaryOps1) -}
6d3a0b0c9a6ba13e4e8df37e074214d1
  unaryOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Neg
                   AlgData.unaryOps2) -}
7800e0a2f41f4826c275717d9b539299
  unaryOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   AlgData.unaryOps3) -}
4672db94f2813a91ece9003fdc993b91
  unaryOps3 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Fact
                   AlgData.arithmeticOps4) -}
9705fe6f6375bbd1cb39199fb26fa4aa
  wingExpr :: AlgData.RangeWing -> AlgData.Algo
  RecSel Left AlgData.RangeWing
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.RangeWing) ->
                 {__scc {main@main:AlgData.wingExpr} True True} case ds of wild { AlgData.RangeWing ds1 ds2 ->
                                                                ds2 }) -}
e3db35f38bc8b5e6737ea2dbca59b879
  wingIncl :: AlgData.RangeWing -> GHC.Types.Bool
  RecSel Left AlgData.RangeWing
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AlgData.RangeWing) ->
                 {__scc {main@main:AlgData.wingIncl} True True} case ds of wild { AlgData.RangeWing ds1 ds2 ->
                                                                ds1 }) -}
f14f2260b9e5397b6cf132de6bc7c556
  xformOps :: [AlgData.Ops]
  {- Unfolding: ({__scc {main@main:AlgData.xformOps} True False} GHC.Types.:
                                                                   @ AlgData.Ops
                                                                   AlgData.Neg
                                                                   AlgData.xformOps1) -}
2f02fdaecbcba577197fdbcece4dea98
  xformOps1 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.Pos
                   AlgData.xformOps2) -}
66adbb50ee68c565c11a37a826c4d05d
  xformOps2 :: [AlgData.Ops]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ AlgData.Ops
                   AlgData.PosOrNeg
                   AlgData.exprOps7) -}
instance GHC.Enum.Enum [AlgData.Prior] = AlgData.$fEnumPrior
instance GHC.Classes.Eq [AlgData.AlgSets] = AlgData.$fEqAlgSets
instance GHC.Classes.Eq [AlgData.Algo] = AlgData.$fEqAlgo
instance GHC.Classes.Eq [AlgData.Dimension] = AlgData.$fEqDimension
instance GHC.Classes.Eq [AlgData.MetricSystem]
  = AlgData.$fEqMetricSystem
instance GHC.Classes.Eq [AlgData.Ops] = AlgData.$fEqOps
instance GHC.Classes.Eq [AlgData.Prior] = AlgData.$fEqPrior
instance GHC.Classes.Eq [AlgData.RangeWing] = AlgData.$fEqRangeWing
instance GHC.Classes.Eq [AlgData.Scale] = AlgData.$fEqScale
instance GHC.Base.Monoid [AlgData.Algo] = AlgData.$fMonoidAlgo
instance GHC.Classes.Ord [AlgData.AlgSets] = AlgData.$fOrdAlgSets
instance GHC.Classes.Ord [AlgData.Algo] = AlgData.$fOrdAlgo
instance GHC.Classes.Ord [AlgData.Dimension]
  = AlgData.$fOrdDimension
instance GHC.Classes.Ord [AlgData.MetricSystem]
  = AlgData.$fOrdMetricSystem
instance GHC.Classes.Ord [AlgData.Ops] = AlgData.$fOrdOps
instance GHC.Classes.Ord [AlgData.Prior] = AlgData.$fOrdPrior
instance GHC.Classes.Ord [AlgData.Scale] = AlgData.$fOrdScale
instance GHC.Show.Show [AlgData.Ops] = AlgData.$fShowOps
instance GHC.Show.Show [AlgData.Prior] = AlgData.$fShowPrior
instance AlgData.StrictEq [AlgData.AlgSets]
  = AlgData.$fStrictEqAlgSets
instance AlgData.StrictEq [AlgData.Algo] = AlgData.$fStrictEqAlgo
instance AlgData.StrictEq [AlgData.RangeWing]
  = AlgData.$fStrictEqRangeWing
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

